[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "生信初学者教程（癌症转录组学）",
    "section": "",
    "text": "欢迎\n在生物信息学（生信）领域，随着高通量测序技术的不断发展，大量数据涌现，为科研工作者提供了丰富的资源。然而，对于初学者而言，如何从海量的数据中挖掘有价值的信息，并开展一个完整的生信项目，仍然是一个挑战。目前，市面上针对初学者的系统性、以项目为框架的生信教程相对较少，这无疑增加了初学者的学习难度。\n鉴于此，结合先前的项目经验，笔者特别为初学者设计了一套基于癌症转录组数据的纯生信文章项目教程。该教程涵盖了项目设计、数据下载、数据处理、数据分析以及结果整理和文章撰写等关键步骤，旨在帮助初学者快速掌握生信项目的全流程操作，提升科研能力。\n笔者认为，这套教程对于初学者而言，具有较高的实用价值和指导意义。通过系统学习，您可以更加清晰地了解生信项目的各个环节，掌握必备的技能和知识，为后续的研究工作打下坚实的基础。同时，笔者也相信，通过付费学习，您可以更加珍惜这套教程，更加投入地学习，取得更好的学习效果。",
    "crumbs": [
      "欢迎"
    ]
  },
  {
    "objectID": "index.html#编译方法",
    "href": "index.html#编译方法",
    "title": "生信初学者教程（癌症转录组学）",
    "section": "编译方法",
    "text": "编译方法\n本教程是在 RStudio IDE 内使用 Quarto 编辑的，Quarto 是继R Markdown之后，一个新的开源的科学和技术发布系统，它基于 Pandoc支持输出多种格式的书稿，比如 HTML 网页、EPUB 电子书、DOCX 文档和 PDF 便携式文档等。Quarto 吸收了过去 10 年 R Markdown 取得的经验和教训，在书籍写作、创建博客、制作简历和幻灯片等系列场景中支持更加统一的使用语法，一份源文档输出多种格式，使文档内容在不同场景中的迁移成本更低。了解更多 Quarto 特性，请访问 https://quarto.org/。\n书中 R 包名以粗体表示，如 knitr 包，函数名以等宽体表示，如 plot()，函数的参数名同理。代码块内注释用 # 表示，运行结果每一行开头以 #&gt; 标记。本书写作过程中，依赖 knitr (Xie 2015)、ggplot2 (Wickham 2016) 和 lattice (Sarkar 2008) 等众多 R 包。考虑到要同时支持 DOCX、EPUB、PDF 和 HTML 四种书籍格式，书中使用 knitr 包和 gt 包制作静态的表格。",
    "crumbs": [
      "欢迎"
    ]
  },
  {
    "objectID": "index.html#r包版本",
    "href": "index.html#r包版本",
    "title": "生信初学者教程（癌症转录组学）",
    "section": "R包版本",
    "text": "R包版本\n在编写和生成这些书籍格式的过程中，使用了多个R语言包，并特别关注了这些包的版本信息以确保结果的准确性和兼容性。以下是涉及到的R包及其相应版本的详细说明：\n\nxfun::session_info(packages = c(\n  \"dplyr\", \"tidyverse\", \"showtext\", \"data.table\",\n  \"Biobase\", \"sva\", \"limma\", \"MicrobiomeAnalysis\", \n  \"SummarizedExperiment\", \"snm\", \"ggpubr\", \"cowplot\",\n  \"gtsummary\", \"xlsx\", \"ComplexHeatmap\", \"circlize\", \n  \"ggplotify\", \"massdatabase\", \"clusterProfiler\", \n  \"org.Hs.eg.db\", \"enrichplot\", \"GSVA\", \"corrplot\", \n  \"RColorBrewer\", \"glmnet\", \"caret\", \"ROCR\", \n  \"pROC\", \"randomForest\", \"mlbench\", \"Boruta\", \n  \"Hmisc\", \"e1071\", \"ggvenn\", \"UpSetR\", \n  \"multipleROC\", \"ggdist\", \"gghalves\",\n  \"ggpmisc\", \"ggExtra\", \"MLmetrics\",\n  \"Seurat\", \"GseaVis\", \"ggh4x\", \n  \"ggunchull\", \"scCATCH\", \"SingleR\", \n  \"UCell\", \"rstatix\", \"viridis\", \n  \"immunedeconv\", \"ImmuCellAI\"), \n  dependencies = FALSE)\n\n#&gt; R version 4.3.3 (2024-02-29)\n#&gt; Platform: aarch64-apple-darwin20 (64-bit)\n#&gt; Running under: macOS Sonoma 14.2\n#&gt; \n#&gt; Locale: en_US.UTF-8 / en_US.UTF-8 / en_US.UTF-8 / C / en_US.UTF-8 / en_US.UTF-8\n#&gt; \n#&gt; Package version:\n#&gt;   Biobase_2.62.0              Boruta_8.0.0               \n#&gt;   caret_6.0.94                circlize_0.4.16            \n#&gt;   clusterProfiler_4.10.1      ComplexHeatmap_2.18.0      \n#&gt;   corrplot_0.92               cowplot_1.1.3              \n#&gt;   data.table_1.15.4           dplyr_1.1.4                \n#&gt;   e1071_1.7.14                enrichplot_1.22.0          \n#&gt;   ggdist_3.3.2                ggExtra_0.10.1             \n#&gt;   ggh4x_0.2.8                 gghalves_0.1.4             \n#&gt;   ggplotify_0.1.2             ggpmisc_0.5.6              \n#&gt;   ggpubr_0.6.0                ggunchull_1.0.1            \n#&gt;   ggvenn_0.1.10               glmnet_4.1.8               \n#&gt;   GseaVis_0.1.0               GSVA_1.50.5                \n#&gt;   gtsummary_1.7.2             Hmisc_5.1.2                \n#&gt;   ImmuCellAI_0.1.0            immunedeconv_2.1.0         \n#&gt;   limma_3.58.1                massdatabase_1.0.10        \n#&gt;   MicrobiomeAnalysis_1.0.3    mlbench_2.1.5              \n#&gt;   MLmetrics_1.1.3             multipleROC_0.1.1          \n#&gt;   org.Hs.eg.db_3.18.0         pROC_1.18.5                \n#&gt;   randomForest_4.7.1.1        RColorBrewer_1.1.3         \n#&gt;   ROCR_1.0.11                 rstatix_0.7.2              \n#&gt;   scCATCH_3.2.2               Seurat_5.0.3               \n#&gt;   showtext_0.9.7              SingleR_2.4.1              \n#&gt;   snm_1.50.0                  SummarizedExperiment_1.32.0\n#&gt;   sva_3.50.0                  tidyverse_2.0.0            \n#&gt;   UCell_2.6.2                 UpSetR_1.4.0               \n#&gt;   viridis_0.6.5               xlsx_0.6.5\n\n\n这些R包的选择和版本信息均经过仔细考量，旨在为用户提供稳定、高效且易于理解的书籍生成体验。请注意，由于R语言的生态系统持续发展，这些包的版本信息可能会有所更新。建议用户在实际使用中检查并更新到最新版本的R包，以获取最佳性能和最新的功能。",
    "crumbs": [
      "欢迎"
    ]
  },
  {
    "objectID": "index.html#安装包",
    "href": "index.html#安装包",
    "title": "生信初学者教程（癌症转录组学）",
    "section": "安装包",
    "text": "安装包\n\n\n\n\n\n\n安装包\n\n\n\n安装R包过程可能出现依赖包缺失的情况，需要耐心安装～\n\n\n\n通过CRAN安装的R包\n\ncran_packages &lt;- c(\"Boruta\", \"caret\", \"corrplot\",\n                   \"cowplot\", \"data.table\", \"dplyr\",\n                   \"ggplotify\", \"ggpubr\", \"glmnet\",\n                   \"gtsummary\", \"Hmisc\", \"mlbench\",\n                   \"pROC\", \"showtext\", \"RColorBrewer\",\n                   \"ROCR\", \"randomForest\", \"xlsx\",\n                   \"devtools\", \"remotes\", \"ggExtra\",\n                   \"e1071\", \"ggdist\", \"ggh4x\",\n                   \"ggpmisc\", \"ggvenn\", \"MLmetrics\",\n                   \"rstatix\", \"scCATCH\", \"Seurat\",\n                   \"UpSetR\", \"viridis\")\n\nfor (i in cran_packages) {\n  \n  p_in &lt;- installed.packages()\n  p_names &lt;- rownames(p_in)\n  \n  if (!i %in% p_names) {\n    install.packages(i, dependencies = T)\n  }\n}\n\n通过bioconductor安装的R包\n\nbio_packages &lt;- c(\"Biobase\", \"circlize\", \"clusterProfiler\", \n                  \"enrichplot\", \"GSVA\", \"limma\", \n                  \"org.Hs.eg.db\", \"snm\", \"sva\", \n                  \"tidyverse\", \"UCell\")\n\nfor (j in bio_packages) {\n  \n  p_in &lt;- installed.packages()\n  p_names &lt;- rownames(p_in)\n  \n  if (!j %in% p_names) {\n    BiocManager::install(j)\n  }\n}\n\n可能会用到的开发版R包\n\nremotes::install_github(\"tidymass/massdatabase\")\ndevtools::install_github(\"bryandmartin/corncob\")\ndevtools::install_github(\"HuaZou/MicrobiomeAnalysis\", \n                         dependencies = c(\"Depends\", \"Imports\", \"LinkingTo\"),\n                         repos = c(\"https://cloud.r-project.org/\",\n                                   BiocManager::repositories()))\ndevtools::install_github('erocoar/gghalves')\ndevtools::install_github(\"sajuukLyu/ggunchull\", type = \"source\")\ndevtools::install_github(\"junjunlab/GseaVis\")\nremotes::install_github(\"cardiomoon/multipleROC\")\ndevtools::install_github('dviraran/SingleR')\nremotes::install_github(\"omnideconv/immunedeconv\")\n\n可能会用到的需要手动下载的R包\n\ninstall.packages(\"ImmuCellAI_0.1.0.tar.gz\", repos = NULL, type = \"source\")",
    "crumbs": [
      "欢迎"
    ]
  },
  {
    "objectID": "index.html#版权",
    "href": "index.html#版权",
    "title": "生信初学者教程（癌症转录组学）",
    "section": "版权",
    "text": "版权\n首先，我衷心感谢您对本书的关注与支持。本书是我倾注心血与智慧的结晶，每一页都承载着我对知识的尊重与热爱。\n禁止任何形式的盗版行为。盗版不仅侵犯了我的合法权益，更是对作者创作成果的不尊重。我呼吁广大读者自觉抵制盗版，选择正规渠道购买正版书籍，共同维护一个健康、有序的版权环境。\n购买后的书籍属于您的个人财产，但您不得将其进行二次销售或用于商业用途。请在使用本书内容时，遵守相关的版权法律法规，不得擅自复制、传播、修改或用于其他未经授权的用途。\n知识产权是创新的重要基石，也是推动社会进步的重要力量。让我们携手共同尊重和保护知识产权，为构建一个更加美好的未来贡献力量。\n再次感谢您的关注与支持，祝您生活愉快！",
    "crumbs": [
      "欢迎"
    ]
  },
  {
    "objectID": "index.html#售价",
    "href": "index.html#售价",
    "title": "生信初学者教程（癌症转录组学）",
    "section": "售价",
    "text": "售价\n本教程整体售价998元。可通过微信交易。本产品一经售出，不接受任何形式的退款申请。请大家在购买前仔细考虑，确保您已充分了解教程的内容并认同交易规则。购买成功后，您将获得一个专属下载链接，链接中包含以下丰富的学习材料：\n\n教程说明：HTML/PDF格式的详细、系统的教程说明，旨在引导您逐步掌握相关知识，并帮助您解决在学习过程中可能遇到的问题。\n配套代码：与教程说明一一对应，确保您在学习理论知识的同时，能够通过实践加深对知识点的理解。代码质量高，注释清晰，易于理解和使用。\n配套数据：本教程所需要用到的所有数据，需注意数据所处的目录位置。\n\n关注微信公众号生信学习者或添加Lavender_George，在菜单栏找到购买教程链接，付费后即可获得所有材料的下载链接。\n最后温馨提示。请在购买前确认您的支付账户余额充足，以确保交易顺利完成。购买成功后，请务必妥善保管您的下载链接（有效期7天，在有效期内若链接有问题，请随时和我联系），以便随时访问和下载所需材料。",
    "crumbs": [
      "欢迎"
    ]
  },
  {
    "objectID": "index.html#答疑",
    "href": "index.html#答疑",
    "title": "生信初学者教程（癌症转录组学）",
    "section": "答疑",
    "text": "答疑\n感谢您对本书的关注与购买。在此，我需要明确说明关于本书购买后的答疑服务相关事宜。\n本次出售的教程仅包含书籍本身的内容，即书籍中的文字、图片等所呈现的知识与信息，不包括提供专门的答疑解惑服务。尽管我未提供专门的答疑解惑服务，但考虑到读者的学习需求，对于相对简单且不占据我过多时间的问题，我将酌情提供免费答疑。这类问题通常指那些不涉及复杂分析、计算或深入讨论的问题，且能够迅速得到解答。如有需要，您可以通过我的微信号（Lavender_George）提出您的问题。我会尽快查看并回复您的问题，但请注意，由于时间和精力的限制，我无法对所有问题都提供即时的详细解答。\n请读者朋友们在购买前仔细阅读以上说明，确保您已了解购买服务的具体内容。鼓励您通过自主学习和查阅相关资料等方式解决学习中遇到的问题。如有需要，您还可以考虑购买我提供的其他增值服务，以获得更专业的指导和帮助。\n\n\n\n\nSarkar, Deepayan. 2008. lattice: Multivariate Data Visualization with R. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. 2nd 本. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nXie, Yihui. 2015. Dynamic Documents with R and knitr. 2nd 本. Boca Raton, Florida: Chapman; Hall/CRC. https://yihui.org/knitr/.",
    "crumbs": [
      "欢迎"
    ]
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "前言",
    "section": "",
    "text": "为什么撰写本教程？\n关于生物信息学入门的难易程度，这是一个常被问及的问题。从我个人的经历和观察来看，生物信息学领域确实具有一定的挑战性。这一领域不仅融合了生物学、计算机科学、统计学等多个学科的知识，而且要求对这些知识有深入的理解和熟练的应用。然而，值得注意的是，尽管生物信息学整体上可能显得复杂，但只要能够专注于自己的特定领域，并具备扎实的基础数据分析能力，那么它也可以变得相对简单。通过系统地学习相关知识和技能，逐步积累实践经验，可以逐步掌握生物信息学的核心方法和技术，从而更好地应对各种挑战。因此，对于初学者而言，不必过分担心生物信息学的复杂性。只要保持耐心和恒心，专注于自己的领域，并不断提升自己的数据分析能力，就能够逐步掌握这一领域的知识和技能，实现自我提升和成长。",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "preface.html#sec-preface-why-r",
    "href": "preface.html#sec-preface-why-r",
    "title": "前言",
    "section": "",
    "text": "生物信息学是一门跨学科的科学领域，它结合了生物学、计算机科学、数学和统计学等多个学科的知识和技术，旨在理解生物学系统中的生物学现象和问题。生物信息学的主要任务包括收集、存储、管理、分析和解释生物学数据，以及开发和应用相关的计算工具和方法。这些数据可以包括基因组序列、蛋白质结构、基因表达数据、代谢组数据等。生物信息学在基础研究、生物医学研究、药物研发、农业和环境保护等领域都发挥着重要作用。",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "preface.html#sec-preface-population",
    "href": "preface.html#sec-preface-population",
    "title": "前言",
    "section": "该教程适合什么类型人群？",
    "text": "该教程适合什么类型人群？\n本教程是专为那些已经具备R语言和统计基础的初学者精心编写的，它以一个简单而完整的项目为框架，为学习者提供了一份深入浅出的生物信息学入门材料。教程内容广泛而全面，涵盖了生物信息学领域的众多核心知识点，旨在帮助初学者建立起扎实的理论基础和实践技能。然而，鉴于生物信息学领域的复杂性和跨学科性，本教程所涉及的知识领域较为广泛，初学者可能需要在学习的过程中展现出一定的自学能力。通过深入探索教程中提及的知识点，并主动查找相关资料，初学者可以更加全面地理解和掌握这些知识背后的原理和应用，从而不断提升自己的生物信息学技能。因此，鼓励学习者保持积极的学习态度，勇于探索和挑战，通过不断的学习和实践，逐步成为生物信息学领域的专业人士。",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "preface.html#sec-preface-learn",
    "href": "preface.html#sec-preface-learn",
    "title": "前言",
    "section": "该怎么学习该教程？",
    "text": "该怎么学习该教程？\n本教程以项目数据分析和文章撰写的视角出发，旨在详细解析数据分析的目的以及如何科学合理地解释所得结果。教程将按照逻辑顺序，逐步引导读者深入理解数据分析的各个环节，并阐述每一步结果背后的生物学意义。同时，为了帮助读者更好地理解统计方法的应用，教程还简要介绍了相关统计方法的基本原理。对于初学者而言，本教程提供了清晰的章节结构，可以按照章节顺序逐步学习。每一章节都围绕一个核心主题展开，确保读者能够系统地掌握相关知识。当然，如果读者对某个章节的内容已经有所了解，也可以自由选择跳过，直接进入下一个章节的学习。在学习过程中，如果遇到不理解的问题或难点，读者不必过于担忧。现代网络技术的发展为提供了丰富的资源，可以借助网络上的AI工具、在线论坛、教程视频等多种方式进行求助。这些资源能够帮助快速解决疑惑，确保学习过程的顺畅进行。",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "preface.html#sec-preface-result",
    "href": "preface.html#sec-preface-result",
    "title": "前言",
    "section": "学习完该教程会获得什么？",
    "text": "学习完该教程会获得什么？\n本教程深入解析了文章发表的完整流程，从项目的构思、数据的分析到结果的解读，再到最终文章的撰写，每一步都进行了详尽的阐述。它不仅为初学者提供了一次纯生物信息学文章创作过程的实践机会，还帮助他们初步掌握了这一领域的研究方法和技巧。通过学习本教程，读者能够全面了解文章发表的各个环节，并能够在未来的研究中灵活应用所学的知识和方法。此外，教程中使用的数据和代码也具有一定的通用性，读者可以将其应用于其他类似的项目中，进一步拓展自己的研究领域。",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  介绍",
    "section": "",
    "text": "1.1 参考文章\n在生物信息学的助力下，科研人员不断探索着癌症转录组学的奥秘，以期发现能够早期诊断、指导治疗和预测疾病进程的生物标志物。本教程参考已发表的文章(Yang 等 2023)的研究方法，该文章深入探讨了慢性阻塞性肺病（COPD）晚期的潜在诊断基因生物标志物，为科研人员提供了宝贵的经验和启示。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>介绍</span>"
    ]
  },
  {
    "objectID": "intro.html#sec-intro-workflow",
    "href": "intro.html#sec-intro-workflow",
    "title": "1  介绍",
    "section": "\n1.2 HCC项目流程",
    "text": "1.2 HCC项目流程\n\n\n\n\n\n\nPay Attention!!!\n\n\n\n该文章已发表了，请勿使用该初稿投递任何期刊，它仅作为学习的参考材料。\n\n\n\n\n\n\n\n图 1.1: HCC项目流程(Fig1)\n\n\n本书围绕癌症生信实战工作流分为以下几个部分：\n\n基础知识。\n数据准备。\n差异分析。\n功能分析。\n浸润分析。\n标记筛选。\n关联分析。\n单细胞分析。\n撰写文章。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>介绍</span>"
    ]
  },
  {
    "objectID": "intro.html#sec-intro-dataset",
    "href": "intro.html#sec-intro-dataset",
    "title": "1  介绍",
    "section": "\n1.3 数据地址",
    "text": "1.3 数据地址\n为了方便用户进行本教程中的生物信息学分析，已将所需的所有输入数据和预期的输出数据整理并上传至百度网盘。用户可以通过访问指定的百度网盘链接，下载所需的数据集，以便在本地环境中进行后续的分析和验证。请确保在下载和使用数据时，遵循相关的版权和引用规定。\n\n\n\n\n\n\nPay Attention!!!\n\n\n\n购买了该教程的用户，自动获得本教程所需要的所有数据。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>介绍</span>"
    ]
  },
  {
    "objectID": "intro.html#sec-intro-knowledge",
    "href": "intro.html#sec-intro-knowledge",
    "title": "1  介绍",
    "section": "\n1.4 基础知识",
    "text": "1.4 基础知识\n该部分旨在为初学者提供生物信息学分析所需的基本工具、语言、数学及数据库知识的概览。以下是各部分的简要介绍：\n\n软件工具\n\n本教程推荐使用R和RStudio作为主要的生物信息学分析工具。\n\nR语言基础\n\n在进行生物信息学分析之前，掌握R语言的基础知识是至关重要的。\n\n数学基础\n\n数学是生物信息学分析的核心。\n\n数据库基础\n\n生物信息学分析离不开数据的支持。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>介绍</span>"
    ]
  },
  {
    "objectID": "intro.html#sec-intro-data-preparation",
    "href": "intro.html#sec-intro-data-preparation",
    "title": "1  介绍",
    "section": "\n1.5 数据准备",
    "text": "1.5 数据准备\n该部分详细阐述了一系列数据处理流程，旨在确保数据质量，为后续的深入分析奠定坚实基础。以下是对各个步骤的详细书面化处理：\n\n数据收集\n数据预处理\n数据对象转换\n数据校正\n数据汇总",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>介绍</span>"
    ]
  },
  {
    "objectID": "intro.html#sec-intro-diff-analysis",
    "href": "intro.html#sec-intro-diff-analysis",
    "title": "1  介绍",
    "section": "\n1.6 差异分析",
    "text": "1.6 差异分析\n\n差异分析limma\n火山图\n热图",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>介绍</span>"
    ]
  },
  {
    "objectID": "intro.html#sec-intro-function-analysis",
    "href": "intro.html#sec-intro-function-analysis",
    "title": "1  介绍",
    "section": "\n1.7 功能分析",
    "text": "1.7 功能分析\n\nGO term富集分析\nKEGG pathway富集分析\nGSVA富集分析",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>介绍</span>"
    ]
  },
  {
    "objectID": "intro.html#sec-intro-infiltration-analysis",
    "href": "intro.html#sec-intro-infiltration-analysis",
    "title": "1  介绍",
    "section": "\n1.8 浸润分析",
    "text": "1.8 浸润分析\n\n免疫浸润分析\n免疫细胞数据分析",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>介绍</span>"
    ]
  },
  {
    "objectID": "intro.html#sec-intro-biomarker-selection",
    "href": "intro.html#sec-intro-biomarker-selection",
    "title": "1  介绍",
    "section": "\n1.9 标记筛选",
    "text": "1.9 标记筛选\n在该部分中，我们采用了三种不同的特征筛选与机器学习算法模式来识别关键的标记基因。\n\nLASSO+LR\nBoruta+RF\nREF+SVM\n交集特征\n验证特征",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>介绍</span>"
    ]
  },
  {
    "objectID": "intro.html#sec-intro-association-analysis",
    "href": "intro.html#sec-intro-association-analysis",
    "title": "1  介绍",
    "section": "\n1.10 关联分析",
    "text": "1.10 关联分析\n通过关联分析核心特征与免疫浸润细胞，我们可以进一步理解这些特征在肿瘤微环境中的功能和作用，以及它们如何影响免疫浸润细胞的数量和功能。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>介绍</span>"
    ]
  },
  {
    "objectID": "intro.html#sec-intro-scRNA-analysis",
    "href": "intro.html#sec-intro-scRNA-analysis",
    "title": "1  介绍",
    "section": "\n1.11 单细胞分析",
    "text": "1.11 单细胞分析\n在该部分中，我们对原始单细胞转录组数据进行了详尽的处理和分析。\n\n单细胞数据处理\n单细胞数据标准\n单细胞聚类分析\n单细胞细胞识别\n核心特征单细胞表达",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>介绍</span>"
    ]
  },
  {
    "objectID": "intro.html#sec-intro-paper",
    "href": "intro.html#sec-intro-paper",
    "title": "1  介绍",
    "section": "\n1.12 撰写文章",
    "text": "1.12 撰写文章\n\n\n\n\nYang, Yuwei, Yan Cao, Xiaobo Han, Xihui Ma, Rui Li, Rentao Wang, Li Xiao, 和 Lixin Xie. 2023. 《Revealing EXPH5 as a potential diagnostic gene biomarker of the late stage of COPD based on machine learning analysis》. Computers in Biology and Medicine 154: 106621.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>介绍</span>"
    ]
  },
  {
    "objectID": "knowledge-software.html",
    "href": "knowledge-software.html",
    "title": "2  软件",
    "section": "",
    "text": "2.1 R\nR语言是一种免费的统计计算和图形化编程语言，是一种用于数据分析和统计建模的强大工具。它具有丰富的统计分析函数库和数据处理功能，可以进行数据清洗、数据可视化、统计建模等多种操作。",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>软件</span>"
    ]
  },
  {
    "objectID": "knowledge-software.html#sec-software-Rstudio",
    "href": "knowledge-software.html#sec-software-Rstudio",
    "title": "2  软件",
    "section": "2.2 Rstudio",
    "text": "2.2 Rstudio\nRStudio是一个集成开发环境（IDE），专门用于编写和运行R语言代码。它提供了丰富的功能，包括代码编辑器、数据查看器、图形输出窗口、调试器等，使得R语言的使用更加方便和高效。",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>软件</span>"
    ]
  },
  {
    "objectID": "knowledge-software.html#sec-software-Linux",
    "href": "knowledge-software.html#sec-software-Linux",
    "title": "2  软件",
    "section": "2.3 Linux系统",
    "text": "2.3 Linux系统\nLinux是一个开源的类Unix操作系统，具有多用户、多任务、稳定、安全等特点。它由Linux内核及其他开源软件组成。Linux广泛应用于服务器、桌面和嵌入式系统中。",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>软件</span>"
    ]
  },
  {
    "objectID": "knowledge-software.html#sec-software-others",
    "href": "knowledge-software.html#sec-software-others",
    "title": "2  软件",
    "section": "2.4 其他软件",
    "text": "2.4 其他软件\n\n精修图片：Adobe Illustrator。",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>软件</span>"
    ]
  },
  {
    "objectID": "knowledge-R.html",
    "href": "knowledge-R.html",
    "title": "3  R语言基础",
    "section": "",
    "text": "3.1 数据类型\n数据类型是指数据的分类和属性，决定了数据在内存中的存储方式以及可以对数据执行的操作",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R语言基础</span>"
    ]
  },
  {
    "objectID": "knowledge-R.html#sec-R-type",
    "href": "knowledge-R.html#sec-R-type",
    "title": "3  R语言基础",
    "section": "",
    "text": "3.1.1 整型\n整数 (Integer)：整数类型的数据，可以用L后缀来标识。例如：42L。\n\nc(1L, 2L)\n\n[1] 1 2\n\n\n\n3.1.2 逻辑型\n用于表示布尔值，只有两个可能的取值：TRUE或FALSE。可以用于条件判断和逻辑运算。\n\nc(TRUE, FALSE)\n\n[1]  TRUE FALSE\n\n\n\n3.1.3 字符型\n用于表示文本数据，字符串用双引号或单引号括起来。例如：“Hello”，‘World’。\n\nc(\"A\", \"B\")\n\n[1] \"A\" \"B\"\n\n\n\n3.1.4 日期型\n\nc(as.Date(\"2022-01-01\"), as.Date(\"2022-01-02\"))\n\n[1] \"2022-01-01\" \"2022-01-02\"\n\n\n\n3.1.5 数值型\n双精度浮点数 (Double)：默认的数值类型，用于表示实数。例如：3.14，42.0。\n\nc(1, 1.2)\n\n[1] 1.0 1.2\n\n\n\n3.1.6 复杂数\n用于表示复数，形式为实部加上虚部，例如：2 + 3i。",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R语言基础</span>"
    ]
  },
  {
    "objectID": "knowledge-R.html#sec-R-data-structure",
    "href": "knowledge-R.html#sec-R-data-structure",
    "title": "3  R语言基础",
    "section": "\n3.2 数据结构",
    "text": "3.2 数据结构\n\n3.2.1 向量\nR中最基本的数据结构，可以包含相同类型的元素。向量可以是数值、字符、逻辑或复数。例如：c(1, 2, 3)，c(\"a\", \"b\", \"c\")。\n\n3.2.2 矩阵\n矩阵是二维的数组，只能包含相同类型的数据，通常用于线性代数计算。例如：matrix(1:6, nrow = 2, ncol = 3)。\n\n3.2.3 数组\n数组是多维的矩阵，可以包含相同类型的数据。例如：array(1:8, dim = c(2, 2, 2))。\n\n3.2.4 列表\n列表是一种通用的数据类型，可以包含不同类型的数据。列表中的元素可以是向量、矩阵、数据框，甚至是另一个列表。例如：list(1, \"a\", TRUE, c(1, 2, 3))。\n\n3.2.5 因子\n用于表示分类数据，存储的是整数向量以及对应的分类水平（labels）。因子常用于统计建模中。例如：factor(c(\"male\", \"female\", \"female\", \"male\"))。\n\n3.2.6 数据框\n数据框是二维的表格数据结构，每列可以包含不同类型的数据，类似于数据库表或Excel工作表。数据框是数据分析中常用的结构。例如：data.frame(Name = c(\"Alice\", \"Bob\"), Age = c(25, 30))。\n\n3.2.7 ts\nts 类型用于表示时间序列数据，是继承自数组类型的。给定数据、采样初始时间、采样频率的情况下，利用内置的函数 ts() 构造一个 ts 类型的分钟级的时间序列对象。\n\nx &lt;- ts(\n  data = rnorm(100),\n  start = c(2017, 1),\n  frequency = 365.25 * 24 * 60,\n  class = \"ts\", names = \"Time_Series\"\n)\n\nts() 函数的 start 和 frequency 参数很关键，前者指定了时间单位是天，后者指定每个时间单位下的数据点的数量。其中 365.25 是因为每隔 4 年有 366 天，平均下来，每年算 365.25 天。每隔 1 / (24 * 60) 天（即 1 分钟）采样一个点。如果初始时间不是从一年的第1分钟开始，而是从此时此刻 2023-01-31 10:43:30 CST 开始，则可以换算成今年的第 30 * 24 * 60 + 9 * 60 + 43 = 43783 分钟，则 Start = c(2023, 43783)。\n以数据集 x 为例，它是一个 ts 类型的时间序列数据对象。时间序列对象有很多方法，如函数 class() 、 mode() 和 str() 分别可以查看其数据类型、存储类型和数据结构。\n\n# 数据类型\nclass(x)\n\n[1] \"ts\"\n\n# 存储类型\nmode(x)\n\n[1] \"numeric\"\n\n# 数据结构\nstr(x)\n\n Time-Series [1:100] from 2017 to 2017: 1.0038 0.0415 -1.8712 -0.2486 -1.7356 ...\n\n\n函数 start() 和 end() 查看开始和结束的时间点。\n\nc(start(x), end(x))\n\n[1] 2017    1 2017  100\n\n\n函数 time() 可以查看在以上时间区间的划分。\n\ntime(x)\n\nTime Series:\nStart = c(2017, 1) \nEnd = c(2017, 100) \nFrequency = 525960 \n  [1] 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017\n [16] 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017\n [31] 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017\n [46] 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017\n [61] 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017\n [76] 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017\n [91] 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017\n\n\n函数 tsp() 可以查看其期初、期末和周期。\n\ntsp(x)\n\n[1]   2017   2017 525960",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R语言基础</span>"
    ]
  },
  {
    "objectID": "knowledge-R.html#sec-R-data-specific",
    "href": "knowledge-R.html#sec-R-data-specific",
    "title": "3  R语言基础",
    "section": "\n3.3 特殊值",
    "text": "3.3 特殊值\n\n3.3.1 缺失值 (NA)\n表示缺失数据，在数据处理中需要特别注意。例如：c(1, 2, NA, 4)。\n\n3.3.2 无穷大 (Inf)\n用于表示正无穷大和负无穷大。例如：1/0会返回Inf，-1/0会返回-Inf。\n\n3.3.3 非数字 (NaN)\n表示不是一个数字（Not a Number），通常在数值运算未定义时返回。例如：0/0会返回NaN。",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R语言基础</span>"
    ]
  },
  {
    "objectID": "knowledge-R.html#sec-R-data-install",
    "href": "knowledge-R.html#sec-R-data-install",
    "title": "3  R语言基础",
    "section": "\n3.4 安装R包",
    "text": "3.4 安装R包\n\n从特定CRAN镜像安装: 清华大学的镜像网站安装指定的扩展包：\n\noptions(repos=c(CRAN=\"https://mirror.tuna.tsinghua.edu.cn/CRAN/\"))\ninstall.packages(\"devtools\")\n\n从Github安装扩展包：扩展包没有在CRAN系统提供\n\nif (!requireNamespace(c(\"remotes\", \"devtools\"), quietly=TRUE)) {\n  install.packages(c(\"devtools\", \"remotes\"))\n}\n\ndevtools::install_github(\"HuaZou/MicrobiomeAnalysis\", \n                         dependencies = c(\"Depends\", \"Imports\", \"LinkingTo\"),\n                         repos = c(\"https://cloud.r-project.org/\",\n                                   BiocManager::repositories()))\n\n从BioConductor安装扩展包：扩展包没有在CRAN系统提供\n\noptions(repos=c(CRAN=\"https://mirror.tuna.tsinghua.edu.cn/CRAN/\"))\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {\n  install.packages(\"BiocManager\")\n}\noptions(BioC_mirror=\"https://mirrors.tuna.tsinghua.edu.cn/bioconductor\")\nBiocManager::install(c(\"Biostrings\"))",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R语言基础</span>"
    ]
  },
  {
    "objectID": "knowledge-mathematics.html",
    "href": "knowledge-mathematics.html",
    "title": "4  数学基础",
    "section": "",
    "text": "4.1 描述性统计\n描述统计是统计学的一个分支，它涉及有意义和简洁地总结、组织和呈现数据。它侧重于描述数据集的主要特征，而不会对其进行任何概括或推断。\n描述性统计的主要目标是提供清晰而简洁的数据摘要，使研究人员或分析人员能够深入了解数据集中的模式、趋势和分布。这种总结通常包括集中趋势(例如，平均值、中位数、众数)、离散度(例如，范围、方差、标准差)和分布形状(例如，偏度、峰度)等度量。",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数学基础</span>"
    ]
  },
  {
    "objectID": "knowledge-mathematics.html#sec-math-descriptive",
    "href": "knowledge-mathematics.html#sec-math-descriptive",
    "title": "4  数学基础",
    "section": "",
    "text": "图 4.1: 可变性统计变量在数据中的展示",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数学基础</span>"
    ]
  },
  {
    "objectID": "knowledge-mathematics.html#sec-math-inference",
    "href": "knowledge-mathematics.html#sec-math-inference",
    "title": "4  数学基础",
    "section": "4.2 推断性统计",
    "text": "4.2 推断性统计\n推断统计是统计学的一个分支，旨在通过对样本数据的分析，推断出关于总体的一般性结论。与描述统计不同，描述统计主要集中于对已有数据的总结和描述（如计算平均值、中位数、标准差等），而推断统计则试图通过样本数据来推测和预测总体的特性。\n\n4.2.1 假设检验\n在推断统计中，假设检验是一个重要的工具，用于判断一个关于总体参数的假设是否成立。以下是关于假设检验的详细解释，包括其一般步骤和显著性p值的含义\n\n假设检验的定义：\n\n假设检验是关于总体参数的一个陈述。在一个假设检验问题中，通常有两个互补的假设，称为原假设（H0）和备择假设（H1）。原假设是要检验的假设，备择假设则是与原假设相反的假设。假设检验的目的是基于样本数据来决定是否拒绝原假设。\n\n\n4.2.2 检验分布\n假设检验的几大分布是指Z检验分布、T检验分布以及卡方检验分布和F分布，它们在统计学中各自有其特定的应用场景和使用方法。\n\n\n4.2.3 线性回归\n线性回归是一种统计学上分析的方法，用于确定两种或两种以上变量间相互依赖的定量关系。它通常用于预测一个或多个自变量（特征值）的变化如何影响因变量（目标值）。线性回归模型假设因变量（Y）是一个或多个自变量（X）的线性组合，并加上一个误差项。",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数学基础</span>"
    ]
  },
  {
    "objectID": "knowledge-mathematics.html#sec-math-machine",
    "href": "knowledge-mathematics.html#sec-math-machine",
    "title": "4  数学基础",
    "section": "4.3 机器学习",
    "text": "4.3 机器学习\n机器学习是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。它专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。机器学习是人工智能的核心，是使计算机具有智能的根本途径。",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>数学基础</span>"
    ]
  },
  {
    "objectID": "knowledge-database.html",
    "href": "knowledge-database.html",
    "title": "5  数据库",
    "section": "",
    "text": "5.1 Gene Expression Omnibus\nGene Expression Omnibus（GEO）数据库是一个公共基因表达数据存储库，由美国国家生物技术信息中心（NCBI）维护。",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>数据库</span>"
    ]
  },
  {
    "objectID": "knowledge-database.html#sec-database-ICGC",
    "href": "knowledge-database.html#sec-database-ICGC",
    "title": "5  数据库",
    "section": "5.2 ICGC Data Portal",
    "text": "5.2 ICGC Data Portal\nICGC（International Cancer Genome Consortium）Data Portal 是一个旨在为癌症基因组学研究提供数据和资源的在线平台。",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>数据库</span>"
    ]
  },
  {
    "objectID": "knowledge-database.html#sec-database-GDC",
    "href": "knowledge-database.html#sec-database-GDC",
    "title": "5  数据库",
    "section": "5.3 Genomic Data Commons Data Porta",
    "text": "5.3 Genomic Data Commons Data Porta\nGenomic Data Commons（GDC）Data Portal 是由美国国家癌症研究所（NCI）维护的一个数据平台，旨在为癌症基因组学研究提供数据和工具。",
    "crumbs": [
      "基础知识",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>数据库</span>"
    ]
  },
  {
    "objectID": "wrangling-collection.html",
    "href": "wrangling-collection.html",
    "title": "6  数据收集",
    "section": "",
    "text": "6.1 数据分布\n四个HCC转录组数据集分别是LICA-FR，LIRI-JP，LIHC-US/TCGA-LIHC和GSE14520，一个HCC单细胞数据集是GSE149614。",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>数据收集</span>"
    ]
  },
  {
    "objectID": "wrangling-collection.html#sec-collection-GeneExpression",
    "href": "wrangling-collection.html#sec-collection-GeneExpression",
    "title": "6  数据收集",
    "section": "6.2 表达谱数据",
    "text": "6.2 表达谱数据\n针对上述HCC数据集进行表达谱的下载，分别获得了它们的不同类型的表达谱数据：\n\nLICA-FR: France (Tumor TNM stage)\nLIRI-JP: Japan (Tumor TNM stage)\nLIHC-US/TCGA-LIHC: TCGA (Tumor TNM stage)\nGSE14520: GEO (Tumor TNM stage)\nGSE149614: GEO (Tumor TNM stage)",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>数据收集</span>"
    ]
  },
  {
    "objectID": "wrangling-collection.html#sec-collection-downstream",
    "href": "wrangling-collection.html#sec-collection-downstream",
    "title": "6  数据收集",
    "section": "6.3 最终数据分布",
    "text": "6.3 最终数据分布\n在仔细过滤和整理收集到的表型数据后，\n\nLICA-FR (drop) : France (TPM normalization)\nLIRI-JP: Japan (TPM normalization)\nLIHC-US/TCGA-LIHC: TCGA (TPM normalization)\nGSE14520: GEO (The chip data were standardized based on a robust multichip average method)",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>数据收集</span>"
    ]
  },
  {
    "objectID": "wrangling-collection.html#sec-collection-GSE14520",
    "href": "wrangling-collection.html#sec-collection-GSE14520",
    "title": "6  数据收集",
    "section": "6.4 自动下载GSE14520",
    "text": "6.4 自动下载GSE14520\n为了简化数据获取流程并避免重复下载相似的数据，开发了一个R脚本，用于自动从Gene Expression Omnibus (GEO) 下载数据集。\n# 加载R包\nlibrary(GEOquery)\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(optparse)\nlibrary(convert)\nlibrary(idmap1)\n\n# 设置参数\nGEO_name &lt;- \"GSE14520\"\nGPL_number &lt;- \"GPL571\"\nGPL_number2 &lt;- \"GPL3921\"\nArray_type &lt;- \"array\"\ndir &lt;- \"./\"\n\n# clinical and expression profile\ngset &lt;- getGEO(GEO = GEO_name,\n               destdir = dir,\n               AnnotGPL = F,\n               getGPL = F)\nphen &lt;- pData(gset[[1]])\nprof &lt;- exprs(gset[[1]])\n\n# output\noutdir &lt;- paste0(dir, \"/\", GEO_name, \"_process/\")\nif (!dir.exists(outdir)) {\n  dir.create(outdir)\n}\n\nphen_origin &lt;- paste0(outdir, GEO_name, \"_clinical_origin.csv\")\nphen_process &lt;- paste0(outdir, GEO_name, \"_clinical_post.csv\")\nwrite.csv(phen, file = phen_origin, row.names = F)\nwrite.csv(phen_post, file = phen_process, row.names = F)\n\nprof_origin &lt;- paste0(outdir, GEO_name, \"_profile_origin.tsv\")\nprof_process &lt;- paste0(outdir, GEO_name, \"_profile_post.tsv\")\nwrite.table(data.frame(prof) %&gt;% rownames_to_column(\"GeneID\"),\n            file = prof_origin, row.names = F, quote = F, sep = \"\\t\")\nwrite.table(prof_post %&gt;% rownames_to_column(\"GeneID\"),\n            file = prof_process, row.names = F, quote = F, sep = \"\\t\")\n\nprobe2gene_name &lt;- paste0(outdir, GPL_number, \"_probe2gene_table.tsv\")\nwrite.table(probe2gene, file = probe2gene_name,\n            row.names = F, quote = F, sep = \"\\t\")\n\nExprSet_name &lt;- paste0(outdir, GEO_name, \"_GeneExprSet.RDS\")\nsaveRDS(ExprSet_object, file = ExprSet_name)\n\nmessage(\"Congrats, Program Ended without problems\")\n上述代码由以下几部分组成：\n\n加载R包；\n设置GSE和GPL编号，其中GPL是GSE对应的平台号，通常适用于芯片探针数据；\n进行基因ID转换和表型数据筛选；\n将数据转换为ExpressionSet数据对象，该类型数据包含表型数据和表达谱数据，便于后续的下游分析。\n\n最后获得了以下数据：\nGSE14520/\n├── GPL3921.soft.gz\n├── GPL571.soft.gz\n├── GSE14520-GPL3921_series_matrix.txt.gz\n├── GSE14520-GPL571_series_matrix.txt.gz\n├── GSE14520_Extra_Supplement.txt\n├── GSE14520_process\n│   ├── GPL571_probe2gene_table.tsv\n│   ├── GSE14520_GeneExprSet.RDS\n│   ├── GSE14520_clinical_origin.csv\n│   ├── GSE14520_clinical_post.csv\n│   ├── GSE14520_profile_origin.tsv\n│   └── GSE14520_profile_post.tsv\n├── download.R\n└── work.sh",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>数据收集</span>"
    ]
  },
  {
    "objectID": "wrangling-collection.html#sec-collection-GSE149614",
    "href": "wrangling-collection.html#sec-collection-GSE149614",
    "title": "6  数据收集",
    "section": "6.5 下载GSE149614",
    "text": "6.5 下载GSE149614\nGSE149614数据集是单细胞数据集\nGSE149614_scRNA/\n├── 41467_2022_32283_MOESM1_ESM.pdf\n├── 41467_2022_32283_MOESM3_ESM.zip\n├── A single-cell atlas of the multicellular ecosystem of primary and metastatic hepatocellular carcinoma.pdf\n├── GSE149614_HCC.metadata.updated.txt\n├── GSE149614_HCC.scRNAseq.S71915.count.txt\n├── GSE149614_HCC.scRNAseq.S71915.count.txt.gz\n├── GSE149614_HCC.scRNAseq.S71915.normalized.txt.gz\n└── SupplementaryData\n    ├── Supplementary Data 1.xlsx\n    ├── Supplementary Data 10.xlsx\n    ├── Supplementary Data 11.xlsx\n    ├── Supplementary Data 2.xlsx\n    ├── Supplementary Data 3.xlsx\n    ├── Supplementary Data 4.xlsx\n    ├── Supplementary Data 5.xlsx\n    ├── Supplementary Data 6.xlsx\n    ├── Supplementary Data 7.xlsx\n    ├── Supplementary Data 8.xlsx\n    └── Supplementary Data 9.xlsx",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>数据收集</span>"
    ]
  },
  {
    "objectID": "wrangling-collection.html#sec-collection-others",
    "href": "wrangling-collection.html#sec-collection-others",
    "title": "6  数据收集",
    "section": "6.6 下载其它数据",
    "text": "6.6 下载其它数据\n最后获得了以下数据：\nLIRI-JP/\n├── donor.LIRI-JP.tsv\n├── exp_seq.LIRI-JP.tsv\n├── sample.LIRI-JP.tsv\n└── specimen.LIRI-JP.tsv\n\nTCGA_LIHC/\n├── TCGA-LIHC.htseq_counts.tsv\n├── TCGA-LIHC.htseq_fpkm.tsv\n└── TCGA-LIHC_clinical_origin.csv",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>数据收集</span>"
    ]
  },
  {
    "objectID": "wrangling-processing.html",
    "href": "wrangling-processing.html",
    "title": "7  数据预处理",
    "section": "",
    "text": "7.1 LIRI-JP\n下载到的数据有如下：",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>数据预处理</span>"
    ]
  },
  {
    "objectID": "wrangling-processing.html#sec-processing-LIRIJP",
    "href": "wrangling-processing.html#sec-processing-LIRIJP",
    "title": "7  数据预处理",
    "section": "",
    "text": "病人的数据（临床数据）：donor.LIRI-JP.tsv.gz\n表达数据（测序数据）：exp_seq.LIRI-JP.tsv.gz\n样品信息：sample.LIRI-JP.tsv.gz\n突变数据：simple_somatic_mutation.open.LIRI-JP.tsv.gz\n实验处理数据：specimen.LIRI-JP.tsv.gz\n结构变异数据：structural_somatic_mutation.LIRI-JP.tsv.gz\n\n\n7.1.1 LIRI-JP临床表型\n本节将生成临床患者临床数据以及样本对应的表型数据。\n\n7.1.1.1 加载R包\n使用rm(list = ls())清空环境内变量\n\nlibrary(tidyverse)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#1F78B4\", \"#EE2B2B\")\n\n\n7.1.1.2 导入数据\n\nLIRIJP_metadata &lt;- read.csv(\"./data/LIRI-JP/donor.LIRI-JP.tsv\", sep = \"\\t\")\nLIRIJP_sample &lt;- read.csv(\"./data/LIRI-JP/sample.LIRI-JP.tsv\", sep = \"\\t\")\nLIRIJP_specimen &lt;- read.csv(\"./data/LIRI-JP/specimen.LIRI-JP.tsv\", sep = \"\\t\")\n\n\n7.1.1.3 清洗临床数据\n清洗临床数据\nLIRIJP_clin_columns &lt;- c(\"icgc_donor_id\", \"project_code\", \"submitted_donor_id\", \n             \"donor_sex\", \"donor_vital_status\", \"donor_age_at_diagnosis\",\n             \"donor_tumour_stage_at_diagnosis\", \"donor_survival_time\")\n\nLIRIJP_clinic_data &lt;- LIRIJP_metadata\n\nhead(LIRIJP_clinic_data)\n\n7.1.1.4 清洗实验处理数据\nLIRIJP_spe_columns &lt;- c(\"icgc_specimen_id\", \"project_code\", \"submitted_specimen_id\", \n             \"icgc_donor_id\", \"submitted_donor_id\", \"specimen_type\")\n\nLIRIJP_specimen_data &lt;- LIRIJP_specimen \n\nhead(LIRIJP_specimen_data)\n\n7.1.1.5 清洗样品信息数据\n\n数据清洗: 样品信息\n\nLIRIJP_sam_columns &lt;- c(\"icgc_sample_id\", \"project_code\", \"submitted_sample_id\", \n             \"icgc_specimen_id\", \"submitted_specimen_id\", \"icgc_donor_id\",\n             \"submitted_donor_id\")\n\nLIRIJP_sample_data &lt;- LIRIJP_sample\n\nhead(LIRIJP_sample_data)\n\n7.1.1.6 输出结果\n输出结果: 将上述结果以csv格式输出到结果目录\nif (!dir.exists(\"./data/result/metadata/\")) {\n  dir.create(\"./data/result/metadata/\", recursive = TRUE)\n}\n\nwrite.csv(LIRIJP_clinic_data, \"./data/result/metadata/LIRI-JP-clinical.csv\", row.names = F)\nwrite.csv(LIRIJP_sample_data, \"./data/result/metadata/LIRI-JP-sample.csv\", row.names = F)\nwrite.csv(LIRIJP_specimen_data, \"./data/result/metadata/LIRI-JP-specimen.csv\", row.names = F)\n\n7.1.2 LIRI-JP转录组\n基因表达数据需要进行基因ID转换以及冗余基因的过滤，最后生成符合要求的输出结果。\n\n7.1.2.1 加载R包\n\nlibrary(tidyverse)\nlibrary(data.table)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\n\n7.1.2.2 导入数据\nLIRIJP_genexp &lt;- fread(\"./data/LIRI-JP/exp_seq.LIRI-JP.tsv\")\nLIRIJP_geneID &lt;- fread(\"./data/GeneIDMap/human_gene_all.tsv\")\n\nhead(LIRIJP_geneID)\n\n7.1.2.3 数据清洗\n数据清洗\nLIRIJP_gene_data &lt;- LIRIJP_genexp %&gt;%\n  dplyr::select(icgc_specimen_id, gene_id,\n                normalized_read_count, raw_read_count) %&gt;%\n  dplyr::mutate(gene_id = gsub(\"\\\\.\\\\d+\", \"\", gene_id))\n\nhead(LIRIJP_relative_df_final[, 1:6])\n\n7.1.2.4 过滤基因\n\nget_trimGene_LIRIJP &lt;- function(input, occurrence = 0.1) {\n  \n  input_df &lt;- data.frame(input)\n  \n  return(prof_res_v2)\n}\n\nLIRIJP_counts_df_trim &lt;- get_trimGene_LIRIJP(input = LIRIJP_counts_df_final)\nLIRIJP_relative_df_trim &lt;- get_trimGene_LIRIJP(input = LIRIJP_relative_df_final)\n\ndim(LIRIJP_counts_df_trim)\n\n7.1.2.5 输出结果\n输出结果: 将上述结果以tsv格式输出到结果目录\nif (!dir.exists(\"./data/result/profile/\")) {\n  dir.create(\"./data/result/profile/\", recursive = TRUE)\n}\n\nwrite.table(LIRIJP_counts_df_trim, \"./data/result/profile/LIRI-JP_gene_counts.tsv\", \n            sep = \"\\t\", quote = F, row.names = T)\nwrite.table(LIRIJP_relative_df_trim, \"./data/result/profile/LIRI-JP_gene_relative.tsv\", \n            sep = \"\\t\", quote = F, row.names = T)",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>数据预处理</span>"
    ]
  },
  {
    "objectID": "wrangling-processing.html#sec-processing-TCGALIHC",
    "href": "wrangling-processing.html#sec-processing-TCGALIHC",
    "title": "7  数据预处理",
    "section": "\n7.2 TCGA-LIHC",
    "text": "7.2 TCGA-LIHC\noptions(warn = -1)\nlibrary(TCGAbiolinks)\nlibrary(dplyr)\nlibrary(SummarizedExperiment)\nlibrary(optparse)\noptions(warn = 0)\n\n\noption_list &lt;- list(\n  make_option(c(\"-t\", \"--tumor\"), type=\"character\", default=\"TCGA-KIRC\", \n              help=\"tumor type from TCGA\", metavar=\"character\"),\n  make_option(c(\"-o\", \"--out\"), type=\"character\",  \n              help=\"output directory\", metavar=\"character\")\n); \nopt_parser &lt;- OptionParser(option_list = option_list)\nopt &lt;- parse_args(opt_parser)\n\ncurrent_dir &lt;- getwd()\n\n# input parameters\ntumor_type &lt;- opt$tumor\ndata_type &lt;- opt$out\n\n\n# clinical information output\nif(!dir.exists(paste0(current_dir, \"/Clinical/\"))){\n  dir.create(paste0(current_dir, \"/Clinical/\"))\n}\norigin_clinical_name &lt;- paste0(current_dir, \"/Clinical/\", tumor_type, \"_clinical_origin.csv\")\nif(!file.exists(origin_clinical_name)){\n  clinical &lt;- GDCquery_clinic(project = tumor_type, type = \"clinical\")\n  write.csv(clinical, origin_clinical_name, row.names = F)\n}\nmessage(\"Clinical information has been successfully downloaded\")\n\n\n####################################################  \n#   omics-data layer: SummarizedExperiment Object  #\n#################################################### \nOmicsData &lt;- get_OmicsData(project = tumor_type, Outdir = data_type)\nif(!dir.exists(paste0(current_dir, \"/Omics/\"))){\n  dir.create(paste0(current_dir, \"/Omics/\"))\n}\nOmicsData_filename &lt;- paste0(current_dir, \"/Omics/\", tumor_type, \"_\", data_type, \".RDS\")                         \nsaveRDS(OmicsData, file = OmicsData_filename)\nmessage(\"Omics data also has been successfully downloaded\")\n最终获得了临床表型和表达谱数据：\n\n病人的数据（临床数据）：TCGA-LIHC_clinical_origin.csv\n\n表达数据（测序数据）：TCGA-LIHC.htseq_counts.tsv/TCGA-LIHC.htseq_fpkm.tsv\n\n\n7.2.1 TCGA-LIHC临床表型\n本节将生成临床患者临床数据以及样本对应的表型数据。\n\n7.2.1.1 加载R包\n使用rm(list = ls())清空环境内变量\n\nlibrary(tidyverse)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#1F78B4\", \"#EE2B2B\")\n\n\n7.2.1.2 导入数据\nTCGALIHC_metadata &lt;- read.csv(\"./data/TCGA_LIHC/TCGA-LIHC_clinical_origin.csv\")\n\n7.2.1.3 数据清洗\n重命名列名\n\nTCGALIHC_clin_columns &lt;- c(\"submitter_id\", \"race\", \n             \"gender\", \"vital_status\", \"age_at_index\",\n             \"ajcc_pathologic_stage\", \"days_to_last_follow_up\",\n\nhead(TCGALIHC_clinic_data)\n\n7.2.1.4 输出结果\n将上述结果以csv格式输出到结果目录\nif (!dir.exists(\"./data/result/metadata/\")) {\n  dir.create(\"./data/result/metadata/\", recursive = TRUE)\n}\n\nwrite.csv(TCGALIHC_clinic_data, \"./data/result/metadata/TCGA-LIHC-clinical.csv\", row.names = F)\n\n7.2.2 TCGA-LIHC转录组\n基因表达数据需要转换基因ID以及过滤冗余基因\n\n7.2.2.1 加载R包\n\nlibrary(tidyverse)\nlibrary(data.table)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\n\n7.2.2.2 导入数据\n\nTCGALIHC_genexp &lt;- fread(\"./data/TCGA_LIHC/TCGA-LIHC.htseq_counts.tsv\")\nTCGALIHC_genexp_fpkm &lt;- fread(\"./data/TCGA_LIHC/TCGA-LIHC.htseq_fpkm.tsv\")\nTCGALIHC_geneID &lt;- fread(\"./data/GeneIDMap/human_gene_all.tsv\")\n\n7.2.2.3 数据清洗\ncolnames(TCGALIHC_genexp) &lt;- gsub(\"-\", \"_\", colnames(TCGALIHC_genexp))\ncolnames(TCGALIHC_genexp) &lt;- gsub(\"_01A\", \"\", colnames(TCGALIHC_genexp))\nTCGALIHC_gene_data &lt;- TCGALIHC_genexp %&gt;%\n  dplyr::select(-all_of(grep(\"11A\", colnames(TCGALIHC_genexp), value = T))) %&gt;%\n  dplyr::rename(gene_id = Ensembl_ID) %&gt;%\n  dplyr::mutate(gene_id = gsub(\"\\\\.\\\\d+\", \"\", gene_id))\n\nTCGALIHC_fpkm_df_final &lt;- TCGALIHC_gene_fpkm_data %&gt;%\n  dplyr::left_join(TCGALIHC_geneID %&gt;%\n                      dplyr::select(ensembl_gene_id, external_gene_name) %&gt;%\n                      dplyr::distinct(),\n                    by = c(\"gene_id\" = \"ensembl_gene_id\")) %&gt;%\n  dplyr::select(-gene_id) %&gt;%\n  dplyr::rename(GeneName = external_gene_name) %&gt;%  \n  dplyr::select(GeneName, everything()) %&gt;%\n  dplyr::filter(!is.na(GeneName)) %&gt;%\n  dplyr::distinct()\nhead(TCGALIHC_fpkm_df_final[, 1:6])\n\n7.2.2.4 过滤基因\nTCGALIHC_counts_df_trim &lt;- get_trimGene_TCGALIHC(input = TCGALIHC_counts_df_final)\nTCGALIHC_fpkm_df_trim &lt;- get_trimGene_TCGALIHC(input = TCGALIHC_fpkm_df_final)\n\ndim(TCGALIHC_fpkm_df_trim)\n\n7.2.2.5 表达值转换成count abundance\n#| warning: false\n#| message: false\n\nTCGALIHC_counts_df_trim_final &lt;- apply(TCGALIHC_counts_df_trim, 2, function(x) {\n  return(2^x - 1)\n})\n\nhead(TCGALIHC_counts_df_trim_final[, 1:5])\n\n7.2.2.6 输出结\n输出结果: 将上述结果以tsv格式输出到结果目录\nif (!dir.exists(\"./data/result/profile/\")) {\n  dir.create(\"./data/result/profile/\", recursive = TRUE)\n}\n\nwrite.table(TCGALIHC_counts_df_trim, \"./data/result/profile/TCGA-LIHC_gene_counts.tsv\", \n            sep = \"\\t\", quote = F, row.names = T)\nwrite.table(TCGALIHC_counts_df_trim_final, \"./data/result/profile/TCGA-LIHC_gene_Truecounts.tsv\", \n            sep = \"\\t\", quote = F, row.names = T)\nwrite.table(TCGALIHC_fpkm_df_trim, \"./data/result/profile/TCGA-LIHC_gene_fpkm.tsv\", \n            sep = \"\\t\", quote = F, row.names = T)",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>数据预处理</span>"
    ]
  },
  {
    "objectID": "wrangling-processing.html#sec-processing-GSE14520",
    "href": "wrangling-processing.html#sec-processing-GSE14520",
    "title": "7  数据预处理",
    "section": "\n7.3 GSE14520",
    "text": "7.3 GSE14520\n最终获得了临床表型和表达谱数据：\n\n病人的数据（临床数据）：GSE14520_clinical_post.csv/GSE14520_Extra_Supplement.txt\n\n表达数据（测序数据）：GSE14520_profile_post.tsv\n\n\n7.3.1 GSE14520临床表型\n本节将生成临床患者临床数据以及样本对应的表型数据。\n\n7.3.1.1 加载R包\n加载R包：使用rm(list = ls())清空环境内变量\n\nlibrary(tidyverse)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#1F78B4\", \"#EE2B2B\")\n\n\n7.3.1.2 导入数据\nGSE14520_metadata &lt;- read.csv(\"./data/GSE14520/GSE14520_process/GSE14520_clinical_post.csv\")\nGSE14520_sup_info &lt;- read.table(\"./data/GSE14520/GSE14520_Extra_Supplement.txt\", sep = \"\\t\", header = T)\n\n7.3.1.3 数据清洗\n数据清洗\nGSE14520_clin_columns &lt;- c(\"Barcode\", \"Disease.state\", \"Individual\", \n      \"Tissue\", \"Gender\", \"Age\", \"TNM.staging\", \n      \"Survival.status\",\"Survival.months\")\n\nhead(GSE14520_clinic_data)\n\n7.3.1.4 输出结果\n\n输出结果: 将上述结果以csv格式输出到结果目录\n\nif (!dir.exists(\"./data/result/metadata/\")) {\n  dir.create(\"./data/result/metadata/\", recursive = TRUE)\n}\n\nwrite.csv(GSE14520_clinic_data, \"./data/result/metadata/GSE14520-clinical.csv\", row.names = F)\n\n7.3.2 GSE14520转录组\n基因表达数据需要转换基因ID以及过滤冗余基因\n\n7.3.2.1 加载R包\n加载R包\n\nlibrary(tidyverse)\nlibrary(data.table)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\n\n7.3.2.2 导入数据\nGSE14520_genexp &lt;- fread(\"./data/GSE14520/GSE14520_process/GSE14520_profile_post.tsv\")\n\n7.3.2.3 数据清洗\n数据清洗\nGSE14520_counts_df_final &lt;- GSE14520_genexp %&gt;%\n  dplyr::rename(GeneName = GeneID) %&gt;%  \n  dplyr::select(GeneName, everything()) %&gt;%\n  dplyr::filter(!is.na(GeneName)) %&gt;%\n  dplyr::distinct()\n\nhead(GSE14520_counts_df_final[, 1:6])\n\n7.3.2.4 过滤基因\nGSE14520_counts_df_trim &lt;- get_trimGene_GSE14520(input = GSE14520_counts_df_final)\n\ndim(GSE14520_counts_df_trim)\n\n7.3.2.5 输出结果\n输出结果: 将上述结果以tsv格式输出到结果目录\n\nif (!dir.exists(\"./data/result/profile/\")) {\n  dir.create(\"./data/result/profile/\", recursive = TRUE)\n}\n\nwrite.table(GSE14520_counts_df_trim, \"./data/result/profile/GSE14520_gene_counts.tsv\", \n            sep = \"\\t\", quote = F, row.names = T)",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>数据预处理</span>"
    ]
  },
  {
    "objectID": "wrangling-processing.html#sec-processing-summary",
    "href": "wrangling-processing.html#sec-processing-summary",
    "title": "7  数据预处理",
    "section": "\n7.4 总结",
    "text": "7.4 总结\n针对LIRI-JP，LIHC-US/TCGA-LIHC和GSE14520这三个数据集的临床表型和表达谱数据，进行了详尽的数据预处理工作。经过清洗、整合和筛选，成功去除了冗余信息、修正了潜在错误，并确保了数据的完整性和准确性。最终，得到了符合后续分析要求的高质量输入文件。\n为了更高效地利用这些数据，决定将它们存储为常见的ExpressionSet数据对象（见 章节 8）。ExpressionSet是生物信息学分析中常用的数据结构，它能够同时容纳表达谱数据和与之相关的临床表型信息。通过将数据转换为ExpressionSet格式，可以方便地访问和操作数据，为后续的统计分析、可视化以及模型构建等步骤提供便利。这一步骤的完成，为后续的数据分析奠定了坚实的基础。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] data.table_1.15.4 lubridate_1.9.3   forcats_1.0.0     stringr_1.5.1    \n [5] dplyr_1.1.4       purrr_1.0.2       readr_2.1.5       tidyr_1.3.1      \n [9] tibble_3.2.1      ggplot2_3.5.1     tidyverse_2.0.0  \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.5        jsonlite_1.8.8      compiler_4.3.3     \n [4] BiocManager_1.30.23 renv_1.0.0          tidyselect_1.2.1   \n [7] scales_1.3.0        yaml_2.3.8          fastmap_1.1.1      \n[10] R6_2.5.1            generics_0.1.3      knitr_1.46         \n[13] htmlwidgets_1.6.4   munsell_0.5.1       tzdb_0.4.0         \n[16] pillar_1.9.0        rlang_1.1.3         utf8_1.2.4         \n[19] stringi_1.8.4       xfun_0.43           timechange_0.3.0   \n[22] cli_3.6.2           withr_3.0.0         magrittr_2.0.3     \n[25] digest_0.6.35       grid_4.3.3          rstudioapi_0.16.0  \n[28] hms_1.1.3           lifecycle_1.0.4     vctrs_0.6.5        \n[31] evaluate_0.23       glue_1.7.0          fansi_1.0.6        \n[34] colorspace_2.1-0    rmarkdown_2.26      tools_4.3.3        \n[37] pkgconfig_2.0.3     htmltools_0.5.8.1",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>数据预处理</span>"
    ]
  },
  {
    "objectID": "wrangling-objects.html",
    "href": "wrangling-objects.html",
    "title": "8  数据对象",
    "section": "",
    "text": "8.1 LIRI-JP\n要生成LIRI-JP的ExpressionSet对象，首先需要加载必要的R包，然后导入数据和元数据，最后将这些数据组合成一个ExpressionSet对象。",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>数据对象</span>"
    ]
  },
  {
    "objectID": "wrangling-objects.html#sec-expressionset-LIRIJP",
    "href": "wrangling-objects.html#sec-expressionset-LIRIJP",
    "title": "8  数据对象",
    "section": "",
    "text": "8.1.1 加载R包\n加载R包：使用rm(list = ls())清空环境内变量\n\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(Biobase)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#1F78B4\", \"#EE2B2B\")\n\n\n8.1.2 导入数据\n输入数据来自于 章节 7\nLIRIJP_count_data &lt;- fread(\"./data/result/profile/LIRI-JP_gene_counts.tsv\")\nLIRIJP_relative_data &lt;- fread(\"./data/result/profile/LIRI-JP_gene_relative.tsv\") \nLIRIJP_phenotype &lt;- read.csv(\"./data/result/metadata/LIRI-JP-specimen.csv\")\n\n8.1.3 生成ExpressionSet\n生成ExpressionSet-class数据对象：过滤掉低出现率的基因，默认出现率阈值是20%\nget_ExprSet_LIRIJP &lt;- function(\n    profile,\n    metadata,\n    occurrence = 0.2) {\n  \n  profile_new &lt;- profile %&gt;%\n    tibble::column_to_rownames(\"V1\")\n  metadata_new &lt;- metadata %&gt;%\n    dplyr::filter(Tumour_Stage != \"\") %&gt;%\n    dplyr::mutate(Group = case_when(\n      Tumour_Stage %in% c(\"T1\", \"T2\") ~ \"Early Stage\", \n      Tumour_Stage %in% c(\"T3\", \"T4\") ~ \"Late Stage\"))\n  \n  # metadata Description\n  sid &lt;- dplyr::intersect(colnames(profile_new), metadata_new$SpecimenID)\n  phen &lt;- metadata_new[pmatch(sid, metadata_new$SpecimenID), , ]\n  phen &lt;- phen[pmatch(unique(phen$PatientID), phen$PatientID), , ]\n  prof &lt;- profile_new %&gt;%\n    dplyr::select(dplyr::all_of(phen$SpecimenID))\n  \n  if (all(colnames(prof) == phen$SpecimenID)) {\n    colnames(prof) &lt;- phen$PatientID\n  }\n  \n  # filter features according gene symbol\n  prof_cln &lt;- prof %&gt;%\n    tibble::rownames_to_column(\"Gene\") %&gt;%\n    data.frame()\n  idx &lt;- grep(\"Gene\", colnames(prof_cln))\n  prof_cln$median &lt;- apply(prof_cln[, -idx], 1, median)\n  prof_cln &lt;- with(prof_cln, prof_cln[order(Gene, median, decreasing = T), ])\n  prf_deduplicated &lt;- prof_cln[!duplicated(prof_cln$Gene), ] %&gt;%\n    dplyr::select(-median)\n  \n  # return result: gene symbol\n  rownames(prf_deduplicated) &lt;- NULL\n  prof_res &lt;- prf_deduplicated %&gt;%\n    dplyr::select(Gene, everything()) %&gt;%\n    tibble::column_to_rownames(\"Gene\")\n  \n  # determine the right order between profile and phenotype\n  for (i in 1:ncol(prof_trim)) {\n    if (!(colnames(prof_trim)[i] == rownames(phen)[i])) {\n      stop(paste0(i, \" Wrong\"))\n    }\n  }\n  \n  expressionSet &lt;- new(\"ExpressionSet\", \n                       exprs = exprs,\n                       phenoData = adf,\n                       experimentData = experimentData)\n  \n  return(expressionSet)\n}\n\nLIRIJP_ExprSet_count &lt;- get_ExprSet_LIRIJP(\n  profile = LIRIJP_count_data,\n  metadata = LIRIJP_phenotype,\n  occurrence = 0.2)\n\nLIRIJP_ExprSet_rela &lt;- get_ExprSet_LIRIJP(\n  profile = LIRIJP_relative_data,\n  metadata = LIRIJP_phenotype,\n  occurrence = 0.2)\nLIRIJP_ExprSet_rela\n\n8.1.4 输出结果\n输出结果: 将上述结果以RDS格式输出到结果目录\nif (!dir.exists(\"./data/result/ExpSetObject/\")) {\n  dir.create(\"./data/result/ExpSetObject/\", recursive = TRUE)\n}\n\nsaveRDS(LIRIJP_ExprSet_count, \"./data/result/ExpSetObject/LIRI-JP_ExpSet_counts.RDS\", compress = TRUE)\nsaveRDS(LIRIJP_ExprSet_rela, \"./data/result/ExpSetObject/LIRI-JP_ExpSet_relative.RDS\", compress = TRUE)",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>数据对象</span>"
    ]
  },
  {
    "objectID": "wrangling-objects.html#sec-expressionset-TCGALIHC",
    "href": "wrangling-objects.html#sec-expressionset-TCGALIHC",
    "title": "8  数据对象",
    "section": "\n8.2 TCGA-LIHC",
    "text": "8.2 TCGA-LIHC\n要生成TCGA-LIHC的ExpressionSet对象，首先需要加载必要的R包，然后导入数据和元数据，最后将这些数据组合成一个ExpressionSet对象。\n\n8.2.1 加载R包\n加载R包：使用rm(list = ls())清空环境内变量\n\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(Biobase)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#1F78B4\", \"#EE2B2B\")\n\n\n8.2.2 导入数据\n\nTCGALIHC_count_data &lt;- fread(\"./data/result/profile/TCGA-LIHC_gene_counts.tsv\")\nTCGALIHC_TrueCount_data &lt;- fread(\"./data/result/profile/TCGA-LIHC_gene_Truecounts.tsv\")\nTCGALIHC_fpkm_data &lt;- fread(\"./data/result/profile/TCGA-LIHC_gene_fpkm.tsv\") \nTCGALIHC_phenotype &lt;- read.csv(\"./data/result/metadata/TCGA-LIHC-clinical.csv\")\n\n8.2.3 生成ExpressionSet\n生成ExpressionSet-class数据对象：过滤掉低出现率的基因，默认出现率阈值是20%\n\nget_ExprSet_TCGALIHC &lt;- function(\n    profile,\n    metadata,\n    occurrence = 0.2) {\n  \n  profile_new &lt;- profile %&gt;%\n    tibble::column_to_rownames(\"V1\")\n  metadata_new &lt;- metadata %&gt;%\n    dplyr::filter(Tumour_Stage != \"\") %&gt;%\n    dplyr::mutate(Group = case_when(\n      Tumour_Stage %in% c(\"T1\", \"T2\") ~ \"Early Stage\", \n      Tumour_Stage %in% c(\"T3\", \"T4\") ~ \"Late Stage\")) %&gt;%\n    dplyr::mutate(Time = ifelse(is.na(death_Time), follow_up_Time, death_Time))\n  \n  # metadata Description\n  sid &lt;- dplyr::intersect(colnames(profile_new), metadata_new$PatientID)\n  phen &lt;- metadata_new[pmatch(sid, metadata_new$PatientID), , ]\n  prof &lt;- profile_new %&gt;%\n    dplyr::select(dplyr::all_of(phen$PatientID))\n  \n  # filter features according gene symbol\n  prof_cln &lt;- prof %&gt;%\n    tibble::rownames_to_column(\"Gene\") %&gt;%\n    data.frame()\n  idx &lt;- grep(\"Gene\", colnames(prof_cln))\n  prof_cln$median &lt;- apply(prof_cln[, -idx], 1, median)\n  prof_cln &lt;- with(prof_cln, prof_cln[order(Gene, median, decreasing = T), ])\n  prf_deduplicated &lt;- prof_cln[!duplicated(prof_cln$Gene), ] %&gt;%\n    dplyr::select(-median)\n  \n  # return result: gene symbol\n  rownames(prf_deduplicated) &lt;- NULL\n  prof_res &lt;- prf_deduplicated %&gt;%\n    dplyr::select(Gene, everything()) %&gt;%\n    tibble::column_to_rownames(\"Gene\")\n  \n  # determine the right order between profile and phenotype\n  for (i in 1:ncol(prof_trim)) {\n    if (!(colnames(prof_trim)[i] == rownames(phen)[i])) {\n      stop(paste0(i, \" Wrong\"))\n    }\n  }\n\n  expressionSet &lt;- new(\"ExpressionSet\", \n                       exprs = exprs,\n                       phenoData = adf,\n                       experimentData = experimentData)\n  \n  return(expressionSet)\n}\n\nTCGALIHC_ExprSet_count &lt;- get_ExprSet_TCGALIHC(\n  profile = TCGALIHC_count_data,\n  metadata = TCGALIHC_phenotype,\n  occurrence = 0.2)\n# TCGALIHC_ExprSet_count\n\nTCGALIHC_ExprSet_TrueCount &lt;- get_ExprSet_TCGALIHC(\n  profile = TCGALIHC_TrueCount_data,\n  metadata = TCGALIHC_phenotype,\n  occurrence = 0.2)\n# TCGALIHC_ExprSet_TrueCount\n\nTCGALIHC_ExprSet_fpkm &lt;- get_ExprSet_TCGALIHC(\n  profile = TCGALIHC_fpkm_data,\n  metadata = TCGALIHC_phenotype,\n  occurrence = 0.2)\nTCGALIHC_ExprSet_fpkm\n\n8.2.4 输出结果\n输出结果: 将上述结果以RDS格式输出到结果目录\n\nif (!dir.exists(\"./data/result/ExpSetObject/\")) {\n  dir.create(\"./data/result/ExpSetObject/\", recursive = TRUE)\n}\n\nsaveRDS(TCGALIHC_ExprSet_count, \"./data/result/ExpSetObject/TCGA-LIHC_ExpSet_counts.RDS\", compress = TRUE)\nsaveRDS(TCGALIHC_ExprSet_TrueCount, \"./data/result/ExpSetObject/TCGA-LIHC_ExpSet_TrueCount.RDS\", compress = TRUE)\nsaveRDS(TCGALIHC_ExprSet_fpkm, \"./data/result/ExpSetObject/TCGA-LIHC_ExpSet_fpkm.RDS\", compress = TRUE)",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>数据对象</span>"
    ]
  },
  {
    "objectID": "wrangling-objects.html#sec-expressionset-GSE14520",
    "href": "wrangling-objects.html#sec-expressionset-GSE14520",
    "title": "8  数据对象",
    "section": "\n8.3 GSE14520",
    "text": "8.3 GSE14520\n要生成GSE14520的ExpressionSet对象，首先需要加载必要的R包，然后导入数据和元数据，最后将这些数据组合成一个ExpressionSet对象。\n\n8.3.1 加载R包\n加载R包：使用rm(list = ls())清空环境内变量\n\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(Biobase)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#1F78B4\", \"#EE2B2B\")\n\n\n8.3.2 导入数据\n导入数据\n\nGSE14520_count_data &lt;- fread(\"./data/result/profile/GSE14520_gene_counts.tsv\")\nGSE14520_phenotype &lt;- read.csv(\"./data/result/metadata/GSE14520-clinical.csv\")\n\n8.3.3 生成ExpressionSet\n生成ExpressionSet-class数据对象：过滤掉低出现率的基因，默认出现率阈值是20%\n\nget_ExprSet_GSE14520 &lt;- function(\n    profile,\n    metadata,\n    occurrence = 0.2) {\n  \n  profile_new &lt;- profile %&gt;%\n    tibble::column_to_rownames(\"V1\")\n  metadata_new &lt;- metadata %&gt;%\n    dplyr::filter(Tumour_Stage != \"\") %&gt;%\n    dplyr::mutate(Group = case_when(\n      Tumour_Stage %in% c(\"T1\", \"T2\") ~ \"Early Stage\", \n      Tumour_Stage %in% c(\"T3\", \"T4\") ~ \"Late Stage\")) \n  \n  # metadata Description\n  sid &lt;- dplyr::intersect(colnames(profile_new), metadata_new$SampleID)\n  phen &lt;- metadata_new[pmatch(sid, metadata_new$SampleID), , ]\n  prof &lt;- profile_new %&gt;%\n    dplyr::select(dplyr::all_of(phen$SampleID))\n  \n  \n  # return result: gene symbol\n  rownames(prf_deduplicated) &lt;- NULL\n  prof_res &lt;- prf_deduplicated %&gt;%\n    dplyr::select(Gene, everything()) %&gt;%\n    tibble::column_to_rownames(\"Gene\")\n  \n  # determine the right order between profile and phenotype\n  for (i in 1:ncol(prof_trim)) {\n    if (!(colnames(prof_trim)[i] == rownames(phen)[i])) {\n      stop(paste0(i, \" Wrong\"))\n    }\n  }\n  \n  expressionSet &lt;- new(\"ExpressionSet\", \n                       exprs = exprs,\n                       phenoData = adf,\n                       experimentData = experimentData)\n  \n  return(expressionSet)\n}\n\nGSE14520_ExprSet_count &lt;- get_ExprSet_GSE14520(\n  profile = GSE14520_count_data,\n  metadata = GSE14520_phenotype,\n  occurrence = 0.2)\nGSE14520_ExprSet_count\n\n8.3.4 输出结果\n输出结果: 将上述结果以RDS格式输出到结果目录\n\nif (!dir.exists(\"./data/result/ExpSetObject/\")) {\n  dir.create(\"./data/result/ExpSetObject/\", recursive = TRUE)\n}\n\nsaveRDS(GSE14520_ExprSet_count, \"./data/result/ExpSetObject/GSE14520_ExpSet_counts.RDS\", compress = TRUE)",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>数据对象</span>"
    ]
  },
  {
    "objectID": "wrangling-objects.html#sec-expressionset-overlapgene",
    "href": "wrangling-objects.html#sec-expressionset-overlapgene",
    "title": "8  数据对象",
    "section": "\n8.4 重叠基因",
    "text": "8.4 重叠基因\n为了确保在发现数据集中识别的标记基因能够在验证数据集中进行准确的验证，首先加载了基于count abundance的RDS，这些RDS分别包含LIRI-JP，LIHC-US/TCGA-LIHC和GSE14520数据集的基因表达信息。\n步骤：\n\n加载RDS文件：首先，将分别加载LIRI-JP，LIHC-US/TCGA-LIHC和GSE14520的count abundance的RDS文件。\n提取基因标识符：从每个数据集中提取基因标识符列表。\n获取基因交集：比较这三个基因标识符列表，找出它们之间的交集。这个交集将包含所有在三个数据集中都存在的基因。\n更新数据集：使用交集中的基因标识符来过滤和更新每个数据集，以确保后续分析中的基因一致性。\n\n\n8.4.1 加载R包\n加载R包\n\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(Biobase)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#1F78B4\", \"#EE2B2B\")\n\n\n8.4.2 导入数据\n导入数据\nExprSet_LIRI_JP &lt;- readRDS(\"./data/result/ExpSetObject/LIRI-JP_ExpSet_counts.RDS\")\nExprSet_TCGA_LIHC &lt;- readRDS(\"./data/result/ExpSetObject/TCGA-LIHC_ExpSet_TrueCount.RDS\")\nExprSet_GSE14520 &lt;- readRDS(\"./data/result/ExpSetObject/GSE14520_ExpSet_counts.RDS\")\n\n8.4.3 共有基因\n共有基因\n\nlength(overlap_genes)\n\n8.4.4 生成数据对象\n生成数据对象\n\nget_ExprSet &lt;- function(\n    dat,\n    gene_list = overlap_genes,\n    occurrence = 0.2) {\n  \n  profile &lt;- exprs(dat) %&gt;%\n    as.data.frame() %&gt;%\n    t() %&gt;%\n    as.data.frame() %&gt;%\n    dplyr::select(all_of(overlap_genes)) %&gt;%\n    t() %&gt;%\n    as.data.frame()\n  metadata &lt;- pData(dat) %&gt;%\n    as.data.frame()\n  \n  # metadata Description\n  sid &lt;- dplyr::intersect(colnames(profile), rownames(metadata))\n  phen &lt;- metadata[pmatch(sid, rownames(metadata)), , ]\n  prof &lt;- profile %&gt;%\n    dplyr::select(dplyr::all_of(rownames(phen)))\n  \n  # filter features according gene symbol\n  prof_cln &lt;- prof %&gt;%\n    tibble::rownames_to_column(\"Gene\") %&gt;%\n    data.frame()\n  idx &lt;- grep(\"Gene\", colnames(prof_cln))\n  prof_cln$median &lt;- apply(prof_cln[, -idx], 1, median)\n  prof_cln &lt;- with(prof_cln, prof_cln[order(Gene, median, decreasing = T), ])\n  prf_deduplicated &lt;- prof_cln[!duplicated(prof_cln$Gene), ] %&gt;%\n    dplyr::select(-median)\n\n  \n  # determine the right order between profile and phenotype\n  for (i in 1:ncol(prof_trim)) {\n    if (!(colnames(prof_trim)[i] == rownames(phen)[i])) {\n      stop(paste0(i, \" Wrong\"))\n    }\n  }\n  expressionSet &lt;- new(\"ExpressionSet\", \n                       exprs = exprs,\n                       phenoData = adf,\n                       experimentData = experimentData)\n  \n  return(expressionSet)\n}\n\n\nExprSet_LIRI_JP_new &lt;- get_ExprSet(\n  dat = ExprSet_LIRI_JP,\n  gene_list = overlap_genes,\n  occurrence = 0.2)\nExprSet_LIRI_JP_new\n\nExprSet_TCGA_LIHC_new &lt;- get_ExprSet(\n  dat = ExprSet_TCGA_LIHC,\n  gene_list = overlap_genes,\n  occurrence = 0.2)\nExprSet_TCGA_LIHC_new\n\nExprSet_GSE14520_new &lt;- get_ExprSet(\n  dat = ExprSet_GSE14520,\n  gene_list = overlap_genes,\n  occurrence = 0.2)\nExprSet_GSE14520_new\n\n8.4.5 输出结果\n输出结果: 将上述结果以RDS格式输出到结果目录\n\nif (!dir.exists(\"./data/result/ExpSetObject/\")) {\n  dir.create(\"./data/result/ExpSetObject/\", recursive = TRUE)\n}\n\nsaveRDS(ExprSet_LIRI_JP_new, \"./data/result/ExpSetObject/Final_ExpSet_LIRI_JP_TrueCounts.RDS\", compress = TRUE)\nsaveRDS(ExprSet_TCGA_LIHC_new, \"./data/result/ExpSetObject/Final_ExpSet_TCGA_LIHC_TrueCounts.RDS\", compress = TRUE)\nsaveRDS(ExprSet_GSE14520_new, \"./data/result/ExpSetObject/Final_ExpSet_GSE14520_TrueCounts.RDS\", compress = TRUE)",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>数据对象</span>"
    ]
  },
  {
    "objectID": "wrangling-objects.html#sec-expressionset-summary",
    "href": "wrangling-objects.html#sec-expressionset-summary",
    "title": "8  数据对象",
    "section": "\n8.5 总结",
    "text": "8.5 总结\n在完成了对三个肝细胞癌（HCC）群体的转录组和临床数据的预处理后，分别将这些数据转换为了ExpressionSet数据对象，并保存为RDS文件格式，以便于后续的数据管理和分析。为了确保后续分析的一致性和可靠性，进一步从这些RDS文件中提取了三个数据集中共有的基因。这些共有的基因是后续分析的基础，因为它们代表了三个群体中均存在并可能参与HCC发展的生物学过程。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] Biobase_2.62.0      BiocGenerics_0.48.1 data.table_1.15.4  \n [4] lubridate_1.9.3     forcats_1.0.0       stringr_1.5.1      \n [7] dplyr_1.1.4         purrr_1.0.2         readr_2.1.5        \n[10] tidyr_1.3.1         tibble_3.2.1        ggplot2_3.5.1      \n[13] tidyverse_2.0.0    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.5        jsonlite_1.8.8      compiler_4.3.3     \n [4] BiocManager_1.30.23 renv_1.0.0          tidyselect_1.2.1   \n [7] scales_1.3.0        yaml_2.3.8          fastmap_1.1.1      \n[10] R6_2.5.1            generics_0.1.3      knitr_1.46         \n[13] htmlwidgets_1.6.4   munsell_0.5.1       tzdb_0.4.0         \n[16] pillar_1.9.0        rlang_1.1.3         utf8_1.2.4         \n[19] stringi_1.8.4       xfun_0.43           timechange_0.3.0   \n[22] cli_3.6.2           withr_3.0.0         magrittr_2.0.3     \n[25] digest_0.6.35       grid_4.3.3          rstudioapi_0.16.0  \n[28] hms_1.1.3           lifecycle_1.0.4     vctrs_0.6.5        \n[31] evaluate_0.23       glue_1.7.0          fansi_1.0.6        \n[34] colorspace_2.1-0    rmarkdown_2.26      tools_4.3.3        \n[37] pkgconfig_2.0.3     htmltools_0.5.8.1  \n\n\n\n\n\n\nHuber, Wolfgang, Vincent J Carey, Robert Gentleman, Simon Anders, Marc Carlson, Benilton S Carvalho, Hector Corrada Bravo, 等. 2015. 《Orchestrating high-throughput genomic analysis with Bioconductor》. Nature methods 12 (2): 115–21.",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>数据对象</span>"
    ]
  },
  {
    "objectID": "wrangling-batchEffect.html",
    "href": "wrangling-batchEffect.html",
    "title": "9  数据校正",
    "section": "",
    "text": "9.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(Biobase)\nlibrary(sva)\nlibrary(limma)\nlibrary(MicrobiomeAnalysis)\nlibrary(SummarizedExperiment)\nlibrary(snm)\nlibrary(ggpubr)\nlibrary(cowplot)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数据校正</span>"
    ]
  },
  {
    "objectID": "wrangling-batchEffect.html#sec-batcheffect-importdata",
    "href": "wrangling-batchEffect.html#sec-batcheffect-importdata",
    "title": "9  数据校正",
    "section": "\n9.2 导入数据",
    "text": "9.2 导入数据\n输入数据来自于 章节 8\n\nExprSet_LIRI_JP &lt;- readRDS(\"./data/result/ExpSetObject/Final_ExpSet_LIRI_JP_TrueCounts.RDS\")\nExprSet_TCGA_LIHC &lt;- readRDS(\"./data/result/ExpSetObject/Final_ExpSet_TCGA_LIHC_TrueCounts.RDS\")",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数据校正</span>"
    ]
  },
  {
    "objectID": "wrangling-batchEffect.html#sec-batcheffect-preparedata",
    "href": "wrangling-batchEffect.html#sec-batcheffect-preparedata",
    "title": "9  数据校正",
    "section": "\n9.3 准备数据",
    "text": "9.3 准备数据\n\n准备三种校正批次效应的方法所需的输入数据。\n\nmetadata &lt;- rbind(LIRI_JP_meta, TCGA_LIHC_meta)\nprofile &lt;- LIRI_JP_eprs %&gt;%\n  tibble::rownames_to_column(\"GeneID\") %&gt;%\n  dplyr::inner_join(TCGA_LIHC_eprs %&gt;%\n                      tibble::rownames_to_column(\"GeneID\"),\n                    by = \"GeneID\") %&gt;%\n  tibble::column_to_rownames(\"GeneID\")\n\nhead(as.matrix(profile[, 1:5]))\n\n准备批次校正的因素及其矩阵\n\ndat_raw &lt;- profile\ndat_meta &lt;- metadata %&gt;%\n  dplyr::select(ProjectID, Group)",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数据校正</span>"
    ]
  },
  {
    "objectID": "wrangling-batchEffect.html#sec-batcheffect-ComBat",
    "href": "wrangling-batchEffect.html#sec-batcheffect-ComBat",
    "title": "9  数据校正",
    "section": "\n9.4 ComBat",
    "text": "9.4 ComBat\nsva::ComBat(Leek 和 Storey 2007)是一种常用的批次校正算法，用于调整高通量数据中的批次效应。\nhead(ComBat_data[, 1:5])",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数据校正</span>"
    ]
  },
  {
    "objectID": "wrangling-batchEffect.html#sec-batcheffect-removeBatchEffect",
    "href": "wrangling-batchEffect.html#sec-batcheffect-removeBatchEffect",
    "title": "9  数据校正",
    "section": "\n9.5 removeBatchEffect",
    "text": "9.5 removeBatchEffect\nlimma::removeBatchEffect(Ritchie 等 2015)是另一种常用的批次校正算法，它的原理基于线性模型和对批次效应的建模。\n\nhead(RME_data[, 1:5])",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数据校正</span>"
    ]
  },
  {
    "objectID": "wrangling-batchEffect.html#sec-batcheffect-VoomSNM",
    "href": "wrangling-batchEffect.html#sec-batcheffect-VoomSNM",
    "title": "9  数据校正",
    "section": "\n9.6 Voom SNM",
    "text": "9.6 Voom SNM\n集合limma::voom (Ritchie 等 2015) & snm::snm (Mecham, Nelson, 和 Storey 2010)\n\nget_VoomSNM &lt;- function(\n    qcMetadata,\n    qcProfile,\n    batchVar,\n    groupVar){\n\n  # qcMetadata = dat_meta\n  # qcProfile = dat_raw \n  # batchVar = \"ProjectID\"\n  # groupVar = \"Group\"\n  \n  colnames(qcMetadata)[which(colnames(qcMetadata) == batchVar)] &lt;- \"Batch\"\n  colnames(qcMetadata)[which(colnames(qcMetadata) == groupVar)] &lt;- \"Group\"\n  \n  # Set up counts matrix\n  counts &lt;- qcProfile # DGEList object from a table of counts (rows=features, columns=samples)\n  \n  snmData &lt;- snmDataObjOnly$norm.dat\n  \n  return(snmData)\n}\n\nVoomSNM_data &lt;- get_VoomSNM(\n  qcMetadata = dat_meta,\n  qcProfile = dat_raw,\n  batchVar = \"ProjectID\",\n  groupVar = \"Group\")\n    \nhead(VoomSNM_data[, 1:5])",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数据校正</span>"
    ]
  },
  {
    "objectID": "wrangling-batchEffect.html#sec-batcheffect-PCA",
    "href": "wrangling-batchEffect.html#sec-batcheffect-PCA",
    "title": "9  数据校正",
    "section": "\n9.7 批次效应校正结果比较",
    "text": "9.7 批次效应校正结果比较\nMicrobiomeAnalysis(Zou 2022)\n\nget_plot &lt;- function(\n  datMeta,\n  datProf,\n  group = \"Group\",\n  group_names = grp_names,\n  group_colors = grp_colors,\n  method = \"PCA\",\n  shape_var = \"ProjectID\",\n  shape_values = grp_shapes) {\n  \n  datProf &lt;- as.data.frame(datProf)\n  \n  sid &lt;- intersect(rownames(datMeta), colnames(datProf))\n  phen &lt;- datMeta[rownames(datMeta) %in% sid, , ]\n  counts &lt;- datProf %&gt;%\n    dplyr::select(all_of(rownames(phen))) %&gt;%\n    as.matrix()\n  \n  if (!all(rownames(phen) == colnames(counts))) {\n    stop(\"wrong order of samples\")\n  }\n  \n  se &lt;- SummarizedExperiment(\n    assays = SimpleList(counts = counts),\n    colData = phen\n  )\n   \n   return(pl)\n} \n\n合并数据集的原始数据PCA结果\n\n\n# 计算消耗时间太久，设置该代码避免重复运算\nif (file.exists(\"./data/result/Figure/Data_RawData_pl.RDS\")) {\n  RawData_pl &lt;- readRDS(\"./data/result/Figure/Data_RawData_pl.RDS\")\n} else {\n  RawData_pl &lt;- get_plot(\n    datMeta = metadata,\n    datProf = profile,\n    group = \"Group\",\n    method = \"PCA\",\n    shape_var = \"ProjectID\")\n  \n  saveRDS(RawData_pl, \"./data/result/Figure/Data_RawData_pl.RDS\", compress = TRUE)  \n}\n\nRawData_pl\n\n合并数据集的sva::ComBat数据PCA结果\n\n\n# 计算消耗时间太久，设置该代码避免重复运算\nif (file.exists(\"./data/result/Figure/Data_ComBat_pl.RDS\")) {\n  ComBat_pl &lt;- readRDS(\"./data/result/Figure/Data_ComBat_pl.RDS\")\n} else {\n  ComBat_pl &lt;- get_plot(\n    datMeta = metadata,\n    datProf = ComBat_data,\n    group = \"Group\",\n    method = \"PCA\",\n    shape_var = \"ProjectID\")\n  \n  saveRDS(ComBat_pl, \"./data/result/Figure/Data_ComBat_pl.RDS\", compress = TRUE)\n}\n\nComBat_pl\n\n合并数据集的limma::removeBatchEffect数据PCA结果\n\n\n\n# 计算消耗时间太久，设置该代码避免重复运算\nif (file.exists(\"./data/result/Figure/Data_RME_pl.RDS\")) {\n  RME_pl &lt;- readRDS(\"./data/result/Figure/Data_RME_pl.RDS\")\n} else {\n  RME_pl &lt;- get_plot(\n    datMeta = metadata,\n    datProf = RME_data,\n    group = \"Group\",\n    method = \"PCA\",\n    shape_var = \"ProjectID\")\n  \n  saveRDS(RME_pl, \"./data/result/Figure/Data_RME_pl.RDS\", compress = TRUE)\n}\n\nRME_pl\n\n合并数据集的Voom+SNM数据PCA结果\n\n\n# 计算消耗时间太久，设置该代码避免重复运算\nif (file.exists(\"./data/result/Figure/Data_VoomSNM_pl.RDS\")) {\n  VoomSNM_pl &lt;- readRDS(\"./data/result/Figure/Data_VoomSNM_pl.RDS\")\n} else {\nVoomSNM_pl &lt;- get_plot(\n  datMeta = metadata,\n  datProf = VoomSNM_data,\n  group = \"Group\",\n  method = \"PCA\",\n  shape_var = \"ProjectID\")\n  \n  saveRDS(VoomSNM_pl, \"./data/result/Figure/Data_VoomSNM_pl.RDS\", compress = TRUE)\n}\n\nVoomSNM_pl\n\n合并所有的图\n\n为了便于观察不同批次校正方法的结果，需要将上述生成的图形进行合并。\n\nadjusted_pl &lt;- cowplot::plot_grid(\n  RawData_pl, ComBat_pl, RME_pl, VoomSNM_pl,\n  ncol = 2, align = \"hv\",\n  labels = LETTERS[1:4])\n\nRawData_pl\nComBat_pl\nRME_pl\nVoomSNM_pl\n结果：\n\n根据观察，经过Voom+SNM方法校正后的基因表达谱数据分布并不倾向于按项目聚类，相较于其他两种方法，效果更佳。",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数据校正</span>"
    ]
  },
  {
    "objectID": "wrangling-batchEffect.html#sec-batcheffect-result",
    "href": "wrangling-batchEffect.html#sec-batcheffect-result",
    "title": "9  数据校正",
    "section": "\n9.8 校正后的结果",
    "text": "9.8 校正后的结果\n对上述三种方法校正后表达谱数据存成ExpressionSet，以便后续分析。另外，采用生态学常用评估整体变异和组间关系的PERMANOVA(Anderson 2014)检验方法评价校正前后的结果。\n\nget_ExprSet &lt;- function(\n    x,\n    y,\n    occurrence = 0.5) {\n\n  # metadata Description\n  sid &lt;- dplyr::intersect(colnames(x), y$SampleID)\n  phen &lt;- y[pmatch(sid, y$SampleID), , ]\n  prof &lt;- x %&gt;%\n    as.data.frame() %&gt;%\n    dplyr::select(dplyr::all_of(phen$SampleID))\n\n  # determine the right order between profile and phenotype\n  for (i in 1:ncol(prof)) {\n    if (!(colnames(prof)[i] == rownames(phen)[i])) {\n      stop(paste0(i, \" Wrong\"))\n    }\n  }\n\n  expressionSet &lt;- new(\"ExpressionSet\", \n                       exprs = exprs,\n                       phenoData = adf,\n                       experimentData = experimentData)\n  \n  return(expressionSet)\n}\n\nRawData：\\(R^2\\)结果\n\n\nif (!dir.exists(\"./data/result/BatchEffect/\")) {\n  dir.create(\"./data/result/BatchEffect/\", recursive = TRUE)\n}\n\nif (file.exists(\"./data/result/BatchEffect/Raw_PERMANOVA.RDS\")) {\n  Raw_PERMANOVA &lt;- readRDS(\"./data/result/BatchEffect/Raw_PERMANOVA.RDS\")\n} else {\n  saveRDS(Raw_PERMANOVA, \"./data/result/BatchEffect/Raw_PERMANOVA.RDS\", compress = TRUE)\n}\n\nRaw_PERMANOVA\n结果：基于PERMANOVA分析结果，Pr(&gt;F) &lt; 0.05 表明Group和ProjectID均与整体转录组结构存在显著差异。同时，ProjectID解释了整体转录组结构变异的 69.3%，这表明批次效应在整体转录组结构中占据了相当大的比例。因此，在后续关于Group的差异研究中，必须进行批次校正，以确保研究结果的准确性和可靠性。\n\nsva::ComBat: 校正后的R2结果\n\n#| warning: false\n#| message: false\n\nComBat_ExprSet &lt;- get_ExprSet(\n  x = ComBat_data,\n  y = metadata,\n  occurrence = 0.5)\n\n\nif (file.exists(\"./data/result/BatchEffect/ComBat_PERMANOVA.RDS\")) {\n  ComBat_PERMANOVA &lt;- readRDS(\"./data/result/BatchEffect/ComBat_PERMANOVA.RDS\")\n} else {\n  saveRDS(ComBat_PERMANOVA, \"./data/result/BatchEffect/ComBat_PERMANOVA.RDS\", compress = TRUE)\n}\n\nComBat_PERMANOVA\n结果：sva::ComBat方法均降低了Group和ProjectID的解释的变异比例。ProjectID的整体转录组结构变异从 69.3%降低至22.8%，而Group则从1.6%降低至1.3%，这表明该方法同时对批次效应和生物学效应产生了影响。\n\nlimma::removeBatchEffect\n\n#| warning: false\n#| message: false\n\nRME_ExprSet &lt;- get_ExprSet(\n  x = RME_data,\n  y = metadata,\n  occurrence = 0.5)\n\n\nif (file.exists(\"./data/result/BatchEffect/RME_PERMANOVA.RDS\")) {\n  RME_PERMANOVA &lt;- readRDS(\"./data/result/BatchEffect/RME_PERMANOVA.RDS\")\n} else {\n  saveRDS(RME_PERMANOVA, \"./data/result/BatchEffect/RME_PERMANOVA.RDS\", compress = TRUE)\n}\n\nRME_PERMANOVA\n结果：limma::removeBatchEffect方法也均降低了Group和ProjectID的解释的变异比例。ProjectID的整体转录组结构变异从 69.3%降低至9.7%，而Group则从1.6%降低至1%，这表明该方法同时对批次效应和生物学效应产生了影响。该方法在降低批次效应要好于sva::ComBat。\n\nVoom+SNM\n\n\nVoomSNM_ExprSet &lt;- get_ExprSet(\n  x = VoomSNM_data,\n  y = metadata,\n  occurrence = 0.5)\n\n\nif (file.exists(\"./data/result/BatchEffect/VoomSNM_PERMANOVA.RDS\")) {\n  VoomSNM_PERMANOVA &lt;- readRDS(\"./data/result/BatchEffect/VoomSNM_PERMANOVA.RDS\")\n} else {\n  saveRDS(VoomSNM_PERMANOVA, \"./data/result/BatchEffect/VoomSNM_PERMANOVA.RDS\", compress = TRUE)\n}\n\nVoomSNM_PERMANOVA\n结果：Voom+SNM方法也均降低了Group和ProjectID的解释的变异比例。ProjectID的整体转录组结构变异从 69.3%降低至0.3%，而Group则从1.6%降低至1.3%，这表明该方法同时对批次效应和生物学效应产生了影响。相比其他两种方法（sva::ComBat和limma::removeBatchEffect），Voom+SNM不仅显著降低批次效应并且也最大程度保留生物学效应。",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数据校正</span>"
    ]
  },
  {
    "objectID": "wrangling-batchEffect.html#sec-batcheffect-output",
    "href": "wrangling-batchEffect.html#sec-batcheffect-output",
    "title": "9  数据校正",
    "section": "\n9.9 输出校正后的结果",
    "text": "9.9 输出校正后的结果\n#| warning: false\n#| message: false\n\nif (!dir.exists(\"./data/result/ExpSetObject\")) {\n  dir.create(\"./data/result/ExpSetObject\", recursive = TRUE)\n}\n\n# saveRDS(ComBat_ExprSet, \"./data/result/ExpSetObject/MergeExpSet_ComBat_LIRI-JP_TCGA-LIHC.RDS\", compress = TRUE)\n# saveRDS(RME_ExprSet, \"./data/result/ExpSetObject/MergeExpSet_RME_LIRI-JP_TCGA-LIHC.RDS\", compress = TRUE)\n# saveRDS(MMUPHin_ExprSet, \"./data/result/ExpSetObject/MergeExpSet_MMUPHin_LIRI-JP_TCGA-LIHC.RDS\", compress = TRUE)\n# saveRDS(ComBatSeq_ExprSet, \"./data/result/ExpSetObject/MergeExpSet_ComBatSeq_LIRI-JP_TCGA-LIHC.RDS\", compress = TRUE)\nsaveRDS(VoomSNM_ExprSet, \"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\", compress = TRUE)\n\n\nif (!dir.exists(\"./data/result/Figure\")) {\n  dir.create(\"./data/result/Figure\", recursive = TRUE)\n}\n\nggsave(\"./data/result/Figure/SFig1.pdf\", adjusted_pl, width = 10, height = 7, dpi = 600)",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数据校正</span>"
    ]
  },
  {
    "objectID": "wrangling-batchEffect.html#sec-batcheffect-summary",
    "href": "wrangling-batchEffect.html#sec-batcheffect-summary",
    "title": "9  数据校正",
    "section": "\n9.10 总结",
    "text": "9.10 总结\n在评估了不同批次效应校正方法后，发现Voom + SNM的组合在降低批次效应方面表现最佳，同时能够有效地保留生物学效应。这一组合不仅显著减少了由于非生物学因素导致的变异，还确保了数据中生物学信号的完整性和准确性。因此，决定使用Voom + SNM校正后的表达谱数据，并将其保存为RDS文件格式，以便直接用于后续的下游分析。这样，能够基于准确且可靠的数据集，进行更深入的生物学研究。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices datasets  utils     methods  \n[8] base     \n\nother attached packages:\n [1] cowplot_1.1.3               ggpubr_0.6.0               \n [3] snm_1.50.0                  SummarizedExperiment_1.32.0\n [5] GenomicRanges_1.54.1        GenomeInfoDb_1.38.8        \n [7] IRanges_2.36.0              S4Vectors_0.40.2           \n [9] MatrixGenerics_1.14.0       matrixStats_1.3.0          \n[11] MicrobiomeAnalysis_1.0.3    limma_3.58.1               \n[13] sva_3.50.0                  BiocParallel_1.36.0        \n[15] genefilter_1.84.0           mgcv_1.9-1                 \n[17] nlme_3.1-164                Biobase_2.62.0             \n[19] BiocGenerics_0.48.1         data.table_1.15.4          \n[21] lubridate_1.9.3             forcats_1.0.0              \n[23] stringr_1.5.1               dplyr_1.1.4                \n[25] purrr_1.0.2                 readr_2.1.5                \n[27] tidyr_1.3.1                 tibble_3.2.1               \n[29] ggplot2_3.5.1               tidyverse_2.0.0            \n\nloaded via a namespace (and not attached):\n  [1] fs_1.6.4                        bitops_1.0-7                   \n  [3] DirichletMultinomial_1.44.0     httr_1.4.7                     \n  [5] RColorBrewer_1.1-3              doParallel_1.0.17              \n  [7] numDeriv_2016.8-1.1             tools_4.3.3                    \n  [9] doRNG_1.8.6                     backports_1.4.1                \n [11] utf8_1.2.4                      R6_2.5.1                       \n [13] vegan_2.6-4                     lazyeval_0.2.2                 \n [15] rhdf5filters_1.14.1             permute_0.9-7                  \n [17] withr_3.0.0                     gridExtra_2.3                  \n [19] cli_3.6.2                       sandwich_3.1-0                 \n [21] mvtnorm_1.2-4                   proxy_0.4-27                   \n [23] yulab.utils_0.1.4               foreign_0.8-86                 \n [25] scater_1.30.1                   decontam_1.22.0                \n [27] readxl_1.4.3                    rstudioapi_0.16.0              \n [29] RSQLite_2.3.6                   shape_1.4.6.1                  \n [31] generics_0.1.3                  gtools_3.9.5                   \n [33] car_3.1-2                       Matrix_1.6-5                   \n [35] biomformat_1.30.0               ggbeeswarm_0.7.2               \n [37] fansi_1.0.6                     DescTools_0.99.54              \n [39] DECIPHER_2.30.0                 abind_1.4-5                    \n [41] lifecycle_1.0.4                 multcomp_1.4-25                \n [43] yaml_2.3.8                      edgeR_4.0.16                   \n [45] carData_3.0-5                   gplots_3.1.3.1                 \n [47] rhdf5_2.46.1                    SparseArray_1.2.4              \n [49] grid_4.3.3                      blob_1.2.4                     \n [51] crayon_1.5.2                    lattice_0.22-6                 \n [53] beachmat_2.18.1                 annotate_1.80.0                \n [55] KEGGREST_1.42.0                 pillar_1.9.0                   \n [57] knitr_1.46                      boot_1.3-30                    \n [59] gld_2.6.6                       corpcor_1.6.10                 \n [61] codetools_0.2-19                glue_1.7.0                     \n [63] MultiAssayExperiment_1.28.0     vctrs_0.6.5                    \n [65] png_0.1-8                       treeio_1.26.0                  \n [67] Rdpack_2.6                      cellranger_1.1.0               \n [69] gtable_0.3.5                    cachem_1.0.8                   \n [71] xfun_0.43                       rbibutils_2.2.16               \n [73] S4Arrays_1.2.1                  metagenomeSeq_1.43.0           \n [75] survival_3.7-0                  SingleCellExperiment_1.24.0    \n [77] iterators_1.0.14                statmod_1.5.0                  \n [79] bluster_1.12.0                  gmp_0.7-4                      \n [81] TH.data_1.1-2                   ANCOMBC_2.4.0                  \n [83] phyloseq_1.46.0                 bit64_4.0.5                    \n [85] irlba_2.3.5.1                   KernSmooth_2.23-22             \n [87] vipor_0.4.7                     rpart_4.1.23                   \n [89] colorspace_2.1-0                DBI_1.2.2                      \n [91] Hmisc_5.1-2                     nnet_7.3-19                    \n [93] ade4_1.7-22                     Exact_3.2                      \n [95] DESeq2_1.42.1                   tidyselect_1.2.1               \n [97] bit_4.0.5                       compiler_4.3.3                 \n [99] glmnet_4.1-8                    htmlTable_2.4.2                \n[101] BiocNeighbors_1.20.2            expm_0.999-9                   \n[103] DelayedArray_0.28.0             caTools_1.18.2                 \n[105] checkmate_2.3.1                 scales_1.3.0                   \n[107] digest_0.6.35                   minqa_1.2.6                    \n[109] rmarkdown_2.26                  XVector_0.42.0                 \n[111] htmltools_0.5.8.1               pkgconfig_2.0.3                \n[113] base64enc_0.1-3                 lme4_1.1-35.3                  \n[115] sparseMatrixStats_1.14.0        fastmap_1.1.1                  \n[117] rlang_1.1.3                     htmlwidgets_1.6.4              \n[119] DelayedMatrixStats_1.24.0       zoo_1.8-12                     \n[121] jsonlite_1.8.8                  energy_1.7-11                  \n[123] BiocSingular_1.18.0             RCurl_1.98-1.14                \n[125] magrittr_2.0.3                  Formula_1.2-5                  \n[127] scuttle_1.12.0                  GenomeInfoDbData_1.2.11        \n[129] Rhdf5lib_1.24.2                 munsell_0.5.1                  \n[131] Rcpp_1.0.12                     ape_5.8                        \n[133] viridis_0.6.5                   CVXR_1.0-12                    \n[135] stringi_1.8.4                   rootSolve_1.8.2.4              \n[137] zlibbioc_1.48.2                 MASS_7.3-60.0.1                \n[139] plyr_1.8.9                      parallel_4.3.3                 \n[141] ggrepel_0.9.5                   lmom_3.0                       \n[143] Biostrings_2.70.3               splines_4.3.3                  \n[145] multtest_2.58.0                 hms_1.1.3                      \n[147] locfit_1.5-9.9                  igraph_2.0.3                   \n[149] ggsignif_0.6.4                  Wrench_1.20.0                  \n[151] rngtools_1.5.2                  reshape2_1.4.4                 \n[153] ScaledMatrix_1.10.0             XML_3.99-0.16.1                \n[155] evaluate_0.23                   renv_1.0.0                     \n[157] BiocManager_1.30.23             nloptr_2.0.3                   \n[159] tzdb_0.4.0                      foreach_1.5.2                  \n[161] rsvd_1.0.5                      broom_1.0.5                    \n[163] xtable_1.8-4                    Rmpfr_0.9-5                    \n[165] e1071_1.7-14                    tidytree_0.4.6                 \n[167] rstatix_0.7.2                   viridisLite_0.4.2              \n[169] class_7.3-22                    gsl_2.1-8                      \n[171] lmerTest_3.1-3                  memoise_2.0.1                  \n[173] beeswarm_0.4.0                  AnnotationDbi_1.66.0           \n[175] cluster_2.1.6                   TreeSummarizedExperiment_2.10.0\n[177] timechange_0.3.0                mia_1.10.0                     \n\n\n\n\n\n\nAnderson, Marti J. 2014. 《Permutational multivariate analysis of variance (PERMANOVA)》. Wiley statsref: statistics reference online, 1–15.\n\n\nLeek, Jeffrey T, 和 John D Storey. 2007. 《Capturing heterogeneity in gene expression studies by surrogate variable analysis》. PLoS genetics 3 (9): e161.\n\n\nMecham, Brigham H, Peter S Nelson, 和 John D Storey. 2010. 《Supervised normalization of microarrays》. Bioinformatics 26 (10): 1308–15.\n\n\nPoore, Gregory D, Evguenia Kopylova, Qiyun Zhu, Carolina Carpenter, Serena Fraraccio, Stephen Wandro, Tomasz Kosciolek, 等. 2020. 《Microbiome analyses of blood and tissues suggest cancer diagnostic approach》. Nature 579 (7800): 567–74.\n\n\nRitchie, Matthew E, Belinda Phipson, DI Wu, Yifang Hu, Charity W Law, Wei Shi, 和 Gordon K Smyth. 2015. 《limma powers differential expression analyses for RNA-sequencing and microarray studies》. Nucleic acids research 43 (7): e47–47.\n\n\nZou, Hua. 2022. 《MicrobiomeAnalysis: An R package for analysis and visualization in metagenomics》. https://github.com/HuaZou/MicrobiomeAnalysis/.",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>数据校正</span>"
    ]
  },
  {
    "objectID": "wrangling-gtsummary.html",
    "href": "wrangling-gtsummary.html",
    "title": "10  数据汇总",
    "section": "",
    "text": "10.1 导入数据",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>数据汇总</span>"
    ]
  },
  {
    "objectID": "wrangling-gtsummary.html#sec-gtsummary-importdata",
    "href": "wrangling-gtsummary.html#sec-gtsummary-importdata",
    "title": "10  数据汇总",
    "section": "",
    "text": "ExpressionSet来自于 章节 9；\nSupplementaryData来自于 小节 6.5。\n\n\nExprSet_LIRI_JP &lt;- readRDS(\"./data/result/ExpSetObject/Final_ExpSet_LIRI_JP_TrueCounts.RDS\")\nExprSet_TCGA_LIHC &lt;- readRDS(\"./data/result/ExpSetObject/Final_ExpSet_TCGA_LIHC_TrueCounts.RDS\")\n\nExprSet_dis &lt;- readRDS(\"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\")\nExprSet_val &lt;- readRDS(\"./data/result/ExpSetObject/GSE14520_ExpSet_counts.RDS\")\n\nmeatdata_sc &lt;- readxl::read_xlsx(\"./data/GSE149614_scRNA/SupplementaryData/Supplementary Data 1.xlsx\", sheet = 1)",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>数据汇总</span>"
    ]
  },
  {
    "objectID": "wrangling-gtsummary.html#sec-gtsummary-table",
    "href": "wrangling-gtsummary.html#sec-gtsummary-table",
    "title": "10  数据汇总",
    "section": "\n10.2 汇总表格",
    "text": "10.2 汇总表格\nmeta_dis &lt;- pData(ExprSet_dis) \nmeta_val &lt;- pData(ExprSet_val)\nmeta_sc &lt;- meatdata_sc %&gt;%\n  na.omit()\ncolnames(meta_sc) &lt;- c(as.character(meatdata_sc[2, ]))\n\nmeta_tbl &lt;- metadata %&gt;%\n  dplyr::select(-all_of(c(\"SampleID\", \"Status\", \"Time\"))) %&gt;%\n  tbl_summary(by = \"ProjectID\") %&gt;%\n  add_p() %&gt;%\n  bold_labels()\n\nmeta_tbl\n结果：本教程涉及到的肝细胞癌（HCC）患者的临床病理特征的数据分布情况",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>数据汇总</span>"
    ]
  },
  {
    "objectID": "wrangling-gtsummary.html#sec-gtsummary-output",
    "href": "wrangling-gtsummary.html#sec-gtsummary-output",
    "title": "10  数据汇总",
    "section": "\n10.3 输出结果",
    "text": "10.3 输出结果\n\nif (!dir.exists(\"./data/result/metadata/\")) {\n  dir.create(\"./data/result/ExpSetObject\", recursive = TRUE)\n}\n\n\nfilename &lt;- paste0(\"./data/result/metadata\", \"/HCC_summary_metadata\", \".xlsx\")",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>数据汇总</span>"
    ]
  },
  {
    "objectID": "wrangling-gtsummary.html#sec-gtsummary-summary",
    "href": "wrangling-gtsummary.html#sec-gtsummary-summary",
    "title": "10  数据汇总",
    "section": "\n10.4 总结",
    "text": "10.4 总结\n总计位患者用于本教程。\n系统信息\n\nsessionInfo()\n\n#&gt; R version 4.3.3 (2024-02-29)\n#&gt; Platform: aarch64-apple-darwin20 (64-bit)\n#&gt; Running under: macOS Sonoma 14.2\n#&gt; \n#&gt; Matrix products: default\n#&gt; BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \n#&gt; LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n#&gt; \n#&gt; locale:\n#&gt; [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n#&gt; \n#&gt; time zone: Asia/Shanghai\n#&gt; tzcode source: internal\n#&gt; \n#&gt; attached base packages:\n#&gt; [1] stats     graphics  grDevices datasets  utils     methods   base     \n#&gt; \n#&gt; other attached packages:\n#&gt;  [1] xlsx_0.6.5          gtsummary_1.7.2     Biobase_2.62.0     \n#&gt;  [4] BiocGenerics_0.48.1 lubridate_1.9.3     forcats_1.0.0      \n#&gt;  [7] stringr_1.5.1       dplyr_1.1.4         purrr_1.0.2        \n#&gt; [10] readr_2.1.5         tidyr_1.3.1         tibble_3.2.1       \n#&gt; [13] ggplot2_3.5.1       tidyverse_2.0.0    \n#&gt; \n#&gt; loaded via a namespace (and not attached):\n#&gt;  [1] gt_0.10.1            xlsxjars_0.6.1       utf8_1.2.4          \n#&gt;  [4] generics_0.1.3       renv_1.0.0           xml2_1.3.6          \n#&gt;  [7] stringi_1.8.4        hms_1.1.3            digest_0.6.35       \n#&gt; [10] magrittr_2.0.3       evaluate_0.23        grid_4.3.3          \n#&gt; [13] timechange_0.3.0     sysfonts_0.8.9       fastmap_1.1.1       \n#&gt; [16] broom.helpers_1.15.0 jsonlite_1.8.8       BiocManager_1.30.23 \n#&gt; [19] fansi_1.0.6          scales_1.3.0         cli_3.6.2           \n#&gt; [22] rlang_1.1.3          munsell_0.5.1        withr_3.0.0         \n#&gt; [25] yaml_2.3.8           tools_4.3.3          tzdb_0.4.0          \n#&gt; [28] colorspace_2.1-0     vctrs_0.6.5          R6_2.5.1            \n#&gt; [31] lifecycle_1.0.4      htmlwidgets_1.6.4    pkgconfig_2.0.3     \n#&gt; [34] rJava_1.0-11         pillar_1.9.0         gtable_0.3.5        \n#&gt; [37] glue_1.7.0           xfun_0.43            tidyselect_1.2.1    \n#&gt; [40] rstudioapi_0.16.0    knitr_1.46           htmltools_0.5.8.1   \n#&gt; [43] rmarkdown_2.26       compiler_4.3.3",
    "crumbs": [
      "数据准备",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>数据汇总</span>"
    ]
  },
  {
    "objectID": "different-limma.html",
    "href": "different-limma.html",
    "title": "11  差异分析之limma",
    "section": "",
    "text": "11.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(Biobase)\nlibrary(limma)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>差异分析之limma</span>"
    ]
  },
  {
    "objectID": "different-limma.html#sec-different-limma-function",
    "href": "different-limma.html#sec-different-limma-function",
    "title": "11  差异分析之limma",
    "section": "\n11.2 读取函数",
    "text": "11.2 读取函数\ndetermine_tables &lt;- function(\n    object = NULL,\n    data_counts = NULL,\n    data_metadata = NULL,\n    group,\n    group_names = NULL,\n    p_adjust = c(\"none\", \"fdr\", \"bonferroni\", \"holm\",\n                 \"hochberg\", \"hommel\", \"BH\", \"BY\"),\n    da_method = NULL) {\n\n  # p_adjust\n  p_adjust &lt;- match.arg(p_adjust,\n                        c(\"none\", \"fdr\", \"bonferroni\", \"holm\",\n                          \"hochberg\", \"hommel\", \"BH\", \"BY\")\n  )\n  \n  # determine to use the ExpressionSet-class object\n  if (all(!is.null(object), !is.null(data_counts), !is.null(data_metadata))) {\n    message(\"Either ExpressionSet object or counts and metadata as inputdata\")\n    message(\"Use the ExpressionSet object as default in the following processes\")\n  }\n  \n  # whether to extract tables from ExpressionSet\n  if (!is.null(object)) {\n    counts &lt;- Biobase::exprs(object) %&gt;%\n      data.frame()\n    metadata &lt;- Biobase::pData(object) %&gt;%\n      data.frame()\n  } else if (!is.null(data_counts)) {\n    counts &lt;- data_counts %&gt;% \n      data.frame()\n    if (!is.null(data_metadata)) {\n      metadata &lt;- data_metadata %&gt;%\n        data.frame()\n    } else {\n      stop(\"Please load sample data\")\n    }\n  } else {\n    stop(\"Please load ExpressionSet and counts\")\n  }\n\n  # check whether group is valid\n  meta_nms &lt;- names(metadata)\n  if (!group %in% meta_nms) {\n    stop(\n      group, \" are not contained in the `pData` of `ExpressionSet`\",\n      call. = FALSE\n    )\n  }\n  \n  # groups split\n  if (!is.null(group_names)) {\n    if (length(grep(\":\", group_names)) == 0) {\n      group_names &lt;- group_names\n    } else {\n      group_names &lt;- unlist(strsplit(group_names, \":\", fixed = TRUE))\n    }\n  }\n  \n  #  metadata table: row -&gt; SampleID; column -&gt; phenotypic index\n  sample_data_df &lt;- metadata %&gt;%\n    data.frame()\n  colnames(sample_data_df)[which(colnames(sample_data_df) == group)] &lt;- \"Compvar\"\n  if (!is.null(group_names)) {\n    sam_tab &lt;- sample_data_df %&gt;%\n      tibble::rownames_to_column(\"TempRowNames\") %&gt;%\n      dplyr::filter(Compvar %in% group_names) %&gt;%\n      tibble::column_to_rownames(\"TempRowNames\")\n    sam_tab$Compvar &lt;- factor(sam_tab$Compvar, levels = group_names)\n  } else {\n    sam_tab &lt;- sample_data_df\n    group_names &lt;- as.character(unique(sam_tab$Compvar))\n    sam_tab$Compvar &lt;- factor(sam_tab$Compvar, levels = group_names)\n  }\n  \n  # check the levels of group are 2\n  if (length(unique(sam_tab$Compvar)) != 2 ) {\n    stop(\n      group, \" contains more than 2 levels in `ps`, please input the names of comparison\",\n      call. = FALSE\n    )\n  }\n  count_tab &lt;- counts[, match(rownames(sam_tab), colnames(counts))]\n  \n  # remove gene with constant in groups\n  ## Judge whether the data are not 0 per groups\n  mdat &lt;- dplyr::inner_join(sam_tab %&gt;% \n                              tibble::rownames_to_column(\"TempRowNames\") %&gt;%\n                              dplyr::select(dplyr::all_of(c(\"TempRowNames\", \"Compvar\"))),\n                            count_tab %&gt;% \n                              t() %&gt;% data.frame() %&gt;%\n                              tibble::rownames_to_column(\"TempRowNames\"),\n                            by = \"TempRowNames\") %&gt;%\n    tibble::column_to_rownames(\"TempRowNames\")\n  occ_fun &lt;- function(x){\n    length(x[c(which(!is.na(x) & x != 0))])/length(x)\n  }\n  mdat_zero_occ &lt;- mdat %&gt;% dplyr::group_by(Compvar) %&gt;%\n    dplyr::summarise(across(everything(), ~ occ_fun(.))) %&gt;%\n    tibble::column_to_rownames(\"Compvar\") %&gt;%\n    t() %&gt;% data.frame()\n  # change & (and) into | (or): 7/19/2022\n  mdat_zero_occ$KEEP &lt;- ifelse(mdat_zero_occ[, 1] &gt; 0.1 | mdat_zero_occ[, 2] &gt; 0.1, TRUE, FALSE)\n  nfeature &lt;- rownames(mdat_zero_occ)[mdat_zero_occ$KEEP]\n  mdat_remain &lt;- mdat[, colnames(mdat) %in% c(\"Compvar\", nfeature)]\n  \n  ## Judge whether the data are identical (such as all equal=1)\n  idential_res &lt;- apply(mdat_remain[, -1], 2, function(x) {\n    length(unique(x)[unique(x) != 0]) != 1\n  }) %&gt;%\n    data.frame()\n  nfeature_idential &lt;- rownames(idential_res)[idential_res$.]\n  mdat_remain_v2 &lt;- mdat_remain[, colnames(mdat_remain) %in% c(\"Compvar\", nfeature_idential)]\n  \n  ## remove value appears to be constant with groups\n  ## but the strict filtered criterion would remove too many taxa if the cutoff is 3\n  constant_res &lt;- mdat_remain_v2 %&gt;% dplyr::group_by(Compvar) %&gt;%\n    dplyr::summarise(across(.cols = everything(), .fns = function(x){length(unique(x)) &gt; 0})) %&gt;%\n    tibble::column_to_rownames(\"Compvar\") %&gt;%\n    t() %&gt;% data.frame()\n  \n  nfeature_no_constant &lt;- data.frame()\n  for (i in 1:nrow(constant_res)) {\n    nfeature_no_constant &lt;- rbind(nfeature_no_constant,\n                                  data.frame(FeatureID=rownames(constant_res)[i],\n                                             KEEP=all(constant_res[i, 1], constant_res[i, 2])))\n  }\n  nfeature_no_constant_final &lt;- rownames(idential_res)[nfeature_no_constant$KEEP]\n  mdat_remain_final &lt;- mdat_remain[, colnames(mdat_remain) %in% \n                                     c(\"Compvar\", nfeature_no_constant_final)]\n  \n  ## final tables\n  otu_tab_final &lt;- mdat_remain_final %&gt;%\n    dplyr::select(-Compvar) %&gt;%\n    t() %&gt;% data.frame()\n  sam_tab_final &lt;- sam_tab[pmatch(colnames(otu_tab_final), rownames(sam_tab)), , F]\n  \n  # return results\n  res &lt;- list(count = otu_tab_final,\n              phen = sam_tab_final,\n              nf = NULL,\n              lib_size = NULL,\n              group_names = group_names)\n  \n  return(res)\n}\n\ncalculate_occurrence &lt;- function(profile, metadata, groups) {\n  \n  if (!all(rownames(metadata) == colnames(profile))) {\n    stop(\"Order of sampleID between colData and proData is wrong please check your inputdata\")\n  }\n  \n  res &lt;- apply(profile, 1, function(x, y) {\n    dat &lt;- data.frame(value = as.numeric(x), group = y)\n    occ &lt;- tapply(dat$value, dat$group, function(x){\n      length(x[c(which(!is.na(x) & x != 0))]) / length(x)\n    }) %&gt;%\n      data.frame() %&gt;% stats::setNames(\"occ\") %&gt;%\n      tibble::rownames_to_column(\"Group\")\n    occ1 &lt;- occ[occ$Group %in% groups[1], \"occ\"]\n    occ2 &lt;- occ[occ$Group %in% groups[2], \"occ\"]\n    occall &lt;- length(dat$value[c(which(!is.na(dat$value) & dat$value != 0))]) / length(dat$value)\n    \n    # 100%\n    occ1_percentage &lt;- round(occ1, 4) * 100\n    occ2_percentage &lt;- round(occ2, 4) * 100\n    occall_percentage &lt;- round(occall, 4) * 100\n    \n    res &lt;- c(occall_percentage, occ1_percentage, occ2_percentage)\n    return(res)\n  }, metadata$Compvar) %&gt;%\n    t() %&gt;% data.frame() %&gt;%\n    tibble::rownames_to_column(\"FeatureID\")\n  \n  colnames(res) &lt;- c(\"FeatureID\",\n                     \"Occurrence (100%)\\n(All)\",\n                     paste0(\"Occurrence (100%)\\n\", groups))\n  \n  return(res)\n}\n\nrun_OddRatio &lt;- function(datx, daty, GroupName) {\n  \n  # glm result for odd ratios 95%CI\n  mdat &lt;- dplyr::inner_join(datx %&gt;% tibble::rownames_to_column(\"TempRowNames\") %&gt;%\n                              dplyr::select(dplyr::all_of(c(\"TempRowNames\", \"Compvar\"))),\n                            daty %&gt;% t() %&gt;% data.frame() %&gt;%\n                              tibble::rownames_to_column(\"TempRowNames\"),\n                            by = \"TempRowNames\") %&gt;%\n    tibble::column_to_rownames(\"TempRowNames\")\n  \n  # Judge whether the data are not 0 per groups\n  occ_fun &lt;- function(x){\n    length(x[c(which(!is.na(x) & x != 0))]) / length(x)\n  }\n  mdat_zero_occ &lt;- mdat %&gt;%\n    dplyr::group_by(Compvar) %&gt;%\n    dplyr::summarise(across(everything(), ~ occ_fun(.))) %&gt;%\n    tibble::column_to_rownames(\"Compvar\") %&gt;%\n    t() %&gt;% data.frame()\n  mdat_zero_occ$KEEP &lt;- ifelse(mdat_zero_occ[, 1] &gt; 0 & mdat_zero_occ[, 2] &gt; 0, TRUE, FALSE)\n  nfeature &lt;- rownames(mdat_zero_occ)[mdat_zero_occ$KEEP]\n  mdat_remain &lt;- mdat[, colnames(mdat) %in% c(\"Compvar\", nfeature)]\n  \n  # Judge whether the data are identical (such as all equal=1)\n  idential_res &lt;- apply(mdat_remain[, -1], 2, function(x) {\n    length(unique(x)[unique(x) != 0]) != 1\n  }) %&gt;%\n    data.frame()\n  nfeature_idential &lt;- rownames(idential_res)[idential_res$.]\n  mdat_remain_final &lt;- mdat_remain[, colnames(mdat_remain) %in% c(\"Compvar\", nfeature_idential)]\n  \n  dat_phe &lt;- mdat_remain_final %&gt;%\n    dplyr::select(Compvar) %&gt;%\n    dplyr::mutate(Compvar = ifelse(Compvar == GroupName[2], 1, 0))\n  dat_prf &lt;- mdat_remain_final %&gt;% dplyr::select(-Compvar)\n  \n  glmFun &lt;- function(GroupN, MarkerN) {\n    \n    MarkerN[MarkerN == 0] &lt;- min(MarkerN[MarkerN != 0])\n    dat_glm &lt;- data.frame(group = GroupN,\n                          marker = scale(MarkerN, center = TRUE, scale = TRUE)) %&gt;%\n      na.omit()\n    model &lt;- summary(stats::glm(group ~ marker, data = dat_glm,\n                                family = binomial(link = \"logit\")))\n    res &lt;- signif(exp(model$coefficients[\"marker\", 1]) +\n                    qnorm(c(0.025, 0.5, 0.975)) * model$coefficients[\"marker\", 1], 2)\n    \n    return(res)\n  }\n  \n  glm_res &lt;- t(apply(dat_prf, 2, function(x, group) {\n    res &lt;- glmFun(group, as.numeric(x))\n    return(res)\n  }, dat_phe$Compvar))\n  \n  Odd &lt;- glm_res %&gt;% data.frame() %&gt;%\n    setNames(c(\"upper\", \"expected\", \"lower\")) %&gt;%\n    dplyr::mutate(\"Odds Ratio (95% CI)\" = paste0(expected, \" (\", lower, \";\", upper, \")\"))\n  Odd$FeatureID &lt;- rownames(glm_res)\n  \n  res_ratain &lt;- Odd[, c(5, 4)]\n  \n  # drop features\n  drop_features &lt;- dplyr::setdiff(rownames(daty), nfeature_idential)\n  if (length(drop_features) &gt; 0) {\n    res_drop &lt;- data.frame(FeatureID = drop_features,\n                           Value = NA) %&gt;%\n      stats::setNames(c(\"FeatureID\", \"Odds Ratio (95% CI)\"))\n    \n    res &lt;- rbind(res_ratain, res_drop)\n  } else {\n    res &lt;- res_ratain\n  }\n  \n  return(res)\n}\n\ncalculate_median_abundance &lt;- function(profile, metadata, groups) {\n  \n  if (!all(rownames(metadata) == colnames(profile))) {\n    stop(\"Order of sampleID between colData and proData is wrong please check your inputdata\")\n  }\n  \n  res &lt;- apply(profile, 1, function(x, y) {\n    dat &lt;- data.frame(value = as.numeric(x), group = y)\n    mn &lt;- tapply(dat$value, dat$group, median) %&gt;%\n      data.frame() %&gt;% setNames(\"value\") %&gt;%\n      tibble::rownames_to_column(\"Group\")\n    mn1 &lt;- with(mn, mn[Group %in% groups[1], \"value\"])\n    mn2 &lt;- with(mn, mn[Group %in% groups[2], \"value\"])\n    mnall &lt;- median(dat$value)\n    \n    if (all(mn1 != 0, mn2 != 0)) {\n      Log2median &lt;- log2(mn1 / mn2)\n    } else {\n      Log2median &lt;- NA\n    }\n    \n    res &lt;- c(Log2median, mnall, mn1, mn2)\n    return(res)\n  }, metadata$Compvar) %&gt;%\n    t() %&gt;% data.frame() %&gt;%\n    tibble::rownames_to_column(\"FeatureID\")\n  \n  colnames(res) &lt;- c(\"FeatureID\",\n                     paste0(\"Log2FoldChange (Median)\\n\", paste(groups, collapse = \"_vs_\")),\n                     \"Median Abundance\\n(All)\",\n                     paste0(\"Median Abundance\\n\", groups))\n  \n  return(res)\n}\n\ncalculate_mean_abundance &lt;- function(profile, metadata, groups) {\n  \n  if (!all(rownames(metadata) == colnames(profile))) {\n    stop(\"Order of sampleID between colData and proData is wrong please check your inputdata\")\n  }\n  \n  res &lt;- apply(profile, 1, function(x, y) {\n    dat &lt;- data.frame(value = as.numeric(x), group = y)\n    mn &lt;- tapply(dat$value, dat$group, mean) %&gt;%\n      data.frame() %&gt;% stats::setNames(\"value\") %&gt;%\n      tibble::rownames_to_column(\"Group\")\n    mn1 &lt;- with(mn, mn[Group %in% groups[1], \"value\"])\n    mn2 &lt;- with(mn, mn[Group %in% groups[2], \"value\"])\n    mnall &lt;- mean(dat$value)\n    \n    if (all(mn1 != 0, mn2 != 0)) {\n      Log2mean &lt;- log2(mn1 / mn2)\n    } else {\n      Log2mean &lt;- NA\n    }\n    \n    res &lt;- c(Log2mean, mnall, mn1, mn2)\n    return(res)\n  }, metadata$Compvar) %&gt;%\n    t() %&gt;% data.frame() %&gt;%\n    tibble::rownames_to_column(\"FeatureID\")\n  \n  colnames(res) &lt;- c(\"FeatureID\",\n                     paste0(\"Log2FoldChange (Mean)\\n\", paste(groups, collapse = \"_vs_\")),\n                     \"Mean Abundance\\n(All)\",\n                     paste0(\"Mean Abundance\\n\", groups))\n  \n  return(res)\n}\n\ncreate_contrast &lt;- function(groups, contrast = NULL) {\n  if (!is.factor(groups)) {\n    groups &lt;- factor(groups)\n  }\n  lvl &lt;- levels(groups)\n  n_lvl &lt;- length(lvl)\n  if (n_lvl &lt; 2) {\n    stop(\"Differential analysis requires at least two groups.\")\n  }\n  \n  if (n_lvl == 2) { # two groups\n    if (!is.null(contrast)) {\n      warning(\n        \"`contrast` is ignored, you do not need to set it\",\n        call. = FALSE\n      )\n    }\n    design &lt;- rep(0, n_lvl)\n    design[1] &lt;- -1\n    design[2] &lt;- 1\n  }\n  \n  return(design)\n}\n上述函数可以存到本地utilities.R脚本，可以通过source(“utilities.R”)加载函数。",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>差异分析之limma</span>"
    ]
  },
  {
    "objectID": "different-limma.html#sec-different-limma-importdata",
    "href": "different-limma.html#sec-different-limma-importdata",
    "title": "11  差异分析之limma",
    "section": "\n11.3 导入数据",
    "text": "11.3 导入数据\n\n\nExpressionSet来自于 章节 9\n\n\n\nExprSet &lt;- readRDS(\"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\")",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>差异分析之limma</span>"
    ]
  },
  {
    "objectID": "different-limma.html#sec-different-limma-codes",
    "href": "different-limma.html#sec-different-limma-codes",
    "title": "11  差异分析之limma",
    "section": "\n11.4 差异分析函数",
    "text": "11.4 差异分析函数\n#| warning: false\n#| message: false\n\nrun_limma_voom &lt;- function(\n    object = NULL,\n    data_counts = NULL,\n    data_metadata = NULL,\n    group,\n    group_names = NULL,\n    voom_span = 0.5,\n    p_adjust = \"BH\",\n    qvalue_cutoff = 0.05) {\n\n  # extract tables\n  dat_tables &lt;- determine_tables(\n    object = object,\n    data_counts = data_counts,\n    data_metadata = data_metadata,\n    group = group,\n    group_names = group_names,\n    p_adjust = p_adjust)\n\n  otu_tab &lt;- dat_tables$count\n  sam_tab &lt;- dat_tables$phen\n  nf &lt;- dat_tables$nf\n  lib_size &lt;- colSums(dat_tables$count)\n  group_names &lt;- dat_tables$group_names\n\n  # calculate occurrence for group each taxa\n  occurrence_taxa &lt;- calculate_occurrence(otu_tab, sam_tab, group_names)\n  # calculate median abundance per group for enriched directory\n  median_abundance &lt;- calculate_median_abundance(otu_tab, sam_tab, group_names)\n  # calculate mean abundance per group\n  mean_abundance &lt;- calculate_mean_abundance(otu_tab, sam_tab, group_names)\n  # 95% CI Odd Ratio\n  odd_Ratio &lt;- run_OddRatio(sam_tab, otu_tab, group_names)\n\n  # building contrast object\n  lvl &lt;- levels(sam_tab$Compvar)\n  n_lvl &lt;- length(lvl)\n  groups &lt;- sam_tab$Compvar\n  contrast &lt;- create_contrast(groups, group_names)\n\n  # design matrix\n  design &lt;- model.matrix(~ 0 + groups)\n\n  # DA analysis: \n  res_temp &lt;- data.frame(\n      FeatureID = rownames(test_df),\n      Enrichment = enrich_group,\n      EffectSize = ef,\n      logFC = test_df$logFC,\n      Pvalue = test_df$P.Value,\n      AdjustedPvalue = test_df$adj.P.Val) %&gt;%\n    dplyr::inner_join(median_abundance, by = \"FeatureID\") %&gt;%\n    dplyr::inner_join(mean_abundance, by = \"FeatureID\") %&gt;%\n    dplyr::inner_join(occurrence_taxa, by = \"FeatureID\")\n\n  res_temp$Enrichment &lt;- ifelse(res_temp$AdjustedPvalue &lt; qvalue_cutoff, \n                                res_temp$Enrichment, \"Nonsignif\")\n\n  # Number of Group\n  dat_status &lt;- table(sam_tab$Compvar)\n  dat_status_number &lt;- as.numeric(dat_status)\n  dat_status_name &lt;- names(dat_status)\n  res_temp$Block &lt;- paste(paste(dat_status_number[1], dat_status_name[1], sep = \"_\"),\n                       \"vs\",\n                       paste(dat_status_number[2], dat_status_name[2], sep = \"_\"))\n\n  if (nrow(odd_Ratio) != 0) {\n    res_final &lt;- res_temp[, c(1, 18, 2:17)] %&gt;%\n      dplyr::inner_join(odd_Ratio, by = \"FeatureID\")\n  } else {\n    res_final &lt;- res_temp[, c(1, 18, 2:17)]\n  }\n\n  return(res_final)\n}",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>差异分析之limma</span>"
    ]
  },
  {
    "objectID": "different-limma.html#sec-different-limma-run",
    "href": "different-limma.html#sec-different-limma-run",
    "title": "11  差异分析之limma",
    "section": "\n11.5 运行差异分析",
    "text": "11.5 运行差异分析\n\n设置对应参数，运行run_limma_voom\n\n\n\nif (!dir.exists(\"./data/result/DA/\")) {\n  dir.create(\"./data/result/DA/\", recursive = TRUE)\n}\n\nif (file.exists(\"./data/result/DA/HCC_Early_vs_Late_limma.csv\")) {\n  Early_vs_Late &lt;- readr::read_csv(\"./data/result/DA/HCC_Early_vs_Late_limma.csv\")\n} else {\n  Early_vs_Late &lt;- run_limma_voom(\n    object = ExprSet,\n    group = \"Group\",\n    group_names = c(\"Early Stage\", \"Late Stage\"))  \n  write.csv(Early_vs_Late, \"./data/result/DA/HCC_Early_vs_Late_limma.csv\", row.names = F)  \n}\n\nhead(Early_vs_Late)\n结果：输出结果包含了19列。它们分别是：\n\n\n表 11.1: 差异分析limma的结果说明\n\n\n\n\n\n\n\n\n列名\n中文名称\n含义\n\n\n\nFeatureID\n特征名称\n基因名\n\n\nBlock\n区块\n分组检验数目\n\n\nEnrichment\n富集方向\n简单的富集方向\n\n\nEffectSize\n组间效应值\n两组均值差异比值\n\n\nlogFC\n组间log倍数\nlimma的logFC\n\n\nPvalue\n检验P值\nlimma的pvalue\n\n\nAdjustedPvalue\n检验BH值\nlimma的多重检验校正后的pvalue\n\n\nLog2FoldChange (Median) Early Stage_vs_Late Stage\n中位数的log2倍数\n\n\n\nMedian Abundance (All)\n中位数丰度\n\n\n\nMedian Abundance Early Stage\n中位数Early组丰度\n\n\n\nMedian Abundance Late Stage\n中位数Late组丰度\n\n\n\nLog2FoldChange (Mean) Early Stage_vs_Late Stage\n组间log倍数\n\n\n\nMean Abundance (All)\n平均值丰度\n\n\n\nMean Abundance Early Stage\n平均值Early组丰度\n\n\n\nMean Abundance Late Stage\n平均值Late组丰度\n\n\n\nOccurrence (100%) (All)\n出现率\n\n\n\nOccurrence (100%) Early Stage\nEarly组出现率\n\n\n\nOccurrence (100%) Late Stage\nLate组出现率\n\n\n\nOdds Ratio (95% CI)\n比值比\n95%置信区间比值比\n\n\n\n\n\n\n\n对 小节 11.5 上述结果进行过滤，挑选显著差异的特征\n\n\nqvalue &lt; 0.05;\n|log2foldchange| &gt;= 0.5;\n|log2foldchange| &lt;= 50;\nprevalence &gt; 50\n\n\nqval_cutoff &lt;- 0.05\nlgfc_cutoff &lt;- 0.5\nlgfc_max &lt;- 50\nprev_cutoff &lt;- 50\n\nEarly_vs_Late_signif &lt;- Early_vs_Late %&gt;%\n  dplyr::filter(AdjustedPvalue &lt; qval_cutoff) %&gt;%\n  dplyr::filter(abs(logFC) &gt;= lgfc_cutoff) %&gt;%\n  dplyr::filter(abs(logFC) &lt;= lgfc_max) %&gt;%\n  dplyr::filter(`Occurrence (100%)\\nEarly Stage` &gt; prev_cutoff) %&gt;%\n  dplyr::filter(`Occurrence (100%)\\nLate Stage` &gt; prev_cutoff)\n  # dplyr::filter(`Occurrence..100...Early.Stage` &gt; prev_cutoff) %&gt;%\n  # dplyr::filter(`Occurrence..100...Late.Stage` &gt; prev_cutoff)  \n\ntable(Early_vs_Late_signif$Enrichment)\n结果：分别获得富集在Early和Late分组的差异基因，这些差异基因将用于后续特征选择。",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>差异分析之limma</span>"
    ]
  },
  {
    "objectID": "different-limma.html#sec-different-limma-output",
    "href": "different-limma.html#sec-different-limma-output",
    "title": "11  差异分析之limma",
    "section": "\n11.6 输出结果",
    "text": "11.6 输出结果\n\nif (!dir.exists(\"./data/result/DA/\")) {\n  dir.create(\"./data/result/DA/\", recursive = TRUE)\n}\n\nwrite.csv(Early_vs_Late_signif, \"./data/result/DA/HCC_Early_vs_Late_limma_select.csv\", row.names = F)",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>差异分析之limma</span>"
    ]
  },
  {
    "objectID": "different-limma.html#sec-different-limma-summary",
    "href": "different-limma.html#sec-different-limma-summary",
    "title": "11  差异分析之limma",
    "section": "\n11.7 总结",
    "text": "11.7 总结\n在基因标记的探索和识别过程中，确保选取合适的差异分析方法和评估差异基因的指标是至关重要的步骤。为了有效识别出具有统计学显著性的基因差异，本节研究采用了广泛认可和应用的limma差异分析包。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] limma_3.58.1        Biobase_2.62.0      BiocGenerics_0.48.1\n [4] data.table_1.15.4   lubridate_1.9.3     forcats_1.0.0      \n [7] stringr_1.5.1       dplyr_1.1.4         purrr_1.0.2        \n[10] readr_2.1.5         tidyr_1.3.1         tibble_3.2.1       \n[13] ggplot2_3.5.1       tidyverse_2.0.0    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.5        jsonlite_1.8.8      compiler_4.3.3     \n [4] BiocManager_1.30.23 renv_1.0.0          tidyselect_1.2.1   \n [7] scales_1.3.0        statmod_1.5.0       yaml_2.3.8         \n[10] fastmap_1.1.1       R6_2.5.1            generics_0.1.3     \n[13] knitr_1.46          htmlwidgets_1.6.4   munsell_0.5.1      \n[16] tzdb_0.4.0          pillar_1.9.0        rlang_1.1.3        \n[19] utf8_1.2.4          stringi_1.8.4       xfun_0.43          \n[22] timechange_0.3.0    cli_3.6.2           withr_3.0.0        \n[25] magrittr_2.0.3      digest_0.6.35       grid_4.3.3         \n[28] rstudioapi_0.16.0   hms_1.1.3           lifecycle_1.0.4    \n[31] vctrs_0.6.5         evaluate_0.23       glue_1.7.0         \n[34] fansi_1.0.6         colorspace_2.1-0    rmarkdown_2.26     \n[37] tools_4.3.3         pkgconfig_2.0.3     htmltools_0.5.8.1",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>差异分析之limma</span>"
    ]
  },
  {
    "objectID": "different-volcano.html",
    "href": "different-volcano.html",
    "title": "12  差异结果的火山图",
    "section": "",
    "text": "12.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(Biobase)\nlibrary(MicrobiomeAnalysis)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>差异结果的火山图</span>"
    ]
  },
  {
    "objectID": "different-volcano.html#sec-different-volcano-importdata",
    "href": "different-volcano.html#sec-different-volcano-importdata",
    "title": "12  差异结果的火山图",
    "section": "\n12.2 导入数据",
    "text": "12.2 导入数据\n\n差异结果来自于 章节 11；\nExpressionSet来自于 章节 9。\n\n\nda_res_all &lt;- read.csv(\"./data/result/DA/HCC_Early_vs_Late_limma.csv\")\nda_res_signif &lt;- read.csv(\"./data/result/DA/HCC_Early_vs_Late_limma_select.csv\")\n\nExprSet &lt;- readRDS(\"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\")",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>差异结果的火山图</span>"
    ]
  },
  {
    "objectID": "different-volcano.html#sec-different-volcano-codes",
    "href": "different-volcano.html#sec-different-volcano-codes",
    "title": "12  差异结果的火山图",
    "section": "\n12.3 画图函数",
    "text": "12.3 画图函数",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>差异结果的火山图</span>"
    ]
  },
  {
    "objectID": "different-volcano.html#sec-different-volcano-run",
    "href": "different-volcano.html#sec-different-volcano-run",
    "title": "12  差异结果的火山图",
    "section": "\n12.4 火山图",
    "text": "12.4 火山图\n\n设置对应参数，运行get_volcano\n\n\n\nDEG_vol &lt;- get_volcano(\n  datsignif = da_res_all,\n  group_names = grp_names,\n  x_name = \"logFC\",\n  x_name_cutoff = 0.5,\n  y_name = \"AdjustedPvalue\",\n  y_name_cutoff = 0.05,\n  group_colors = c(grp_colors[1], \"grey\", grp_colors[2]),\n  topN = 10,\n  add_enrich_arrow = TRUE)\n\nDEG_vol\n\n\n\n\n\n\n图 12.1: 差异基因的火山图(Fig2-A)\n\n\n\n\n结果：火山图展示了富集在不同分组的基因情况\n\nX轴是limma的logfc的结果评估基因富集方向和大小；\nY轴是limma的AdjustedPvalue的结果判断基因显著性；\n散点图的颜色表示基因的属性，下方箭头表示富集方向；\n从图中可以得知，总计428个基因在特定阈值下（abs(logFC) &gt; 0.5，AdjustedPvalue &lt; 0.05）被筛选出来；\n图中展示的基因（SPP2，SLC6A8）是分别在两组高表达的差异基因。",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>差异结果的火山图</span>"
    ]
  },
  {
    "objectID": "different-volcano.html#sec-different-volcano-output",
    "href": "different-volcano.html#sec-different-volcano-output",
    "title": "12  差异结果的火山图",
    "section": "\n12.5 输出结果",
    "text": "12.5 输出结果\n\nif (!dir.exists(\"./data/result/Figure\")) {\n  dir.create(\"./data/result/Figure\", recursive = TRUE)\n}\n\nggsave(\"./data/result/Figure/Fig2-A.pdf\", DEG_vol, width = 10, height = 7, dpi = 600)",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>差异结果的火山图</span>"
    ]
  },
  {
    "objectID": "different-volcano.html#sec-different-volcano-summary",
    "href": "different-volcano.html#sec-different-volcano-summary",
    "title": "12  差异结果的火山图",
    "section": "\n12.6 总结",
    "text": "12.6 总结\n在成功获取差异基因的分析结果后，采用了火山图（Volcano Plot）这一强大的可视化工具来展示这些结果。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] MicrobiomeAnalysis_1.0.3 Biobase_2.62.0           BiocGenerics_0.48.1     \n [4] data.table_1.15.4        lubridate_1.9.3          forcats_1.0.0           \n [7] stringr_1.5.1            dplyr_1.1.4              purrr_1.0.2             \n[10] readr_2.1.5              tidyr_1.3.1              tibble_3.2.1            \n[13] ggplot2_3.5.1            tidyverse_2.0.0         \n\nloaded via a namespace (and not attached):\n  [1] fs_1.6.4                        matrixStats_1.3.0              \n  [3] bitops_1.0-7                    DirichletMultinomial_1.44.0    \n  [5] httr_1.4.7                      RColorBrewer_1.1-3             \n  [7] doParallel_1.0.17               numDeriv_2016.8-1.1            \n  [9] tools_4.3.3                     doRNG_1.8.6                    \n [11] backports_1.4.1                 utf8_1.2.4                     \n [13] R6_2.5.1                        vegan_2.6-4                    \n [15] lazyeval_0.2.2                  mgcv_1.9-1                     \n [17] rhdf5filters_1.14.1             permute_0.9-7                  \n [19] withr_3.0.0                     gridExtra_2.3                  \n [21] cli_3.6.2                       sandwich_3.1-0                 \n [23] labeling_0.4.3                  mvtnorm_1.2-4                  \n [25] proxy_0.4-27                    yulab.utils_0.1.4              \n [27] foreign_0.8-86                  scater_1.30.1                  \n [29] showtext_0.9-7                  decontam_1.22.0                \n [31] limma_3.58.1                    readxl_1.4.3                   \n [33] rstudioapi_0.16.0               sysfonts_0.8.9                 \n [35] RSQLite_2.3.6                   generics_0.1.3                 \n [37] shape_1.4.6.1                   gtools_3.9.5                   \n [39] Matrix_1.6-5                    biomformat_1.30.0              \n [41] ggbeeswarm_0.7.2                fansi_1.0.6                    \n [43] DescTools_0.99.54               S4Vectors_0.40.2               \n [45] DECIPHER_2.30.0                 abind_1.4-5                    \n [47] lifecycle_1.0.4                 multcomp_1.4-25                \n [49] yaml_2.3.8                      SummarizedExperiment_1.32.0    \n [51] gplots_3.1.3.1                  rhdf5_2.46.1                   \n [53] SparseArray_1.2.4               grid_4.3.3                     \n [55] blob_1.2.4                      crayon_1.5.2                   \n [57] lattice_0.22-6                  beachmat_2.18.1                \n [59] cowplot_1.1.3                   pillar_1.9.0                   \n [61] knitr_1.46                      GenomicRanges_1.54.1           \n [63] boot_1.3-30                     gld_2.6.6                      \n [65] codetools_0.2-19                glue_1.7.0                     \n [67] MultiAssayExperiment_1.28.0     vctrs_0.6.5                    \n [69] treeio_1.26.0                   Rdpack_2.6                     \n [71] cellranger_1.1.0                gtable_0.3.5                   \n [73] cachem_1.0.8                    xfun_0.43                      \n [75] rbibutils_2.2.16                S4Arrays_1.2.1                 \n [77] metagenomeSeq_1.43.0            survival_3.7-0                 \n [79] SingleCellExperiment_1.24.0     iterators_1.0.14               \n [81] showtextdb_3.0                  statmod_1.5.0                  \n [83] bluster_1.12.0                  gmp_0.7-4                      \n [85] TH.data_1.1-2                   nlme_3.1-164                   \n [87] ANCOMBC_2.4.0                   phyloseq_1.46.0                \n [89] bit64_4.0.5                     GenomeInfoDb_1.38.8            \n [91] irlba_2.3.5.1                   vipor_0.4.7                    \n [93] KernSmooth_2.23-22              rpart_4.1.23                   \n [95] colorspace_2.1-0                DBI_1.2.2                      \n [97] Hmisc_5.1-2                     nnet_7.3-19                    \n [99] ade4_1.7-22                     Exact_3.2                      \n[101] DESeq2_1.42.1                   tidyselect_1.2.1               \n[103] bit_4.0.5                       compiler_4.3.3                 \n[105] glmnet_4.1-8                    htmlTable_2.4.2                \n[107] BiocNeighbors_1.20.2            expm_0.999-9                   \n[109] DelayedArray_0.28.0             checkmate_2.3.1                \n[111] scales_1.3.0                    caTools_1.18.2                 \n[113] digest_0.6.35                   minqa_1.2.6                    \n[115] rmarkdown_2.26                  XVector_0.42.0                 \n[117] htmltools_0.5.8.1               pkgconfig_2.0.3                \n[119] base64enc_0.1-3                 lme4_1.1-35.3                  \n[121] sparseMatrixStats_1.14.0        MatrixGenerics_1.14.0          \n[123] fastmap_1.1.1                   rlang_1.1.3                    \n[125] htmlwidgets_1.6.4               DelayedMatrixStats_1.24.0      \n[127] farver_2.1.1                    zoo_1.8-12                     \n[129] jsonlite_1.8.8                  energy_1.7-11                  \n[131] BiocParallel_1.36.0             BiocSingular_1.18.0            \n[133] RCurl_1.98-1.14                 magrittr_2.0.3                 \n[135] Formula_1.2-5                   scuttle_1.12.0                 \n[137] GenomeInfoDbData_1.2.11         Rhdf5lib_1.24.2                \n[139] munsell_0.5.1                   Rcpp_1.0.12                    \n[141] ape_5.8                         viridis_0.6.5                  \n[143] CVXR_1.0-12                     stringi_1.8.4                  \n[145] rootSolve_1.8.2.4               zlibbioc_1.48.2                \n[147] MASS_7.3-60.0.1                 plyr_1.8.9                     \n[149] parallel_4.3.3                  ggrepel_0.9.5                  \n[151] lmom_3.0                        Biostrings_2.70.3              \n[153] splines_4.3.3                   multtest_2.58.0                \n[155] hms_1.1.3                       locfit_1.5-9.9                 \n[157] igraph_2.0.3                    Wrench_1.20.0                  \n[159] rngtools_1.5.2                  reshape2_1.4.4                 \n[161] stats4_4.3.3                    ScaledMatrix_1.10.0            \n[163] evaluate_0.23                   renv_1.0.0                     \n[165] BiocManager_1.30.23             nloptr_2.0.3                   \n[167] tzdb_0.4.0                      foreach_1.5.2                  \n[169] rsvd_1.0.5                      Rmpfr_0.9-5                    \n[171] e1071_1.7-14                    tidytree_0.4.6                 \n[173] viridisLite_0.4.2               class_7.3-22                   \n[175] gsl_2.1-8                       lmerTest_3.1-3                 \n[177] memoise_2.0.1                   beeswarm_0.4.0                 \n[179] IRanges_2.36.0                  cluster_2.1.6                  \n[181] TreeSummarizedExperiment_2.10.0 timechange_0.3.0               \n[183] mia_1.10.0",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>差异结果的火山图</span>"
    ]
  },
  {
    "objectID": "different-heatmap.html",
    "href": "different-heatmap.html",
    "title": "13  差异结果的热图",
    "section": "",
    "text": "13.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(Biobase)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(ggplotify)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>差异结果的热图</span>"
    ]
  },
  {
    "objectID": "different-heatmap.html#sec-different-heatmap-importdata",
    "href": "different-heatmap.html#sec-different-heatmap-importdata",
    "title": "13  差异结果的热图",
    "section": "\n13.2 导入数据",
    "text": "13.2 导入数据\n\n差异结果来自于 章节 11；\nExpressionSet来自于 章节 9。\n\n\nda_res_signif &lt;- read.csv(\"./data/result/DA/HCC_Early_vs_Late_limma_select.csv\")\n\nExprSet &lt;- readRDS(\"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\")",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>差异结果的热图</span>"
    ]
  },
  {
    "objectID": "different-heatmap.html#sec-different-heatmap-codes",
    "href": "different-heatmap.html#sec-different-heatmap-codes",
    "title": "13  差异结果的热图",
    "section": "\n13.3 画图函数",
    "text": "13.3 画图函数\n调用ComplexHeatmap::Heatmap函数(Gu, Eils, 和 Schlesner 2016)对差异分析的结果即差异基因进行绘图，采用常见的热图。ComplexHeatmap::Heatmap的详细用法可以直接查看函数帮助文档。除此之外，还使用circlize::colorRamp2函数(Gu 等 2014)调用颜色参数。\n\nget_heatmap &lt;- function(\n  object, \n  datsignif,\n  group,\n  group_names = grp_names,\n  group_colors = grp_colors) {\n  \n  metadata &lt;- pData(object) %&gt;%\n    as.data.frame()\n  profile &lt;- exprs(object) %&gt;%\n    as.data.frame()\n  \n  colnames(metadata)[which(colnames(metadata) == group)] &lt;- \"GroupCompvar\"\n  \n  phen &lt;- metadata %&gt;%\n    dplyr::arrange(GroupCompvar, Tumour_Stage, ProjectID)\n  phen$GroupCompvar &lt;- factor(phen$GroupCompvar, levels = group_names)\n  prof &lt;- profile[rownames(profile) %in% datsignif$FeatureID, \n                  pmatch(phen$SampleID, colnames(profile)), ] %&gt;%\n    as.matrix()\n  \n  project_id &lt;- unique(phen$ProjectID)\n  project_colors &lt;- c(\"#E69F00\", \"#56B4E9\")\n  names(project_colors) &lt;- project_id\n  \n  stage_id &lt;- unique(phen$Tumour_Stage)\n  stage_colors &lt;- c(\"#D51F26\", \"#272E6A\", \"#208A42\", \"#89288F\")\n  names(stage_colors) &lt;- stage_id  \n  \n  # scale prof\n  prof_scale &lt;- scale(prof, center = T, scale = T)\n  \n  pl &lt;- ComplexHeatmap::Heatmap(\n    mat = prof_scale,\n    col = circlize::colorRamp2(c(-3, 0, 3), c(\"blue\", \"white\", \"red\")),\n    top_annotation = top_anno,\n    cluster_columns = FALSE,\n    cluster_rows = TRUE,\n    show_row_names = FALSE,\n    show_column_names = FALSE,\n    column_split = phen$GroupCompvar,    \n    heatmap_legend_param = list(\n      legend_direction = \"vertical\", \n      legend_width = unit(6, \"cm\"),\n      title = \"Relative Abundance\"))\n  \n  return(pl)\n}",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>差异结果的热图</span>"
    ]
  },
  {
    "objectID": "different-heatmap.html#sec-different-heatmap-run",
    "href": "different-heatmap.html#sec-different-heatmap-run",
    "title": "13  差异结果的热图",
    "section": "\n13.4 热图",
    "text": "13.4 热图\n\n设置对应参数，运行get_heatmap\n\n\n\nDEG_heat &lt;- get_heatmap(\n  object = ExprSet, \n  datsignif = da_res_signif,\n  group = \"Group\",\n  group_names = grp_names,\n  group_colors = grp_colors)\n\nDEG_heat\n结果：热图展示了差异基因的表达状态\n\nX轴是样本ID；\nY轴是基因ID；",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>差异结果的热图</span>"
    ]
  },
  {
    "objectID": "different-heatmap.html#sec-different-heatmap-output",
    "href": "different-heatmap.html#sec-different-heatmap-output",
    "title": "13  差异结果的热图",
    "section": "\n13.5 输出结果",
    "text": "13.5 输出结果\n使用ggplotify::as.ggplot函数(Yu 2014)转换ComplexHeatmap::Heatmap函数(Gu, Eils, 和 Schlesner 2016)获得的热图。\n\nif (!dir.exists(\"./data/result/Figure\")) {\n  dir.create(\"./data/result/Figure\", recursive = TRUE)\n}\n\nggsave(\"./data/result/Figure/Fig2-B.pdf\", ggplotify::as.ggplot(DEG_heat), width = 12, height = 7, dpi = 600)",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>差异结果的热图</span>"
    ]
  },
  {
    "objectID": "different-heatmap.html#sec-different-heatmap-summary",
    "href": "different-heatmap.html#sec-different-heatmap-summary",
    "title": "13  差异结果的热图",
    "section": "\n13.6 总结",
    "text": "13.6 总结\n在成功获得差异基因的分析结果后，进一步提取了这些差异基因在每个样本中的表达值。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] grid      stats     graphics  grDevices datasets  utils     methods  \n[8] base     \n\nother attached packages:\n [1] ggplotify_0.1.2       circlize_0.4.16       ComplexHeatmap_2.18.0\n [4] Biobase_2.62.0        BiocGenerics_0.48.1   data.table_1.15.4    \n [7] lubridate_1.9.3       forcats_1.0.0         stringr_1.5.1        \n[10] dplyr_1.1.4           purrr_1.0.2           readr_2.1.5          \n[13] tidyr_1.3.1           tibble_3.2.1          ggplot2_3.5.1        \n[16] tidyverse_2.0.0      \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.5        shape_1.4.6.1       rjson_0.2.21       \n [4] xfun_0.43           htmlwidgets_1.6.4   GlobalOptions_0.1.2\n [7] tzdb_0.4.0          yulab.utils_0.1.4   vctrs_0.6.5        \n[10] tools_4.3.3         generics_0.1.3      stats4_4.3.3       \n[13] parallel_4.3.3      fansi_1.0.6         cluster_2.1.6      \n[16] pkgconfig_2.0.3     RColorBrewer_1.1-3  S4Vectors_0.40.2   \n[19] lifecycle_1.0.4     compiler_4.3.3      munsell_0.5.1      \n[22] codetools_0.2-19    clue_0.3-65         htmltools_0.5.8.1  \n[25] yaml_2.3.8          pillar_1.9.0        crayon_1.5.2       \n[28] cachem_1.0.8        iterators_1.0.14    foreach_1.5.2      \n[31] tidyselect_1.2.1    digest_0.6.35       stringi_1.8.4      \n[34] fastmap_1.1.1       colorspace_2.1-0    cli_3.6.2          \n[37] magrittr_2.0.3      utf8_1.2.4          withr_3.0.0        \n[40] scales_1.3.0        timechange_0.3.0    rmarkdown_2.26     \n[43] matrixStats_1.3.0   png_0.1-8           GetoptLong_1.0.5   \n[46] hms_1.1.3           memoise_2.0.1       evaluate_0.23      \n[49] knitr_1.46          IRanges_2.36.0      doParallel_1.0.17  \n[52] gridGraphics_0.5-1  rlang_1.1.3         glue_1.7.0         \n[55] BiocManager_1.30.23 renv_1.0.0          rstudioapi_0.16.0  \n[58] jsonlite_1.8.8      R6_2.5.1            fs_1.6.4           \n\n\n\n\n\n\nGu, Zuguang, Roland Eils, 和 Matthias Schlesner. 2016. 《Complex heatmaps reveal patterns and correlations in multidimensional genomic data》. Bioinformatics 32 (18): 2847–49.\n\n\nGu, Zuguang, Lei Gu, Roland Eils, Matthias Schlesner, 和 Benedikt Brors. 2014. 《\" Circlize\" implements and enhances circular visualization in R》.\n\n\nYu, Guangchuang. 2014. 《ggplotify: Convert Plot to ’grob’ or ’ggplot’ Object》. https://github.com/GuangchuangYu/ggplotify.",
    "crumbs": [
      "差异分析",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>差异结果的热图</span>"
    ]
  },
  {
    "objectID": "function-GOterm.html",
    "href": "function-GOterm.html",
    "title": "14  GO富集分析",
    "section": "",
    "text": "14.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(clusterProfiler)\nlibrary(org.Hs.eg.db)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>GO富集分析</span>"
    ]
  },
  {
    "objectID": "function-GOterm.html#sec-function-GOterm-importdata",
    "href": "function-GOterm.html#sec-function-GOterm-importdata",
    "title": "14  GO富集分析",
    "section": "\n14.2 导入数据",
    "text": "14.2 导入数据\n\n差异结果来自于 章节 11；\nExpressionSet来自于 章节 9。\n\n\nda_res &lt;- read.csv(\"./data/result/DA/HCC_Early_vs_Late_limma.csv\")\n\nExprSet &lt;- readRDS(\"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\")",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>GO富集分析</span>"
    ]
  },
  {
    "objectID": "function-GOterm.html#sec-function-GOterm-codes",
    "href": "function-GOterm.html#sec-function-GOterm-codes",
    "title": "14  GO富集分析",
    "section": "\n14.3 所需函数",
    "text": "14.3 所需函数\n\nget_DEGs获得不同类型的差异基因列表；\nget_ORA基于Over-Representative analysis (ORA)方法功能富集分析；\n使用clusterProfiler::enrichGO(Yu 等 2012)做GO分析。\n\n\nget_DEGs &lt;- function(\n    dat,\n    lg2fc_cutoff = 0.5,\n    pval_cutoff = 0.05,\n    qval_cutoff = 0.05) {\n  \n  # group_names\n  group_names &lt;- gsub(\"\\\\d+_\", \"\", unlist(strsplit(dat$Block[1], \" vs \")))\n  colnames(dat)[5] &lt;- \"lg2fc\" \n  colnames(dat)[6] &lt;- \"pval\"\n  colnames(dat)[7] &lt;- \"qval\"\n  \n  # enrichment by beta and Pvalue AdjustedPvalue\n  dat[which(dat$lg2fc &gt; lg2fc_cutoff & \n              dat$pval &lt; pval_cutoff & \n              dat$qval &lt; qval_cutoff),\n      \"EnrichedDir\"] &lt;- group_names[2]\n  dat[which(dat$lg2fc &lt; -lg2fc_cutoff & \n              dat$pval &lt; pval_cutoff & \n              dat$qval &lt; qval_cutoff),\n      \"EnrichedDir\"] &lt;- group_names[1]\n  dat[which(abs(dat$lg2fc) &lt;= lg2fc_cutoff | \n              dat$pval &gt;= pval_cutoff |\n              dat$qval &gt;= qval_cutoff),\n      \"EnrichedDir\"] &lt;- \"Nonsignif\"   \n  \n  # dat status\n  dat$EnrichedDir &lt;- factor(dat$EnrichedDir, \n                            levels = c(group_names[2], \"Nonsignif\", group_names[1]))  \n  df_status &lt;- table(dat$EnrichedDir) %&gt;% data.frame() %&gt;%\n    stats::setNames(c(\"Group\", \"Number\"))\n  grp1_number &lt;- with(df_status, df_status[Group %in% group_names[1], \"Number\"])\n  grp2_number &lt;- with(df_status, df_status[Group %in% group_names[2], \"Number\"])\n  nsf_number &lt;- with(df_status, df_status[Group %in% \"Nonsignif\", \"Number\"])\n  legend_label &lt;- c(paste0(group_names[1], \" (\", grp1_number, \")\"),\n                    paste0(\"Nonsignif\", \" (\", nsf_number, \")\"),\n                    paste0(group_names[2], \" (\", grp2_number, \")\"))\n  \n  res_up &lt;- dat_signif %&gt;% # enriched in 1st group\n    dplyr::filter(EnrichedDir == group_names[1]) %&gt;%\n    dplyr::mutate(Status = \"Up_regulated\")\n  \n  res_down &lt;- dat_signif %&gt;% # enriched in 2st group\n    dplyr::filter(EnrichedDir == group_names[2]) %&gt;%\n    dplyr::mutate(Status = \"Down_regulated\")\n  \n  res &lt;- list(all = dat_signif,\n              up = res_up,\n              down = res_down)\n  \n  return(res)\n}\n\nget_ORA &lt;- function(\n    genelist,\n    genetype = c(\"all\", \"up\", \"down\"),\n    ORAtype = c(\"GO\", \"KEGG\"),\n    showcase = 10,\n    group_names = grp_names) {\n  \n  res &lt;- list(fit = fit,\n              result = fit_result,\n              pl = pl)\n\n  return(res)\n}",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>GO富集分析</span>"
    ]
  },
  {
    "objectID": "function-GOterm.html#sec-function-GOterm-DEGs",
    "href": "function-GOterm.html#sec-function-GOterm-DEGs",
    "title": "14  GO富集分析",
    "section": "\n14.4 运行",
    "text": "14.4 运行\n\n设置对应参数，运行get_DEGs\n\n\n\ndf_DEGs &lt;- get_DEGs(dat = da_res)\n\nnames(df_DEGs)\n\n使用ORA方法计算所有差异基因的富集GO term结果\n\n\nAll_ORA_GO &lt;- get_ORA(\n    genelist = df_DEGs$all,\n    genetype = \"all\",\n    ORAtype = \"GO\",\n    showcase = 10)\n\nAll_ORA_GO$pl\n结果：该图片展示了基于基因本体论（Gene Ontology, GO）的生物信息学分析结果，主要关注细胞过程、分子功能和细胞组件的多个方面。分析结果显示，在肝细胞癌（HCC）相关的基因中，有几个关键的生物过程和分子功能显著富集。",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>GO富集分析</span>"
    ]
  },
  {
    "objectID": "function-GOterm.html#sec-function-GOterm-output",
    "href": "function-GOterm.html#sec-function-GOterm-output",
    "title": "14  GO富集分析",
    "section": "\n14.5 输出结果",
    "text": "14.5 输出结果\n\nif (!dir.exists(\"./data/result/Figure\")) {\n  dir.create(\"./data/result/Figure\", recursive = TRUE)\n}\n\nggsave(\"./data/result/Figure/Fig3-A.pdf\", All_ORA_GO$pl, width = 8, height = 6, dpi = 600)",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>GO富集分析</span>"
    ]
  },
  {
    "objectID": "function-GOterm.html#sec-function-GOterm-summary",
    "href": "function-GOterm.html#sec-function-GOterm-summary",
    "title": "14  GO富集分析",
    "section": "\n14.6 总结",
    "text": "14.6 总结\n通过进行GO（Gene Ontology）富集分析，能够深入理解差异基因在细胞内的功能角色，这一分析为后续关于肝细胞癌（HCC）的研究奠定了坚实的生物学基础。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices datasets  utils     methods  \n[8] base     \n\nother attached packages:\n [1] org.Hs.eg.db_3.18.0    AnnotationDbi_1.66.0   IRanges_2.36.0        \n [4] S4Vectors_0.40.2       Biobase_2.62.0         BiocGenerics_0.48.1   \n [7] clusterProfiler_4.10.1 lubridate_1.9.3        forcats_1.0.0         \n[10] stringr_1.5.1          dplyr_1.1.4            purrr_1.0.2           \n[13] readr_2.1.5            tidyr_1.3.1            tibble_3.2.1          \n[16] ggplot2_3.5.1          tidyverse_2.0.0       \n\nloaded via a namespace (and not attached):\n  [1] DBI_1.2.2               bitops_1.0-7            gson_0.1.0             \n  [4] shadowtext_0.1.3        gridExtra_2.3           rlang_1.1.3            \n  [7] magrittr_2.0.3          DOSE_3.28.2             compiler_4.3.3         \n [10] RSQLite_2.3.6           png_0.1-8               vctrs_0.6.5            \n [13] reshape2_1.4.4          pkgconfig_2.0.3         crayon_1.5.2           \n [16] fastmap_1.1.1           XVector_0.42.0          ggraph_2.2.1           \n [19] utf8_1.2.4              HDO.db_0.99.1           rmarkdown_2.26         \n [22] tzdb_0.4.0              enrichplot_1.22.0       bit_4.0.5              \n [25] xfun_0.43               zlibbioc_1.48.2         cachem_1.0.8           \n [28] aplot_0.2.2             GenomeInfoDb_1.38.8     jsonlite_1.8.8         \n [31] blob_1.2.4              BiocParallel_1.36.0     tweenr_2.0.3           \n [34] parallel_4.3.3          R6_2.5.1                RColorBrewer_1.1-3     \n [37] stringi_1.8.4           GOSemSim_2.28.1         Rcpp_1.0.12            \n [40] knitr_1.46              Matrix_1.6-5            splines_4.3.3          \n [43] igraph_2.0.3            timechange_0.3.0        tidyselect_1.2.1       \n [46] viridis_0.6.5           qvalue_2.34.0           rstudioapi_0.16.0      \n [49] yaml_2.3.8              codetools_0.2-19        lattice_0.22-6         \n [52] plyr_1.8.9              treeio_1.26.0           withr_3.0.0            \n [55] KEGGREST_1.42.0         evaluate_0.23           gridGraphics_0.5-1     \n [58] scatterpie_0.2.2        polyclip_1.10-6         Biostrings_2.70.3      \n [61] ggtree_3.10.1           pillar_1.9.0            BiocManager_1.30.23    \n [64] renv_1.0.0              ggfun_0.1.4             generics_0.1.3         \n [67] RCurl_1.98-1.14         hms_1.1.3               tidytree_0.4.6         \n [70] munsell_0.5.1           scales_1.3.0            glue_1.7.0             \n [73] lazyeval_0.2.2          tools_4.3.3             data.table_1.15.4      \n [76] fgsea_1.28.0            fs_1.6.4                graphlayouts_1.1.1     \n [79] fastmatch_1.1-4         tidygraph_1.3.1         cowplot_1.1.3          \n [82] grid_4.3.3              ape_5.8                 colorspace_2.1-0       \n [85] nlme_3.1-164            patchwork_1.2.0         GenomeInfoDbData_1.2.11\n [88] ggforce_0.4.2           cli_3.6.2               fansi_1.0.6            \n [91] viridisLite_0.4.2       gtable_0.3.5            yulab.utils_0.1.4      \n [94] digest_0.6.35           ggplotify_0.1.2         ggrepel_0.9.5          \n [97] htmlwidgets_1.6.4       farver_2.1.1            memoise_2.0.1          \n[100] htmltools_0.5.8.1       lifecycle_1.0.4         httr_1.4.7             \n[103] GO.db_3.19.1            bit64_4.0.5             MASS_7.3-60.0.1        \n\n\n\n\n\n\nYu, Guangchuang, Li-Gen Wang, Yanyan Han, 和 Qing-Yu He. 2012. 《clusterProfiler: an R package for comparing biological themes among gene clusters》. Omics: a journal of integrative biology 16 (5): 284–87.",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>GO富集分析</span>"
    ]
  },
  {
    "objectID": "function-KEGGpathway.html",
    "href": "function-KEGGpathway.html",
    "title": "15  KEGG通路富集分析",
    "section": "",
    "text": "15.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(clusterProfiler)\nlibrary(org.Hs.eg.db)\nlibrary(msigdbr)\nlibrary(massdatabase)\nlibrary(enrichplot)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>KEGG通路富集分析</span>"
    ]
  },
  {
    "objectID": "function-KEGGpathway.html#sec-function-KEGG-importdata",
    "href": "function-KEGGpathway.html#sec-function-KEGG-importdata",
    "title": "15  KEGG通路富集分析",
    "section": "\n15.2 导入数据",
    "text": "15.2 导入数据\n\n差异结果来自于 章节 11；\nExpressionSet来自于 章节 9。\n\n\nda_res &lt;- read.csv(\"./data/result/DA/HCC_Early_vs_Late_limma.csv\")\n\nExprSet &lt;- readRDS(\"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\")",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>KEGG通路富集分析</span>"
    ]
  },
  {
    "objectID": "function-KEGGpathway.html#sec-function-KEGG-codes",
    "href": "function-KEGGpathway.html#sec-function-KEGG-codes",
    "title": "15  KEGG通路富集分析",
    "section": "\n15.3 所需函数",
    "text": "15.3 所需函数\n\nget_KEGG_category获得KEGG pathway的不同层级关系表；\nget_GSEA基于GSEA方法功能富集分析；\n使用clusterProfiler::GSEA(Yu 等 2012)做GSEA分析；\n使用msigdbr::msigdbr(Dolgalev 2020)拿到基因和通路关系对应表。\n下载KEGG关系表的函数，它们均来自于massdatabase包(Shen 等 2022)。\n\n\nget_KEGG_category &lt;- function(\n    pathdir,\n    sleeptime = 2,\n    organ = \"hsa\") {\n\n  \n  KEGG_pathway_database &lt;- massdatabase::convert_kegg2metpath(\n    data = KEGG_data, \n    path = pathdir)    \n  \n  res &lt;- KEGG_relation %&gt;%\n    dplyr::group_by(pathID) %&gt;%\n    dplyr::mutate(category = unlist(strsplit(pathClass, \";\\\\s+\"))[1],\n                  subcategory = unlist(strsplit(pathClass, \";\\\\s+\"))[2]) %&gt;%\n    dplyr::ungroup() %&gt;%\n    dplyr::distinct() %&gt;%\n    dplyr::select(pathID, category, subcategory, pathName, Describtion)\n  \n  return(res)\n}\n\nget_GSEA &lt;- function(\n    genelist,\n    showcase = 10,\n    species_type = c(\"Mus musculus\", \"Homo sapiens\"),\n    pathway_type = c(\"C2\", \"CP:KEGG\"),\n    group_names = grp_names) {\n  \n  # KEGG table\n  if (!dir.exists(\"./data/result/Function\")) {\n    dir.create(\"./data/result/Function\", recursive = TRUE)\n  }\n  hsa_kegg_tab &lt;- get_KEGG_category(\n    pathdir = \"./data/result/Function/KEGG/hsa_KEGG\",\n    sleeptime = 2,\n    organ = \"hsa\") %&gt;%\n    dplyr::filter(!subcategory %in% \n       c(\"Drug resistance: antineoplastic\", \"Cardiovascular disease\",\n         \"Infectious disease: parasitic\", \"Neurodegenerative disease\",\n         \"Aging\", \"Cellular community - eukaryotes\", \"Infectious disease: bacterial\",\n         \"Cancer: specific types\"))\n  \n  genelist_new &lt;- genelist %&gt;%\n    dplyr::arrange(desc(logFC))\n  \n  inputgenes &lt;- genelist_new$logFC\n  names(inputgenes) &lt;- genelist_new$FeatureID\n  \n  # download background genes\n  kegg_df_cln &lt;- kegg_df %&gt;%\n    dplyr::inner_join(hsa_kegg_tab %&gt;%\n                        dplyr::select(category, subcategory, pathName),\n                      by = c(\"gs_description\" = \"pathName\"))\n  \n  # KEGG pathway (geneID)\n  fit &lt;- clusterProfiler::GSEA(\n    geneList = inputgenes,\n    pvalueCutoff = 0.05,\n    pAdjustMethod = \"BH\",\n    minGSSize = 1,\n    maxGSSize = 500,\n    TERM2GENE = dplyr::select(\n            kegg_df_cln,\n            gs_description,\n            gene_symbol),\n    #by = \"DOSE\",\n    #nPerm = 1000\n    by = \"fgsea\")\n    \n  fit_result &lt;- fit@result %&gt;%\n    as.data.frame() %&gt;%\n    dplyr::mutate(Order = 1:nrow(fit@result)) %&gt;%\n    dplyr::left_join(kegg_df_cln %&gt;%\n                      dplyr::select(gs_description, category, subcategory) %&gt;%\n                       dplyr::distinct(),\n                      by = c(\"ID\" = \"gs_description\")) %&gt;%\n    dplyr::rename(Count = setSize) %&gt;%\n    dplyr::mutate(enrichmentDir = ifelse(NES &gt; 0, group_names[1], group_names[2])) %&gt;%\n    dplyr::select(Order, ID, everything())\n    \n  plotdata &lt;- fit_result %&gt;%\n      dplyr::filter(!is.na(Description)) %&gt;%\n      dplyr::group_by(category) %&gt;%\n      dplyr::slice(1:showcase) %&gt;%\n      dplyr::ungroup() %&gt;%\n      dplyr::mutate(qvalue = as.numeric(qvalue),\n                    Count = as.numeric(Count),\n                    enrichmentScore = as.numeric(enrichmentScore)) %&gt;%\n      dplyr::mutate(ID = gsub(\"KEGG_\", \"\", ID),\n                    ID = tolower(ID)) %&gt;%\n      dplyr::arrange(desc(category), enrichmentScore)\n    \n  plotdata$Description &lt;- factor(plotdata$Description,\n                                    levels = unique(plotdata$Description))\n  plotdata$category &lt;- factor(plotdata$category)   \n  \n  res &lt;- list(fit = fit,\n              result = fit_result,\n              pl = pl)\n\n  return(res)\n}",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>KEGG通路富集分析</span>"
    ]
  },
  {
    "objectID": "function-KEGGpathway.html#sec-function-KEGG-DEGs",
    "href": "function-KEGGpathway.html#sec-function-KEGG-DEGs",
    "title": "15  KEGG通路富集分析",
    "section": "\n15.4 运行",
    "text": "15.4 运行\n\n使用GSEA方法计算所有差异基因的富集KEGG pathway结果\n\n\nif (file.exists(\"./data/result/Function/GSEA_res.RDS\")) {\n  GSEA_result &lt;- readRDS(\"./data/result/Function/GSEA_res.RDS\")  \n} else {\n  GSEA_result &lt;- get_GSEA(\n    genelist = da_res,\n    showcase = 10,\n    species_type = \"Homo sapiens\",\n    pathway_type = c(\"C2\", \"CP:KEGG\"))\n  \n  saveRDS(GSEA_result, \"./data/result/Function/GSEA_res.RDS\", compress = TRUE)\n}\n\nGSEA_result$pl\n结果：从图中，可以获得以下比较有用的知识：细胞周期（Cell cycle）和p53信号通路（p53 signaling pathway）在肝癌HCC中可能具有显著的影响。这两个过程与细胞的生长、增殖和凋亡紧密相关，对癌症的发生和发展至关重要。\n\n在Early分期富集的KEGG pathway\n\n\n# Tryptophan metabolism: 14\n# Butanoate metabolism: 18\n# Nitrogen metabolism: 44\n# One carbon pool by folate: 57\n\nenrich_early &lt;- enrichplot::gseaplot2(\n  GSEA_result$fit,\n  geneSetID = c(14, 18, 44, 57),\n  #pvalue_table = TRUE,\n  color = c(\"#D51F26\", \"#272E6A\", \"#208A42\", \"#89288F\"), \n  ES_geom = \"line\",\n  title = \"Enriched in the early stage of HCC\")\n\nenrich_early\n\n在Late分期富集的KEGG pathway\n\n\n# Cell cycle: 11\n# Mismatch repair: 30\n# p53 signaling pathway: 36\n# ECM-receptor interaction: 42\n\nenrich_late &lt;- enrichplot::gseaplot2(\n  GSEA_result$fit,\n  geneSetID = c(11, 30, 36, 42),\n  #pvalue_table = TRUE,\n  color = c(\"#faa818\", \"#41a30d\", \"#fbdf72\", \"#367d7d\"), \n  ES_geom = \"line\",\n  title = \"Enriched in the late stage of HCC\")\n\nenrich_late",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>KEGG通路富集分析</span>"
    ]
  },
  {
    "objectID": "function-KEGGpathway.html#sec-function-KEGG-new",
    "href": "function-KEGGpathway.html#sec-function-KEGG-new",
    "title": "15  KEGG通路富集分析",
    "section": "\n15.5 其他可视化方法",
    "text": "15.5 其他可视化方法\n通过GseaVis(Zhang 2022)R包在特定富集通路添加基因标签，展示表达状态。\n\nlibrary(GseaVis)\n\np53_gene &lt;- c(\"SFN\", \"SERPINE1\", \"CDK1\", \"CHEK1\", \"CCNB2\",\n            \"CCNB1\", \"IGFBP3\", \"GTSE1\", \"CDK4\", \"CCNE1\")\n\ngseaNb(object = GSEA_result$fit,\n       geneSetID = 'p53 signaling pathway',\n       addGene = p53_gene,       \n       # newGsea = TRUE,\n       # subPlot = 2,\n       addPval = TRUE,\n       pvalX = 0.6, pvalY = 0.8,\n       pCol = \"black\",\n       newHtCol = c(\"blue\",\"white\", \"red\"),\n       pHjust = 0)\n结果：富集结果增加了基因标签。",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>KEGG通路富集分析</span>"
    ]
  },
  {
    "objectID": "function-KEGGpathway.html#sec-function-KEGG-output",
    "href": "function-KEGGpathway.html#sec-function-KEGG-output",
    "title": "15  KEGG通路富集分析",
    "section": "\n15.6 输出结果",
    "text": "15.6 输出结果\n\nif (!dir.exists(\"./data/result/Figure\")) {\n  dir.create(\"./data/result/Figure\", recursive = TRUE)\n}\n\nggsave(\"./data/result/Figure/Fig3-B.pdf\", GSEA_result$pl, width = 8, height = 5, dpi = 600)\nggsave(\"./data/result/Figure/Fig3-C.pdf\", enrich_early, width = 5, height = 4, dpi = 600)\nggsave(\"./data/result/Figure/Fig3-D.pdf\", enrich_late, width = 5, height = 4, dpi = 600)",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>KEGG通路富集分析</span>"
    ]
  },
  {
    "objectID": "function-KEGGpathway.html#sec-function-KEGG-summary",
    "href": "function-KEGGpathway.html#sec-function-KEGG-summary",
    "title": "15  KEGG通路富集分析",
    "section": "\n15.7 总结",
    "text": "15.7 总结\nKEGG通路富集分析结果揭示在不同HCC癌症分期中，富集得到的通路也不一样。比如p53 signaling pathway只富集在癌症后期，而富集在前期的是Tryptophan metabolism等。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices datasets  utils     methods  \n[8] base     \n\nother attached packages:\n [1] enrichplot_1.22.0      MSnbase_2.28.1         ProtGenerics_1.34.0   \n [4] mzR_2.36.0             Rcpp_1.0.12            massdataset_1.0.29    \n [7] metid_1.2.30           metpath_1.0.8          magrittr_2.0.3        \n[10] masstools_1.0.13       massdatabase_1.0.10    msigdbr_7.5.1         \n[13] org.Hs.eg.db_3.18.0    AnnotationDbi_1.66.0   IRanges_2.36.0        \n[16] S4Vectors_0.40.2       Biobase_2.62.0         BiocGenerics_0.48.1   \n[19] clusterProfiler_4.10.1 lubridate_1.9.3        forcats_1.0.0         \n[22] stringr_1.5.1          dplyr_1.1.4            purrr_1.0.2           \n[25] readr_2.1.5            tidyr_1.3.1            tibble_3.2.1          \n[28] ggplot2_3.5.1          tidyverse_2.0.0       \n\nloaded via a namespace (and not attached):\n  [1] splines_4.3.3               bitops_1.0-7               \n  [3] ggplotify_0.1.2             cellranger_1.1.0           \n  [5] polyclip_1.10-6             preprocessCore_1.64.0      \n  [7] XML_3.99-0.16.1             lifecycle_1.0.4            \n  [9] doParallel_1.0.17           globals_0.16.3             \n [11] lattice_0.22-6              MASS_7.3-60.0.1            \n [13] plotly_4.10.4               openxlsx_4.2.5.2           \n [15] limma_3.58.1                rmarkdown_2.26             \n [17] yaml_2.3.8                  remotes_2.5.0              \n [19] zip_2.3.1                   cowplot_1.1.3              \n [21] MsCoreUtils_1.14.1          pbapply_1.7-2              \n [23] DBI_1.2.2                   RColorBrewer_1.1-3         \n [25] abind_1.4-5                 zlibbioc_1.48.2            \n [27] rvest_1.0.4                 GenomicRanges_1.54.1       \n [29] ggraph_2.2.1                RCurl_1.98-1.14            \n [31] yulab.utils_0.1.4           tweenr_2.0.3               \n [33] circlize_0.4.16             GenomeInfoDbData_1.2.11    \n [35] ggrepel_0.9.5               listenv_0.9.1              \n [37] tidytree_0.4.6              parallelly_1.37.1          \n [39] DelayedArray_0.28.0         ncdf4_1.22                 \n [41] codetools_0.2-19            xml2_1.3.6                 \n [43] DOSE_3.28.2                 ggforce_0.4.2              \n [45] shape_1.4.6.1               tidyselect_1.2.1           \n [47] aplot_0.2.2                 farver_2.1.1               \n [49] viridis_0.6.5               matrixStats_1.3.0          \n [51] jsonlite_1.8.8              GetoptLong_1.0.5           \n [53] tidygraph_1.3.1             iterators_1.0.14           \n [55] foreach_1.5.2               progress_1.2.3             \n [57] tools_4.3.3                 treeio_1.26.0              \n [59] stringdist_0.9.12           glue_1.7.0                 \n [61] SparseArray_1.2.4           gridExtra_2.3              \n [63] xfun_0.43                   MatrixGenerics_1.14.0      \n [65] qvalue_2.34.0               GenomeInfoDb_1.38.8        \n [67] withr_3.0.0                 BiocManager_1.30.23        \n [69] fastmap_1.1.1               fansi_1.0.6                \n [71] digest_0.6.35               timechange_0.3.0           \n [73] R6_2.5.1                    gridGraphics_0.5-1         \n [75] colorspace_2.1-0            GO.db_3.19.1               \n [77] RSQLite_2.3.6               utf8_1.2.4                 \n [79] generics_0.1.3              renv_1.0.0                 \n [81] data.table_1.15.4           prettyunits_1.2.0          \n [83] S4Arrays_1.2.1              graphlayouts_1.1.1         \n [85] httr_1.4.7                  htmlwidgets_1.6.4          \n [87] scatterpie_0.2.2            pkgconfig_2.0.3            \n [89] gtable_0.3.5                blob_1.2.4                 \n [91] ComplexHeatmap_2.18.0       impute_1.76.0              \n [93] XVector_0.42.0              furrr_0.3.1                \n [95] shadowtext_0.1.3            htmltools_0.5.8.1          \n [97] fgsea_1.28.0                MALDIquant_1.22.2          \n [99] clue_0.3-65                 scales_1.3.0               \n[101] png_0.1-8                   ggfun_0.1.4                \n[103] knitr_1.46                  rstudioapi_0.16.0          \n[105] rjson_0.2.21                tzdb_0.4.0                 \n[107] reshape2_1.4.4              nlme_3.1-164               \n[109] curl_5.2.1                  cachem_1.0.8               \n[111] GlobalOptions_0.1.2         parallel_4.3.3             \n[113] HDO.db_0.99.1               mzID_1.40.0                \n[115] vsn_3.70.0                  pillar_1.9.0               \n[117] grid_4.3.3                  vctrs_0.6.5                \n[119] pcaMethods_1.94.0           cluster_2.1.6              \n[121] evaluate_0.23               cli_3.6.2                  \n[123] compiler_4.3.3              rlang_1.1.3                \n[125] crayon_1.5.2                Rdisop_1.62.0              \n[127] affy_1.80.0                 plyr_1.8.9                 \n[129] fs_1.6.4                    stringi_1.8.4              \n[131] viridisLite_0.4.2           BiocParallel_1.36.0        \n[133] babelgene_22.9              munsell_0.5.1              \n[135] Biostrings_2.70.3           lazyeval_0.2.2             \n[137] GOSemSim_2.28.1             Matrix_1.6-5               \n[139] hms_1.1.3                   patchwork_1.2.0            \n[141] bit64_4.0.5                 future_1.33.2              \n[143] KEGGREST_1.42.0             statmod_1.5.0              \n[145] SummarizedExperiment_1.32.0 igraph_2.0.3               \n[147] memoise_2.0.1               affyio_1.72.0              \n[149] ggtree_3.10.1               fastmatch_1.1-4            \n[151] bit_4.0.5                   readxl_1.4.3               \n[153] ape_5.8                     gson_0.1.0                 \n\n\n\n\n\n\nDolgalev, Igor. 2020. 《msigdbr: MSigDB gene sets for multiple organisms in a tidy data format》. R package version 7 (1).\n\n\nShen, Xiaotao, Hong Yan, Chuchu Wang, Peng Gao, Caroline H Johnson, 和 Michael P Snyder. 2022. 《TidyMass an object-oriented reproducible analysis framework for LC–MS data》. Nature Communications 13 (1): 4365.\n\n\nYu, Guangchuang, Li-Gen Wang, Yanyan Han, 和 Qing-Yu He. 2012. 《clusterProfiler: an R package for comparing biological themes among gene clusters》. Omics: a journal of integrative biology 16 (5): 284–87.\n\n\nZhang, Jun. 2022. 《GseaVis: An Implement R Package to Visualize GSEA Results》. https://github.com/junjunlab/GseaVis.",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>KEGG通路富集分析</span>"
    ]
  },
  {
    "objectID": "function-ssgsea.html",
    "href": "function-ssgsea.html",
    "title": "16  ssGSEA富集分析",
    "section": "",
    "text": "16.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(msigdbr)\nlibrary(massdatabase)\nlibrary(GSVA)\nlibrary(ComplexHeatmap)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>ssGSEA富集分析</span>"
    ]
  },
  {
    "objectID": "function-ssgsea.html#sec-function-ssGSEA-importdata",
    "href": "function-ssgsea.html#sec-function-ssGSEA-importdata",
    "title": "16  ssGSEA富集分析",
    "section": "\n16.2 导入数据",
    "text": "16.2 导入数据\n\n\nExpressionSet来自于 章节 9。\n\n\nExprSet &lt;- readRDS(\"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\")",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>ssGSEA富集分析</span>"
    ]
  },
  {
    "objectID": "function-ssgsea.html#sec-function-ssGSEA-codes",
    "href": "function-ssgsea.html#sec-function-ssGSEA-codes",
    "title": "16  ssGSEA富集分析",
    "section": "\n16.3 所需函数",
    "text": "16.3 所需函数\n\nget_KEGG_category获得KEGG pathway的不同层级关系表；\nget_GSVA基于ssGSEA方法功能富集分析；\n使用GSVA::gsva(Hänzelmann, Castelo, 和 Guinney 2013)做ssGSEA分析；\n使用msigdbr::msigdbr(Dolgalev 2020)拿到基因和通路关系对应表。\n下载KEGG关系表的函数，它们均来自于massdatabase包(Shen 等 2022)。\n\n\nget_KEGG_category &lt;- function(\n    pathdir,\n    sleeptime = 2,\n    organ = \"hsa\") {\n  \n  KEGG_pathway_database &lt;- massdatabase::convert_kegg2metpath(\n    data = KEGG_data, \n    path = pathdir)    \n  \n  res &lt;- KEGG_relation %&gt;%\n    dplyr::group_by(pathID) %&gt;%\n    dplyr::mutate(category = unlist(strsplit(pathClass, \";\\\\s+\"))[1],\n                  subcategory = unlist(strsplit(pathClass, \";\\\\s+\"))[2]) %&gt;%\n    dplyr::ungroup() %&gt;%\n    dplyr::distinct() %&gt;%\n    dplyr::select(pathID, category, subcategory, pathName, Describtion)\n  \n  return(res)\n}\n\nget_GSVA &lt;- function(\n    exprset,\n    method = c(\"gsva\", \"ssgsea\"),\n    showcase = 10,\n    species_type = c(\"Mus musculus\", \"Homo sapiens\", \"zscore\", \"plage\"),\n    pathway_type = c(\"C2\", \"CP:KEGG\"),\n    kegg_relation = hsa_KEGG_table) {\n  \n  # download background genes\n  kegg_df_list &lt;- base::split(\n    kegg_df$gene_symbol,\n    kegg_df$gs_name)\n  \n  # profile\n  phenotype &lt;- Biobase::pData(exprset) %&gt;%\n    as.data.frame()\n  profile &lt;- Biobase::exprs(exprset) %&gt;%\n    as.data.frame() %&gt;%\n    as.matrix()\n  \n  # KEGG pathway (geneID)\n  fit &lt;- GSVA::gsva(\n    expr = profile,\n    gset.idx.list = kegg_df_list,\n    method = method,\n    kcdf = \"Gaussian\",\n    min.sz = 15,\n    max.sz = 500,\n    mx.diff = TRUE,\n    verbose = FALSE)\n    \n  fit_result &lt;- phenotype %&gt;%\n    dplyr::inner_join(fit %&gt;%\n        t() %&gt;%\n        as.data.frame() %&gt;%\n        tibble::rownames_to_column(\"SampleID\"),\n                      by = c(\"SampleID\"))\n  \n  fit_result_plot &lt;- fit_result %&gt;%\n    # dplyr::group_by(ProjectID, Group) %&gt;%\n    # dplyr::slice(1:20) %&gt;%\n    # dplyr::ungroup() %&gt;%\n    tibble::column_to_rownames(\"SampleID\") %&gt;%\n    dplyr::arrange(Group, Tumour_Stage)\n  \n  pl_temp &lt;- ComplexHeatmap::Heatmap(\n    mat = plotdata,\n    top_annotation = top_anno,\n    left_annotation = left_anno,\n    cluster_columns = FALSE, # TRUE\n    cluster_rows = TRUE,\n    show_row_names = TRUE,\n    show_column_names = FALSE,\n    heatmap_legend_param = list(\n      legend_direction = \"horizontal\", \n      legend_width = unit(6, \"cm\"),\n      title = \"Relative Abundance\")\n  )\n  \n  pl &lt;- draw(pl_temp, \n             heatmap_legend_side = \"left\", \n             annotation_legend_side = \"bottom\")\n  \n  res &lt;- list(fit = fit,\n              result = fit_result,\n              pl = pl)\n\n  return(res)\n}",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>ssGSEA富集分析</span>"
    ]
  },
  {
    "objectID": "function-ssgsea.html#sec-function-ssGSEA-DEGs",
    "href": "function-ssgsea.html#sec-function-ssGSEA-DEGs",
    "title": "16  ssGSEA富集分析",
    "section": "\n16.4 运行",
    "text": "16.4 运行\n\nKEGG关系表\n\nhsa_KEGG_table &lt;- get_KEGG_category(\n  pathdir = \"./data/result/Function/KEGG/hsa_KEGG\",\n  sleeptime = 2,\n  organ = \"hsa\") %&gt;%\n  dplyr::filter(!subcategory %in% \n       c(\"Drug resistance: antineoplastic\", \"Cardiovascular disease\",\n         \"Infectious disease: parasitic\", \"Neurodegenerative disease\",\n         \"Aging\", \"Cellular community - eukaryotes\", \"Infectious disease: bacterial\",\n         \"Cancer: specific types\", \"Immune disease\"))\n\nhead(hsa_KEGG_table)\n\n使用ssGSEA方法计算KEGG pathway在组间差异结果\n\n\nGSVA_result &lt;- get_GSVA(\n  exprset = ExprSet,\n  method = \"gsva\",\n  showcase = 20,\n  species_type = \"Homo sapiens\",\n  pathway_type = c(\"C2\", \"CP:KEGG\"),\n  kegg_relation = hsa_KEGG_table)\n结果：从图中没有看到在Group组间非常明显的KEGG通路，但能看到Arginine and proline metabolism相对Late Stage而言，Early Stage的颜色偏向红色也即是丰度更高一些。",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>ssGSEA富集分析</span>"
    ]
  },
  {
    "objectID": "function-ssgsea.html#sec-function-ssGSEA-output",
    "href": "function-ssgsea.html#sec-function-ssGSEA-output",
    "title": "16  ssGSEA富集分析",
    "section": "\n16.5 输出结果",
    "text": "16.5 输出结果\n\nif (!dir.exists(\"./data/result/Figure\")) {\n  dir.create(\"./data/result/Figure\", recursive = TRUE)\n}\n\npdf(\"./data/result/Figure/SFig2.pdf\", width = 12, height = 6)\nprint(GSVA_result$pl)\ndev.off()",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>ssGSEA富集分析</span>"
    ]
  },
  {
    "objectID": "function-ssgsea.html#sec-function-ssGSEA-summary",
    "href": "function-ssgsea.html#sec-function-ssGSEA-summary",
    "title": "16  ssGSEA富集分析",
    "section": "\n16.6 总结",
    "text": "16.6 总结\n在生物学和医学研究中，为了深入了解细胞或组织在特定条件下的功能状态，单样本富集分析（ssGSEA）成为了一种强有力的工具。ssGSEA特别适用于单个样本的富集分析，通过预先定义的参考基因集合（如脂肪酸代谢、糖代谢以及免疫等相关基因集），将基因表达谱数据与这些集合进行映射，进而计算出参考基因集在单样本中的功能表达值。这种方法为研究者提供了在单个样本水平上评估特定生物功能的可能性，对于深入理解生物学过程具有重要意义。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] grid      stats4    stats     graphics  grDevices datasets  utils    \n[8] methods   base     \n\nother attached packages:\n [1] ComplexHeatmap_2.18.0 GSVA_1.50.5           MSnbase_2.28.1       \n [4] ProtGenerics_1.34.0   S4Vectors_0.40.2      mzR_2.36.0           \n [7] Rcpp_1.0.12           Biobase_2.62.0        BiocGenerics_0.48.1  \n[10] massdataset_1.0.29    metid_1.2.30          metpath_1.0.8        \n[13] magrittr_2.0.3        masstools_1.0.13      massdatabase_1.0.10  \n[16] msigdbr_7.5.1         lubridate_1.9.3       forcats_1.0.0        \n[19] stringr_1.5.1         dplyr_1.1.4           purrr_1.0.2          \n[22] readr_2.1.5           tidyr_1.3.1           tibble_3.2.1         \n[25] ggplot2_3.5.1         tidyverse_2.0.0      \n\nloaded via a namespace (and not attached):\n  [1] bitops_1.0-7                cellranger_1.1.0           \n  [3] polyclip_1.10-6             preprocessCore_1.64.0      \n  [5] graph_1.80.0                XML_3.99-0.16.1            \n  [7] lifecycle_1.0.4             doParallel_1.0.17          \n  [9] globals_0.16.3              lattice_0.22-6             \n [11] MASS_7.3-60.0.1             openxlsx_4.2.5.2           \n [13] limma_3.58.1                plotly_4.10.4              \n [15] rmarkdown_2.26              yaml_2.3.8                 \n [17] remotes_2.5.0               zip_2.3.1                  \n [19] MsCoreUtils_1.14.1          pbapply_1.7-2              \n [21] DBI_1.2.2                   RColorBrewer_1.1-3         \n [23] abind_1.4-5                 zlibbioc_1.48.2            \n [25] rvest_1.0.4                 GenomicRanges_1.54.1       \n [27] ggraph_2.2.1                RCurl_1.98-1.14            \n [29] tweenr_2.0.3                circlize_0.4.16            \n [31] GenomeInfoDbData_1.2.11     IRanges_2.36.0             \n [33] ggrepel_0.9.5               irlba_2.3.5.1              \n [35] listenv_0.9.1               annotate_1.80.0            \n [37] parallelly_1.37.1           DelayedMatrixStats_1.24.0  \n [39] ncdf4_1.22                  codetools_0.2-19           \n [41] DelayedArray_0.28.0         xml2_1.3.6                 \n [43] ggforce_0.4.2               tidyselect_1.2.1           \n [45] shape_1.4.6.1               farver_2.1.1               \n [47] ScaledMatrix_1.10.0         viridis_0.6.5              \n [49] matrixStats_1.3.0           jsonlite_1.8.8             \n [51] GetoptLong_1.0.5            tidygraph_1.3.1            \n [53] iterators_1.0.14            foreach_1.5.2              \n [55] tools_4.3.3                 progress_1.2.3             \n [57] stringdist_0.9.12           glue_1.7.0                 \n [59] gridExtra_2.3               SparseArray_1.2.4          \n [61] xfun_0.43                   MatrixGenerics_1.14.0      \n [63] GenomeInfoDb_1.38.8         HDF5Array_1.30.1           \n [65] withr_3.0.0                 BiocManager_1.30.23        \n [67] fastmap_1.1.1               rhdf5filters_1.14.1        \n [69] fansi_1.0.6                 rsvd_1.0.5                 \n [71] digest_0.6.35               timechange_0.3.0           \n [73] R6_2.5.1                    colorspace_2.1-0           \n [75] RSQLite_2.3.6               utf8_1.2.4                 \n [77] generics_0.1.3              renv_1.0.0                 \n [79] data.table_1.15.4           prettyunits_1.2.0          \n [81] graphlayouts_1.1.1          httr_1.4.7                 \n [83] htmlwidgets_1.6.4           S4Arrays_1.2.1             \n [85] pkgconfig_2.0.3             gtable_0.3.5               \n [87] blob_1.2.4                  impute_1.76.0              \n [89] SingleCellExperiment_1.24.0 XVector_0.42.0             \n [91] furrr_0.3.1                 htmltools_0.5.8.1          \n [93] MALDIquant_1.22.2           GSEABase_1.64.0            \n [95] clue_0.3-65                 scales_1.3.0               \n [97] png_0.1-8                   knitr_1.46                 \n [99] rstudioapi_0.16.0           tzdb_0.4.0                 \n[101] rjson_0.2.21                curl_5.2.1                 \n[103] rhdf5_2.46.1                cachem_1.0.8               \n[105] GlobalOptions_0.1.2         parallel_4.3.3             \n[107] AnnotationDbi_1.66.0        mzID_1.40.0                \n[109] vsn_3.70.0                  pillar_1.9.0               \n[111] vctrs_0.6.5                 pcaMethods_1.94.0          \n[113] BiocSingular_1.18.0         beachmat_2.18.1            \n[115] xtable_1.8-4                cluster_2.1.6              \n[117] evaluate_0.23               cli_3.6.2                  \n[119] compiler_4.3.3              rlang_1.1.3                \n[121] crayon_1.5.2                Rdisop_1.62.0              \n[123] affy_1.80.0                 plyr_1.8.9                 \n[125] stringi_1.8.4               viridisLite_0.4.2          \n[127] BiocParallel_1.36.0         babelgene_22.9             \n[129] munsell_0.5.1               Biostrings_2.70.3          \n[131] lazyeval_0.2.2              Matrix_1.6-5               \n[133] hms_1.1.3                   sparseMatrixStats_1.14.0   \n[135] bit64_4.0.5                 future_1.33.2              \n[137] Rhdf5lib_1.24.2             KEGGREST_1.42.0            \n[139] statmod_1.5.0               SummarizedExperiment_1.32.0\n[141] igraph_2.0.3                memoise_2.0.1              \n[143] affyio_1.72.0               bit_4.0.5                  \n[145] readxl_1.4.3               \n\n\n\n\n\n\nDolgalev, Igor. 2020. 《msigdbr: MSigDB gene sets for multiple organisms in a tidy data format》. R package version 7 (1).\n\n\nHänzelmann, Sonja, Robert Castelo, 和 Justin Guinney. 2013. 《GSVA: gene set variation analysis for microarray and RNA-seq data》. BMC bioinformatics 14: 1–15.\n\n\nShen, Xiaotao, Hong Yan, Chuchu Wang, Peng Gao, Caroline H Johnson, 和 Michael P Snyder. 2022. 《TidyMass an object-oriented reproducible analysis framework for LC–MS data》. Nature Communications 13 (1): 4365.",
    "crumbs": [
      "功能分析",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>ssGSEA富集分析</span>"
    ]
  },
  {
    "objectID": "infiltration-ImmuCellAI.html",
    "href": "infiltration-ImmuCellAI.html",
    "title": "17  免疫浸润细胞",
    "section": "",
    "text": "17.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(Biobase)\nlibrary(immunedeconv)\nlibrary(ImmuCellAI)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>免疫浸润细胞</span>"
    ]
  },
  {
    "objectID": "infiltration-ImmuCellAI.html#sec-infiltration-importdata",
    "href": "infiltration-ImmuCellAI.html#sec-infiltration-importdata",
    "title": "17  免疫浸润细胞",
    "section": "\n17.2 导入数据",
    "text": "17.2 导入数据\n\n\nExpressionSet来自于 章节 9。\n\n\nExprSet &lt;- readRDS(\"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\")",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>免疫浸润细胞</span>"
    ]
  },
  {
    "objectID": "infiltration-ImmuCellAI.html#sec-infiltration-codes",
    "href": "infiltration-ImmuCellAI.html#sec-infiltration-codes",
    "title": "17  免疫浸润细胞",
    "section": "\n17.3 所需函数",
    "text": "17.3 所需函数\n\nget_ImmuneCell获得免疫细胞的相对丰度表；\n使用immunedeconv::deconvolute(Sturm, Finotello, 和 List 2020)反卷积分析。\n\n\nget_ImmuneCell &lt;- function(\n  exprset,\n  method = c(\"mcp_counter\", \"epic\", \"quantiseq\", \n             \"xcell\", \"cibersort\", \"cibersort_abs\",\n             \"timer\", \"consensus_tme\", \"abis\", \n             \"estimate\", \"ImmuCellAI\")) {\n  \n  profile &lt;- Biobase::exprs(exprset)\n  metadata &lt;- Biobase::pData(exprset)\n  \n  if (any(method == \"cibersort\", method == \"cibersort_abs\")) {\n    immunedeconv::set_cibersort_binary(\"./data/result/ImmuneCell/CIBERSORT.R\")\n    immunedeconv::set_cibersort_mat(\"./data/result/ImmuneCell/LM22.txt\")\n  }\n\n  colnames(fit)[1] &lt;- \"CellType\"\n  \n  print(fit$CellType)\n  \n  res &lt;- metadata %&gt;%\n    dplyr::inner_join(fit %&gt;%\n                        tibble::column_to_rownames(\"CellType\") %&gt;%\n                        t() %&gt;% as.data.frame() %&gt;%\n                        tibble::rownames_to_column(\"SampleID\"),\n                      by = \"SampleID\")\n    \n  return(res)\n}",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>免疫浸润细胞</span>"
    ]
  },
  {
    "objectID": "infiltration-ImmuCellAI.html#sec-infiltration-run",
    "href": "infiltration-ImmuCellAI.html#sec-infiltration-run",
    "title": "17  免疫浸润细胞",
    "section": "\n17.4 运行ImmuCellAI",
    "text": "17.4 运行ImmuCellAI\nImmuCellAI（Immune Cell Abundance Identifier）(Miao 等 2020)是一个免疫浸润计算工具，用于从基因表达数据集（包括RNA-Seq和芯片数据）中估计24种免疫细胞的丰度。这24种免疫细胞由18种T细胞亚型和6种其他免疫细胞组成，包括B细胞、NK细胞、单核细胞、巨噬细胞、中性粒细胞和DC细胞。\nImmuCellAI可用于估计不同人群免疫细胞浸润的差异，以及预测患者对免疫检查点阻断疗法的反应。此外，ImmuCellAI还可用于建立免疫治疗反应预测模型，并且已经过测试，发现其模型精度在0.80到0.91之间。这表明ImmuCellAI在肿瘤免疫浸润评估和免疫治疗反应预测中具有强大而独特的功能。\n在使用ImmuCellAI时，用户需要准备全编码蛋白的表达谱基因数据，并选择数据类型和是否预测免疫治疗响应。运行后，用户可以直接下载结果。此外，ImmuCellAI支持RNA-seq和芯片两种数据的上传，并且可以通过每一个免疫细胞特征基因的表达来进行免疫浸润评分。\n注意：直接使用remotes::install_github(\"lydiaMyr/ImmuCellAI@main\")安装是有问题的，建议下载仓库提供的ImmuCellAI_0.1.0.tar.gz本地安装\n\nIcell_ImmuCellAI &lt;- get_ImmuneCell(\n  exprset = ExprSet,\n  method = \"ImmuCellAI\") \n  \nhead(Icell_ImmuCellAI)\nIcell_ImmuCellAI &lt;- get_ImmuneCell(\n  exprset = ExprSet,\n  method = \"ImmuCellAI\") \n  \nhead(Icell_ImmuCellAI)\n结果：获得24种免疫细胞的丰度表达谱。",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>免疫浸润细胞</span>"
    ]
  },
  {
    "objectID": "infiltration-ImmuCellAI.html#sec-infiltration-methods",
    "href": "infiltration-ImmuCellAI.html#sec-infiltration-methods",
    "title": "17  免疫浸润细胞",
    "section": "\n17.5 其他免疫浸润方法",
    "text": "17.5 其他免疫浸润方法\n\nCIBERSORT算法的原理基于一个核心假设：在复杂组织中，细胞类型特异的基因表达模式可以被用来区分不同的细胞类型。具体而言，CIBERSORT通过比较待测样本的基因表达模式与已知细胞类型的基因表达模式，来推断待测样本中各种细胞类型的相对比例。\nquanTIseq免疫浸润方法的原理主要基于反卷积算法。这种方法利用bulk samples的RNA-seq数据（即包含多种细胞类型的混合样本的基因表达数据），通过计算每个免疫细胞类型的特异性基因表达特征，来预测肿瘤样本中不同种类免疫细胞的相对丰度或组成。\nESTIMATE免疫浸润方法是一种基于基因表达数据预测恶性肿瘤组织中间质细胞和免疫细胞含量的方法。其原理主要基于单个样本基因集合的富集分析（ssGSEA）。在ESTIMATE方法中，基因集合的富集分析是关键步骤。它基于预先定义的基因集合（如与基质或免疫细胞相关的基因集合），通过计算样本中这些基因的表达水平，来评估特定细胞类型在样本中的富集程度。\n\n实现的R代码\n# cibersort\nIcell_cibersort &lt;- get_ImmuneCell(\n  exprset = ExprSet,\n  method = \"cibersort\") \n  \n# quantiseq\nIcell_quantiseq &lt;- get_ImmuneCell(\n  exprset = ExprSet,\n  method = \"quantiseq\") \n  \n# estimate\nIcell_estimate &lt;- get_ImmuneCell(\n  exprset = ExprSet,\n  method = \"estimate\")",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>免疫浸润细胞</span>"
    ]
  },
  {
    "objectID": "infiltration-ImmuCellAI.html#sec-infiltration-output",
    "href": "infiltration-ImmuCellAI.html#sec-infiltration-output",
    "title": "17  免疫浸润细胞",
    "section": "\n17.6 输出结果",
    "text": "17.6 输出结果\n\nif (!dir.exists(\"./data/result/ImmuneCell/\")) {\n  dir.create(\"./data/result/ImmuneCell/\", recursive = TRUE)\n}\n\nwrite.csv(Icell_ImmuCellAI, \"./data/result/ImmuneCell/HCC_ImmuneCell_ImmuCellAI.csv\", row.names = F)",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>免疫浸润细胞</span>"
    ]
  },
  {
    "objectID": "infiltration-ImmuCellAI.html#sec-infiltration-summary",
    "href": "infiltration-ImmuCellAI.html#sec-infiltration-summary",
    "title": "17  免疫浸润细胞",
    "section": "\n17.7 总结",
    "text": "17.7 总结\n免疫浸润分析在肿瘤学研究中占据重要位置，其目的在于探究肿瘤微环境中不同免疫细胞类型的分布和状态，以及它们与肿瘤细胞之间的相互作用。这种分析有助于更深入地理解肿瘤免疫微环境的复杂性，并为肿瘤免疫治疗提供重要的参考信息。\n为了实现免疫浸润分析，科学家们开发了多种算法，这些算法基于不同的原理来预测肿瘤样本中各种免疫细胞的相对丰度。其中，反卷积算法是一种重要的方法，它通过利用bulk samples的RNA-seq数据，结合已知的免疫细胞特异性基因表达特征，来估计不同免疫细胞类型在肿瘤样本中的含量。\n在本研究中，采用了ImmuCellAI(Miao 等 2020)算法对转录组数据进行了反卷积分析。通过运行该算法，成功得到了每个肿瘤样本中24种免疫细胞的相对丰度结果。这些结果为进一步探究肿瘤免疫微环境的复杂性、理解免疫细胞与肿瘤细胞之间的相互作用提供了宝贵的数据支持。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ImmuCellAI_0.1.0    quadprog_1.5-8      pracma_2.4.4       \n [4] e1071_1.7-14        gridExtra_2.3       GSVA_1.50.5        \n [7] immunedeconv_2.1.0  EPIC_1.1.7          Biobase_2.62.0     \n[10] BiocGenerics_0.48.1 lubridate_1.9.3     forcats_1.0.0      \n[13] stringr_1.5.1       dplyr_1.1.4         purrr_1.0.2        \n[16] readr_2.1.5         tidyr_1.3.1         tibble_3.2.1       \n[19] ggplot2_3.5.1       tidyverse_2.0.0    \n\nloaded via a namespace (and not attached):\n  [1] rstudioapi_0.16.0           jsonlite_1.8.8             \n  [3] magrittr_2.0.3              rmarkdown_2.26             \n  [5] zlibbioc_1.48.2             vctrs_0.6.5                \n  [7] memoise_2.0.1               DelayedMatrixStats_1.24.0  \n  [9] RCurl_1.98-1.14             htmltools_0.5.8.1          \n [11] S4Arrays_1.2.1              progress_1.2.3             \n [13] curl_5.2.1                  cellranger_1.1.0           \n [15] Rhdf5lib_1.24.2             SparseArray_1.2.4          \n [17] rhdf5_2.46.1                htmlwidgets_1.6.4          \n [19] cachem_1.0.8                lifecycle_1.0.4            \n [21] ComICS_1.0.4                pkgconfig_2.0.3            \n [23] rsvd_1.0.5                  Matrix_1.6-5               \n [25] R6_2.5.1                    fastmap_1.1.1              \n [27] GenomeInfoDbData_1.2.11     MatrixGenerics_1.14.0      \n [29] digest_0.6.35               colorspace_2.1-0           \n [31] AnnotationDbi_1.66.0        S4Vectors_0.40.2           \n [33] irlba_2.3.5.1               GenomicRanges_1.54.1       \n [35] RSQLite_2.3.6               beachmat_2.18.1            \n [37] filelock_1.0.3              mMCPcounter_1.1.0          \n [39] testit_0.13                 fansi_1.0.6                \n [41] timechange_0.3.0            httr_1.4.7                 \n [43] abind_1.4-5                 mgcv_1.9-1                 \n [45] compiler_4.3.3              proxy_0.4-27               \n [47] bit64_4.0.5                 withr_3.0.0                \n [49] BiocParallel_1.36.0         DBI_1.2.2                  \n [51] HDF5Array_1.30.1            biomaRt_2.58.2             \n [53] MASS_7.3-60.0.1             rappdirs_0.3.3             \n [55] DelayedArray_0.28.0         tools_4.3.3                \n [57] glue_1.7.0                  nlme_3.1-164               \n [59] rhdf5filters_1.14.1         grid_4.3.3                 \n [61] generics_0.1.3              sva_3.50.0                 \n [63] gtable_0.3.5                tzdb_0.4.0                 \n [65] class_7.3-22                preprocessCore_1.64.0      \n [67] hms_1.1.3                   BiocSingular_1.18.0        \n [69] ScaledMatrix_1.10.0         xml2_1.3.6                 \n [71] utf8_1.2.4                  XVector_0.42.0             \n [73] pillar_1.9.0                limma_3.58.1               \n [75] genefilter_1.84.0           splines_4.3.3              \n [77] BiocFileCache_2.10.2        lattice_0.22-6             \n [79] renv_1.0.0                  survival_3.7-0             \n [81] bit_4.0.5                   annotate_1.80.0            \n [83] tidyselect_1.2.1            SingleCellExperiment_1.24.0\n [85] locfit_1.5-9.9              Biostrings_2.70.3          \n [87] knitr_1.46                  IRanges_2.36.0             \n [89] edgeR_4.0.16                SummarizedExperiment_1.32.0\n [91] stats4_4.3.3                xfun_0.43                  \n [93] statmod_1.5.0               matrixStats_1.3.0          \n [95] stringi_1.8.4               yaml_2.3.8                 \n [97] evaluate_0.23               codetools_0.2-19           \n [99] data.tree_1.1.0             BiocManager_1.30.23        \n[101] graph_1.80.0                cli_3.6.2                  \n[103] xtable_1.8-4                munsell_0.5.1              \n[105] Rcpp_1.0.12                 GenomeInfoDb_1.38.8        \n[107] readxl_1.4.3                dbplyr_2.5.0               \n[109] png_0.1-8                   XML_3.99-0.16.1            \n[111] parallel_4.3.3              blob_1.2.4                 \n[113] prettyunits_1.2.0           sparseMatrixStats_1.14.0   \n[115] bitops_1.0-7                GSEABase_1.64.0            \n[117] scales_1.3.0                crayon_1.5.2               \n[119] rlang_1.1.3                 KEGGREST_1.42.0            \n\n\n\n\n\n\nMiao, Ya-Ru, Qiong Zhang, Qian Lei, Mei Luo, Gui-Yan Xie, Hongxiang Wang, 和 An-Yuan Guo. 2020. 《ImmuCellAI: a unique method for comprehensive T-cell subsets abundance prediction and its application in cancer immunotherapy》. Advanced science 7 (7): 1902880.\n\n\nSturm, Gregor, Francesca Finotello, 和 Markus List. 2020. 《Immunedeconv: an R package for unified access to computational methods for estimating immune cell fractions from bulk RNA-sequencing data》. Bioinformatics for cancer immunotherapy: methods and protocols, 223–32.",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>免疫浸润细胞</span>"
    ]
  },
  {
    "objectID": "infiltration-Analysis.html",
    "href": "infiltration-Analysis.html",
    "title": "18  免疫浸润分析",
    "section": "",
    "text": "18.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(ggpubr)\nlibrary(ggplotify)\nlibrary(corrplot)\nlibrary(pheatmap)\nlibrary(RColorBrewer)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>免疫浸润分析</span>"
    ]
  },
  {
    "objectID": "infiltration-Analysis.html#sec-infil-analysis-importdata",
    "href": "infiltration-Analysis.html#sec-infil-analysis-importdata",
    "title": "18  免疫浸润分析",
    "section": "\n18.2 导入数据",
    "text": "18.2 导入数据\n\n\nImmueCell来自于 章节 17。\n\n\nImmueCell &lt;- read.csv(\"./data/result/ImmuneCell/HCC_ImmuneCell_ImmuCellAI.csv\")",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>免疫浸润分析</span>"
    ]
  },
  {
    "objectID": "infiltration-Analysis.html#sec-infil-analysis-codes",
    "href": "infiltration-Analysis.html#sec-infil-analysis-codes",
    "title": "18  免疫浸润分析",
    "section": "\n18.3 所需函数",
    "text": "18.3 所需函数\n\nget_plot获得数据分析可视化图；\n\n通过plotType参数选择不同的图形。\n\nboxplot（箱线图）：一种用于显示一组数据分散情况资料的统计图。因形状如箱子而得名，又称为箱型图、盒须图或盒式图。箱线图通过绘制数据的中位数（Q2）、四分位数（Q1和Q3）、异常值（如有）等信息，可以直观地展示数据的分布特征。\nviolin（小提琴图）：小提琴图（Violin Plot）是一种用于显示数据分布及其概率密度的图表。这种图表结合了箱形图和密度图的特征，主要用来显示数据的分布形状。在小提琴图中，中间的黑色粗线条表示四分位数的范围，从其上延伸出来的细黑线表示数据的范围，两端为最大值和最小值，而白色点则为中位数。与箱形图相比，小提琴图除了能显示上述的统计数据外，还能更直观地展示数据的整体分布，尤其是在数据量非常大时，小提琴图特别适用。\nstackedbar（堆积图）：堆积图（Stacked Chart）或堆积条形图（Stacked Bar Chart）、堆积柱状图（Stacked Column Chart）以及堆积面积图（Stacked Area Chart）等是数据可视化中常用的图表类型，它们通过堆叠不同类别的数据来展示数据之间的总量和构成关系\nheatmap（热图）：热图是一种数据可视化工具，通过颜色的深浅来表示数据的值或密度。它可以直观地展示数据的分布和变化情况，帮助人们更好地理解数据。\ncorrplot（相关性矩阵图）：相关性矩阵图（Correlation Matrix Plot）是一种用于展示数据集中不同变量之间相关性的可视化工具。它通过矩阵的形式，将每对变量之间的相关性系数以数值或颜色的方式表示出来，从而可以直观地看出哪些变量之间存在较强的相关性，以及这些相关性的正负方向。\n\n\n\nget_plot &lt;- function(\n    object,\n    plabel = c(\"p.signif\", \"p.format\"),\n    plotType = c(\"boxplot\", \"violin\", \n                 \"stackedbar\", \"heatmap\", \"corrplot\"),\n    group,\n    group_names = grp_names,\n    group_colors = grp_colors,\n    plotData = TRUE) {\n  \n  colnames(object)[which(colnames(object) == group)] &lt;- \"GroupCompvar\"\n  \n  object &lt;- object %&gt;%\n    dplyr::arrange(GroupCompvar, Tumour_Stage)\n  object$GroupCompvar &lt;- factor(object$GroupCompvar, levels = group_names)\n  \n  phenotype &lt;- object %&gt;%\n    dplyr::select(1:8)\n  \n  profile &lt;- object %&gt;%\n    dplyr::select(-c(2:8)) %&gt;%\n    tibble::column_to_rownames(\"SampleID\") %&gt;%\n    dplyr::select(-all_of(c(\"Effector_memory\", \"Gamma_delta\", \n                            \"Central_memory\")))\n  \n  dat &lt;- profile[, colSums(profile) &gt; 0]\n  \n  if (!all(rownames(dat) == phenotype$SampleID)) {\n    message(\"wrong order between dat and phenotype\")\n  } else {\n    dat &lt;- dat[pmatch(rownames(dat), phenotype$SampleID), ]\n  }\n  \n  lvls &lt;- unique(phenotype$GroupCompvar)\n  dat$GroupCompvar &lt;- phenotype$GroupCompvar\n  dat$GroupCompvar &lt;- factor(dat$GroupCompvar, levels = lvls)\n  dat$SampleID &lt;- rownames(dat)\n  \n  if (plotType %in% c(\"boxplot\", \"violin\", \"stackedbar\")) {\n   plotdata &lt;- dat %&gt;% \n      tidyr::gather(key = \"CellType\", \n                    value = \"Composition\", \n                    -c(\"SampleID\", \"GroupCompvar\"))\n    \n    plot_order &lt;- plotdata[plotdata$GroupCompvar == lvls[1], ] %&gt;%\n      dplyr::group_by(CellType) %&gt;%\n      dplyr::summarise(md = median(Composition)) %&gt;%\n      dplyr::arrange(desc(md)) %&gt;%\n      dplyr::pull(CellType)\n    \n    plotdata$CellType &lt;- factor(plotdata$CellType,\n                                levels = plot_order)\n    \n    if (plotType == \"boxplot\") {\n      \n      pl &lt;- ggplot(plotdata, aes(x = CellType, y = Composition)) +\n        stat_boxplot(aes(color = GroupCompvar), position = position_dodge(0.5),\n                     geom = \"errorbar\", width = 0.2) +        \n        geom_boxplot(aes(fill = GroupCompvar), \n                     position = position_dodge(0.5),\n                     width = 0.5,\n                     outlier.alpha = 0) + \n        stat_compare_means(aes(group =  GroupCompvar),\n                           label = plabel,\n                           method = \"wilcox.test\",\n                           hide.ns = F) +   \n        scale_fill_manual(values = group_colors) +\n        scale_color_manual(values = group_colors) +\n        scale_y_continuous(expand = expansion(mult = c(0.05, 0.1))) +        \n        labs(y = \"Ratio\", x = NULL) +   \n        theme_bw() +\n        theme(plot.title = element_text(size = 12, color = \"black\", hjust = 0.5, face = \"bold\"),\n              axis.title = element_text(size = 11, color = \"black\", face = \"bold\"), \n              axis.text = element_text(size= 10, color = \"black\"),\n              panel.grid.minor.y = element_blank(),\n              panel.grid.minor.x = element_blank(),\n              axis.text.x = element_text(angle = 45, hjust = 1 ),\n              panel.grid = element_blank(),\n              legend.position = \"top\",\n              legend.text = element_text(size = 8),\n              legend.title= element_text(size = 10),\n              text = element_text(family = \"serif\"))      \n    } else if (plotType == \"stackedbar\") {\n      \n      plotdata$NewSampleID &lt;- paste(plotdata$GroupCompvar, plotdata$SampleID, sep = \"_\")\n      mycolors &lt;- colorRampPalette(brewer.pal(8, \"Set1\"))(length(unique(plotdata$CellType)))\n      \n      pl &lt;- ggplot(plotdata, aes(x = NewSampleID, y = Composition, fill = CellType)) +\n        geom_bar(stat = \"identity\", position = \"fill\") + \n        labs(y = \"Immune Cells Relative Percentage\", x = \"\") + \n        scale_y_continuous(expand = c(0, 0),\n                           labels = scales::percent) +\n        scale_fill_manual(values = mycolors) +\n        guides(fill = guide_legend(title = NULL, ncol = 2)) +\n        annotate(\"text\", x = as.numeric(table(object$GroupCompvar))[1]/2, \n                 y = -0.03, label = group_names[1],\n                 size = 3, color = \"black\") +\n        annotate(\"segment\", x = 1, xend = as.numeric(table(object$GroupCompvar))[1], \n                 y = -0.01, yend = -0.01,\n                 color = group_colors[1], cex = 5) +\n        annotate(\"text\", x = (dim(object)[1] - as.numeric(table(object$GroupCompvar))[1])/2 + \n                   as.numeric(table(object$GroupCompvar))[1], \n                 y = -0.03, label = group_names[2],\n                 size = 3, color = \"black\") +\n        annotate(\"segment\", x = as.numeric(table(object$GroupCompvar))[1] + 1, \n                 xend = dim(object)[1], \n                 y = -0.01, yend = -0.01,\n                 color = group_colors[2], cex = 5) + \n        theme_classic() +\n        theme(axis.title = element_text(size = 11, color = \"black\", face = \"bold\"), \n              axis.text = element_text(size = 10, color = \"black\"),\n              axis.text.x.bottom = element_blank(),\n              axis.line.x.bottom = element_blank(),\n              axis.ticks.x.bottom = element_blank(),\n              panel.grid.minor.y = element_blank(),\n              panel.grid.minor.x = element_blank(),\n              panel.grid = element_blank(),\n              legend.position = \"right\",\n              legend.key.size = unit(0.45, \"cm\"),\n              legend.text = element_text(size = 8),\n              text = element_text(family = \"serif\"))\n      \n    } else if (plotType == \"violin\") {\n      \n      pl &lt;- ggplot(plotdata, aes(x = CellType, y = Composition)) +\n        geom_violin(aes(fill = GroupCompvar), trim = FALSE, \n                    position = position_dodge(0.5),\n                    outlier.color = \"transparent\") + \n        stat_compare_means(aes(group =  GroupCompvar),\n                           label = plabel,\n                           method = \"wilcox.test\",\n                           hide.ns = F) +   \n        scale_fill_manual(values = group_colors) +\n        labs(y = \"Ratio\", x = NULL) +   \n        theme_bw() +\n        theme(plot.title = element_text(size = 12, color = \"black\", hjust = 0.5, face = \"bold\"),\n              axis.title = element_text(size = 11, color = \"black\", face = \"bold\"), \n              axis.text = element_text(size= 10, color = \"black\"),\n              panel.grid.minor.y = element_blank(),\n              panel.grid.minor.x = element_blank(),\n              axis.text.x = element_text(angle = 45, hjust = 1 ),\n              panel.grid=element_blank(),\n              legend.position = \"top\",\n              legend.text = element_text(size = 8),\n              legend.title= element_text(size = 10),\n              text = element_text(family = \"serif\"))       \n    } \n  } else if (plotType == \"heatmap\") {\n    \n    plotdata &lt;- dat %&gt;% \n      dplyr::arrange(GroupCompvar) %&gt;%\n      dplyr::select(-all_of(c(\"GroupCompvar\", \"SampleID\"))) %&gt;%\n      t()\n    annotation_col &lt;- data.frame(\n        GroupCompvar = dat$GroupCompvar,\n        row.names = dat$SampleID)\n    \n    temp &lt;- pheatmap::pheatmap(\n             plotdata,\n             cluster_cols = F,\n             # cutree_cols = 2,\n             angle_col = \"90\",\n             annotation_col = annotation_col,\n             show_colnames = F,\n             fontfamily = \"serif\")\n    pl &lt;- as.ggplot(temp)\n      \n  } else if (plotType == \"corrplot\") {\n    \n    plotdata &lt;- dat %&gt;% \n      dplyr::select(-all_of(c(\"GroupCompvar\", \"SampleID\"))) %&gt;%\n      as.matrix()\n    fit &lt;- Hmisc::rcorr(plotdata, type = \"spearman\")\n    \n    dataR &lt;- signif(fit$r, 2)\n    \n    # grDevices::windowsFonts()\n    par(family = \"serif\")\n    pl &lt;- corrplot::corrplot(\n             dataR, \n             method = \"color\",\n             col = colorRampPalette(c(\"blue\", \"white\", \"red\"))(100),\n             order = \"AOE\",\n             addCoef.col = \"grey50\",\n             number.cex = .7,\n             number.font = 1.5,\n             tl.cex = 0.8,\n             tl.srt = 45,\n             tl.col = \"black\")\n    \n  }\n  \n  if (plotType == \"corrplot\") {\n    datfit &lt;- fit\n  } else {\n    datfit &lt;- NULL\n  }\n  \n  if (plotData) {\n    res &lt;- list(plot = pl,\n                plotdata = plotdata,\n                fit = datfit)\n  } else {\n    res &lt;- pl\n  }\n  \n  return(res)\n}",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>免疫浸润分析</span>"
    ]
  },
  {
    "objectID": "infiltration-Analysis.html#sec-infiltration-stackedbar",
    "href": "infiltration-Analysis.html#sec-infiltration-stackedbar",
    "title": "18  免疫浸润分析",
    "section": "\n18.4 堆积图",
    "text": "18.4 堆积图\n堆积图的意义：\n\n总量和构成：堆积图最直观的功能就是显示不同类别的数据如何组成总体。每个类别的数据块（或柱形、面积）堆叠在一起，形成总体数据的高度或面积。\n各部分比例：通过堆叠的高度或面积，可以很容易地看出每个类别在总体中所占的比例。\n类别间的对比：在堆积图中，可以方便地对比不同类别的数据大小，以及它们随时间的变化情况。\n数据层次：堆积图可以显示数据的层次结构，特别是在数据有多个分类维度时。例如，在一个销售数据中，可以同时展示不同产品类别、不同销售渠道的销售额。\n异常值检测：如果某个类别的数据块突然增大或减小，可能意味着该类别出现了异常或重大变化。\n\n\nImmueCell_42_stackedbar &lt;- get_plot(\n  object = ImmueCell,\n  plotType = \"stackedbar\",\n  group = \"Group\",\n  plotData = TRUE)\n\nImmueCell_42_stackedbar$plot\n结果：从图中可以看到不同癌症分期的免疫细胞在样本间存在个体特异性。",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>免疫浸润分析</span>"
    ]
  },
  {
    "objectID": "infiltration-Analysis.html#sec-infiltration-boxplot",
    "href": "infiltration-Analysis.html#sec-infiltration-boxplot",
    "title": "18  免疫浸润分析",
    "section": "\n18.5 箱线图",
    "text": "18.5 箱线图\n两组的箱线图的意义：\n\n数据分布的差异：通过比较两组数据的箱子高度、位置和中位数，可以判断两组数据的分散程度、中心位置和对称性是否有显著差异。\n异常值的比较：箱线图可以清晰地展示两组数据中异常值的数量和分布情况，从而了解两组数据在极端值方面的差异。\n统计检验的基础：箱线图可以为进一步的统计检验（如Mann-Whitney U检验）提供直观依据，帮助研究者判断两组数据是否具有统计差异。\n\n\nImmueCell_boxplot &lt;- get_plot(\n  object = ImmueCell, \n  plabel = \"p.signif\",\n  group = \"Group\",  \n  plotType = \"boxplot\",\n  plotData = TRUE)\n\nImmueCell_boxplot$plot\n结果：从图中可以看到某些免疫细胞如Tfh，Th2等在Early分期显著富集，这说明不同分期下的HCC有着不一样的肿瘤微环境。",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>免疫浸润分析</span>"
    ]
  },
  {
    "objectID": "infiltration-Analysis.html#sec-infil-analysis-heatmap",
    "href": "infiltration-Analysis.html#sec-infil-analysis-heatmap",
    "title": "18  免疫浸润分析",
    "section": "\n18.6 热图",
    "text": "18.6 热图\n热图的意义：\n\n数据分布：热图通过颜色的变化来展示数据在不同区域的分布情况。颜色越深，表示该区域的数据值越大或密度越高；颜色越浅，则表示数据值越小或密度越低。这有助于人们快速识别数据中的热点和冷点。\n趋势分析：通过观察热图中颜色的渐变，可以分析数据的趋势。\n异常检测：热图中的异常值通常会以与其他区域明显不同的颜色呈现出来，从而便于人们快速发现数据中的异常情况。\n比较分析：通过对比不同条件下的热图，可以对不同数据集进行比较分析。例如，在生物实验中，可以对比不同处理组之间的基因表达热图，以找出处理效果对基因表达的影响。\n\n\nImmueCell_heatmap &lt;- get_plot(\n  object = ImmueCell,\n  plotType = \"heatmap\",\n  group = \"Group\",\n  plotData = TRUE)\n结果：从图中可以看到不同癌症分期的免疫细胞在样本间存在个体特异性。",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>免疫浸润分析</span>"
    ]
  },
  {
    "objectID": "infiltration-Analysis.html#sec-infil-analysis-corrplot",
    "href": "infiltration-Analysis.html#sec-infil-analysis-corrplot",
    "title": "18  免疫浸润分析",
    "section": "\n18.7 相关性矩阵图",
    "text": "18.7 相关性矩阵图\n相关性矩阵图意义：\n\n相关性分析：相关图可以直观地展示数据集中变量之间的相关性，从而帮助研究人员快速了解哪些变量之间可能存在关系，以及关系的强度和方向。\n模式识别：通过相关图，研究人员可以识别数据中的隐藏模式，例如哪些变量组合在一起时相关性较强，或者哪些变量与多个其他变量都有较强的相关性。\n假设检验：在统计假设检验中，相关图可以作为一个初步的工具来检查数据是否符合预期的相关性模式。\n数据探索：在数据探索阶段，相关图可以帮助研究人员了解数据的整体结构和变量之间的关系，为后续的分析和建模提供基础。\n\n\nImmueCell_corrplot &lt;- get_plot(\n  object = ImmueCell,\n  plotType = \"corrplot\",\n  group = \"Group\",  \n  plotData = TRUE)\n结果：从图中可以看到不同免疫细胞存在强相关。",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>免疫浸润分析</span>"
    ]
  },
  {
    "objectID": "infiltration-Analysis.html#sec-infil-analysis-output",
    "href": "infiltration-Analysis.html#sec-infil-analysis-output",
    "title": "18  免疫浸润分析",
    "section": "\n18.8 输出结果",
    "text": "18.8 输出结果\n\nif (!dir.exists(\"./data/result/Figure/\")) {\n  dir.create(\"./data/result/Figure/\", recursive = TRUE)\n}\n\nggsave(\"./data/result/Figure/Fig4-A.pdf\", ImmueCell_42_stackedbar$plot, width = 10, height = 6, dpi = 600) \nggsave(\"./data/result/Figure/Fig4-B.pdf\", ImmueCell_boxplot$plot, width = 10, height = 6, dpi = 600) \nggsave(\"./data/result/Figure/Fig4-C.pdf\", ImmueCell_heatmap$plot, width = 8, height = 6, dpi = 600)\n\npdf(\"./data/result/Figure/Fig4-D.pdf\", width = 8, height = 6)\ntemp_list &lt;- get_plot(\n  object = ImmueCell,\n  plotType = \"corrplot\",\n  group = \"Group\",\n  plotData = TRUE)\ndev.off()",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>免疫浸润分析</span>"
    ]
  },
  {
    "objectID": "infiltration-Analysis.html#sec-infil-analysis-summary",
    "href": "infiltration-Analysis.html#sec-infil-analysis-summary",
    "title": "18  免疫浸润分析",
    "section": "\n18.9 总结",
    "text": "18.9 总结\n在本章节中，通过对比免疫细胞在不同癌症分期的表现，深入探究了不同癌症分期人群的肿瘤微环境差异。为了清晰展示这些差异，采用了多种可视化工具，包括堆积图、箱线图、热图以及相关矩阵图等，对收集到的数据进行了详细的分析和呈现。经过细致的研究，最终发现，某些特定的免疫细胞类型在不同癌症分期组中表现出了显著的差异，这些差异为理解癌症发展与免疫细胞活性之间的关系提供了重要线索。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] RColorBrewer_1.1-3 pheatmap_1.0.12    corrplot_0.92      ggplotify_0.1.2   \n [5] ggpubr_0.6.0       lubridate_1.9.3    forcats_1.0.0      stringr_1.5.1     \n [9] dplyr_1.1.4        purrr_1.0.2        readr_2.1.5        tidyr_1.3.1       \n[13] tibble_3.2.1       ggplot2_3.5.1      tidyverse_2.0.0   \n\nloaded via a namespace (and not attached):\n [1] yulab.utils_0.1.4   utf8_1.2.4          generics_0.1.3     \n [4] renv_1.0.0          rstatix_0.7.2       stringi_1.8.4      \n [7] hms_1.1.3           digest_0.6.35       magrittr_2.0.3     \n[10] evaluate_0.23       grid_4.3.3          timechange_0.3.0   \n[13] fastmap_1.1.1       jsonlite_1.8.8      backports_1.4.1    \n[16] BiocManager_1.30.23 fansi_1.0.6         scales_1.3.0       \n[19] abind_1.4-5         cli_3.6.2           rlang_1.1.3        \n[22] munsell_0.5.1       cachem_1.0.8        withr_3.0.0        \n[25] yaml_2.3.8          tools_4.3.3         tzdb_0.4.0         \n[28] memoise_2.0.1       ggsignif_0.6.4      colorspace_2.1-0   \n[31] broom_1.0.5         gridGraphics_0.5-1  vctrs_0.6.5        \n[34] R6_2.5.1            lifecycle_1.0.4     fs_1.6.4           \n[37] car_3.1-2           htmlwidgets_1.6.4   pkgconfig_2.0.3    \n[40] pillar_1.9.0        gtable_0.3.5        glue_1.7.0         \n[43] xfun_0.43           tidyselect_1.2.1    rstudioapi_0.16.0  \n[46] knitr_1.46          htmltools_0.5.8.1   rmarkdown_2.26     \n[49] carData_3.0-5       compiler_4.3.3",
    "crumbs": [
      "浸润分析",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>免疫浸润分析</span>"
    ]
  },
  {
    "objectID": "biomarker-lassoLR.html",
    "href": "biomarker-lassoLR.html",
    "title": "19  LASSO LR",
    "section": "",
    "text": "19.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(Biobase)\nlibrary(glmnet)\nlibrary(caret)\nlibrary(ROCR)\nlibrary(pROC)\nlibrary(MLmetrics)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>LASSO LR</span>"
    ]
  },
  {
    "objectID": "biomarker-lassoLR.html#sec-lassoLR-importdata",
    "href": "biomarker-lassoLR.html#sec-lassoLR-importdata",
    "title": "19  LASSO LR",
    "section": "\n19.2 导入数据",
    "text": "19.2 导入数据\n\n差异结果来自于 章节 11；\nExpressionSet来自于 章节 9。\n\nda_res &lt;- read.csv(\"./data/result/DA/HCC_Early_vs_Late_limma_select.csv\")\n\nExprSet &lt;- readRDS(\"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\")",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>LASSO LR</span>"
    ]
  },
  {
    "objectID": "biomarker-lassoLR.html#sec-lassoLR-preparedata",
    "href": "biomarker-lassoLR.html#sec-lassoLR-preparedata",
    "title": "19  LASSO LR",
    "section": "\n19.3 准备数据",
    "text": "19.3 准备数据\n\n差异基因：结果解析见 表 11.1\n\n\n\nsignif_DEG &lt;- da_res %&gt;%\n  dplyr::filter(Enrichment != \"Nonsignif\") %&gt;%\n  dplyr::slice(-grep(\"\\\\.\", FeatureID))\n\nhead(signif_DEG[, 1:6])\n\n基因表达谱：行名是样本，列名是基因ID\n\n\nprofile &lt;- exprs(ExprSet) %&gt;%\n  as.data.frame()\nrownames(profile) &lt;- make.names(rownames(profile))\n\nhead(profile_DEG[, 1:6])\n\n临床表型表：包含分组等信息\n\n\nmetadata &lt;- pData(ExprSet)\nhead(metadata[, 1:6])",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>LASSO LR</span>"
    ]
  },
  {
    "objectID": "biomarker-lassoLR.html#sec-lassoLR-model",
    "href": "biomarker-lassoLR.html#sec-lassoLR-model",
    "title": "19  LASSO LR",
    "section": "\n19.4 机器学习特征筛选",
    "text": "19.4 机器学习特征筛选\n特征筛选步骤：\n\n数据分割：\n\n将原始数据集划分为训练集、验证集和测试集。通常，训练集用于模型训练，验证集用于调整超参数和选择最佳模型，测试集用于评估最终模型的性能。 划分比例可以根据数据集的大小和特性进行调整，但一般常见的比例是训练集占60%-80%，验证集和测试集各占10%-20%。\n\n数据转换：\n\n数据清洗：处理缺失值、异常值、重复值等。对于缺失值，可以使用均值、中位数、众数等填充，或采用插值法、机器学习预测等方法进行填充。\n特征编码：对于分类变量，需要进行编码以便模型能够处理。常见的编码方式包括独热编码（One-Hot Encoding）、标签编码（Label Encoding）等。\n特征离散化：将连续特征转换为离散类别，例如通过分箱操作。这有助于处理一些具有非线性关系的特征。\n特征标准化或归一化：对于不同量纲或不同分布的特征，需要进行标准化或归一化，以便模型能够更好地处理它们。\n\n特征筛选：\n\n相关性分析：计算每个特征与目标变量之间的相关性，如皮尔逊相关系数或斯皮尔曼等级相关系数。通过相关性分析，可以初步筛选出与目标变量强相关的特征。\n树模型重要性：利用决策树、随机森林等树模型评估特征的重要性。这些模型可以根据特征在树中分裂的贡献度来评估特征的重要性。\n启发式搜索策略：如前向序列选择方法，从空的候选集合出发，逐步添加与目标变量相关性最强的特征。\n全局最优搜索策略：如穷举法或分支界定法，从所有可能的特征组合中挑选出表现最优的特征子集。\n\n训练集构建模型：使用经过特征筛选的训练集数据构建机器学习模型。选择合适的机器学习算法，如逻辑回归、支持向量机、决策树、随机森林、神经网络等。\n调参：使用验证集对模型进行调参，优化模型的超参数。超参数是机器学习算法中需要人为设定的参数，如学习率、迭代次数、正则化参数等。 可以采用网格搜索（Grid Search）、随机搜索（Random Search）等方法进行调参。\n测试集评估模型：使用测试集对经过调参的模型进行评估，计算模型的性能指标，如准确率、精确率、召回率、F1分数、AUC-ROC等。根据评估结果选择性能最佳的模型作为最终模型。\n\n\n19.4.1 数据分割\n在机器学习的实践中，数据分割是一个至关重要的步骤，用于将原始数据集划分为训练集和测试集（使用了caret::createDataPartition (Kuhn 2008)）。\n\nset.seed(123)\n\ntrainIndex &lt;- caret::createDataPartition(\n          metadata$Group, \n          p = 0.8, \n          list = FALSE, \n          times = 1)\n\ny_train &lt;- metadata[trainIndex, ]\nX_train &lt;- profile_DEG[rownames(profile_DEG) %in% rownames(y_train), ] %&gt;%\n  as.matrix()\n\ny_test &lt;- metadata[-trainIndex, ]\nX_test &lt;- profile_DEG[!rownames(profile_DEG) %in% rownames(y_train), ] %&gt;%\n  as.matrix()\n\n19.4.2 调参\n在构建机器学习模型时，特别是在使用Lasso+LR时，选择合适的正则化参数（在Lasso中通常称为\\(\\lambda\\)）是非常重要的。正则化参数用于控制模型的复杂度，以避免过拟合。交叉验证（Cross-Validation, CV）是一种常用的技术，用于评估模型在不同参数设置下的性能，并选取最优的参数。\n在cv.glmnet函数中（来自于glmnet(Friedman, Hastie, 和 Tibshirani 2010)），family参数用于指定模型的类型。当family = “binomial”时，你正在指定模型应该使用逻辑回归（logistic regression：LR）来拟合二元（binary）响应变量（即，响应变量只取两个可能的值，如0和1）。\n\nset.seed(123)\n\ncv.fit &lt;- cv.glmnet(\n  x = X_train, \n  y = y_train$Group, \n  family = \"binomial\")\n\nplot(cv.fit)\n\n19.4.3 测试集验证\n首先，将训练好的模型应用于测试集数据，以预测每个样本的分类标签。预测结果将与测试集的真实标签进行对比，以计算模型在各个类别上的分类准确性。\n\n预测测试集的标签\n\n\ntest_group_label &lt;- predict(cv.fit, X_test) %&gt;%\n  as.data.frame() %&gt;%\n  setNames(\"Predicted\") %&gt;%\n  cbind(data.frame(Actual = y_test$Group)) %&gt;%\n  head()\n\nhead(test_group_label)\n\n\nassess.glmnet函数给出整体评估指标\n\n\nassess.glmnet(cv.fit, newx = X_test, newy = y_test$Group, s = \"lambda.min\")\n\n混淆矩阵（Confusion matrix）\n\n\ncnf &lt;- confusion.glmnet(\n  object = cv.fit, \n  newx = X_test)\n\nprint(cnf)\n\nROC曲线\n\n\nrocs &lt;- roc.glmnet(\n  object = cv.fit$fit.preval,\n  newy = y_train$Group)\n\nbest &lt;- cv.fit$index[\"min\", ]\nplot(rocs[[best]], type = \"l\")\ninvisible(sapply(rocs, lines, col=\"grey\"))\nlines(rocs[[best]], lwd = 2, col = \"red\")\nlines(c(0, 1), c(0, 1), col = \"black\", lty = 9, lwd = 2)\n\n19.4.4 最终分类模型\n\nlasso_model &lt;- glmnet(\n  X_train, \n  y_train$Group, \n  family = \"binomial\", \n  alpha = 1, \n  lambda = cv.fit$lambda.min)\n\nggplot(roc_df, aes(x = FPR, y = TPR)) +\n  geom_line(color = \"blue\") +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"red\") +\n  geom_text(aes(label = paste(\"Youden Index =\", round(youden_index, 2))),\n            x = 0.2, y = 0.8, color = \"black\", size = 4) +\n  geom_text(aes(label = paste(\"Specificity =\", round(roc_data$specificity[which.max(roc_data$sensitivity)], 2))),\n            x = 0.2, y = 0.7, color = \"black\", size = 4) +\n  labs(x = \"False Positive Rate\", y = \"True Positive Rate\",\n       title = \"ROC Curve for LASSO Regression\") +\n  theme_bw()\n\n混淆矩阵\n\nprint(caret::confusionMatrix(as.factor(pred_raw[, 1]), factor(y_test$Group)))\n结果：特异度（Specificity）在上述所有模型评估指标中是偏低的（Specificity : 0.2857），结合先前机器学习基础 小节 4.3，可以推测得知该模型对阴性样本也即是Late Stage的患者预测效果不佳。\n\nAUROC曲线：使用pROC::roc(Robin 等 2011)函数\n\n\nAUROC &lt;- function(\n    DataTest, \n    PredProb = pred_prob, \n    nfeature) {\n  \n  # DataTest = y_test\n  # PredProb = pred_prob\n  # nfeature = 41\n  \n  # ROC object\n  rocobj &lt;- roc(DataTest$Group, PredProb[, 1])\n  \n  # plot\n  pl &lt;- ggplot(data = roc, aes(x = fpr, y = tpr)) +\n    geom_path(color = \"red\", size = 1) +\n    geom_abline(intercept = 0, slope = 1, \n                color = \"grey\", linewidth = 1, linetype = 2) +\n    labs(x = \"False Positive Rate (1 - Specificity)\",\n         y = \"True Positive Rate\",\n         title = paste0(\"AUROC (\", nfeature, \" Features)\")) +\n    annotate(\"text\", \n             x = 1 - rocbj_df$specificities[max_value_row] + 0.15, \n             y = rocbj_df$sensitivities[max_value_row] - 0.05, \n             label = paste0(threshold, \" (\", \n                            rocbj_df$specificities[max_value_row], \",\",\n                            rocbj_df$sensitivities[max_value_row], \")\"),\n             size = 5, family = \"serif\") +\n    annotate(\"point\", \n             x = 1 - rocbj_df$specificities[max_value_row], \n             y = rocbj_df$sensitivities[max_value_row], \n             color = \"black\", size = 2) +    \n    annotate(\"text\", \n             x = .75, y = .25, \n             label = roc_CI_lab,\n             size = 5, family = \"serif\") +\n    coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +\n    theme_bw() +\n    theme(panel.background = element_rect(fill = \"transparent\"),\n          plot.title = element_text(size = 12, color = \"black\", face = \"bold\"),\n          axis.title = element_text(size = 11, color = \"black\", face = \"bold\"), \n          axis.text = element_text(size= 10, color = \"black\"),\n          axis.ticks.length = unit(0.4, \"lines\"),\n          axis.ticks = element_line(color = \"black\"),\n          axis.line = element_line(size = .5, color = \"black\"),\n          text = element_text(size = 8, color = \"black\", family = \"serif\"))\n  \n  res &lt;- list(rocobj = rocobj,\n              roc_CI = roc_CI_lab,\n              roc_pl = pl)\n  \n  return(res)\n}\n\nAUROC_res &lt;- AUROC(\n    DataTest = y_test, \n    PredProb = pred_prob, \n    nfeature = 20)\n\nAUROC_res$roc_pl\n\nAUPRC曲线：使用pROC::roc(Robin 等 2011)函数\n\n\nAUPRC &lt;- function(DataTest, PredProb, nfeature) {\n  \n  # plot\n  pl &lt;- ggplot(data = prc, aes(x = recall, y = precision)) +\n    geom_path(color = \"red\", size = 1) +\n    labs(x = \"Recall\",\n         y = \"Precision\",\n         title = paste0(\"AUPRC (\", nfeature, \" Features)\")) +\n    coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +\n    theme_bw() +\n    theme(panel.background = element_rect(fill = \"transparent\"),\n          plot.title = element_text(color = \"black\", size = 14, face = \"bold\"),\n          axis.ticks.length = unit(0.4, \"lines\"),\n          axis.ticks = element_line(color = \"black\"),\n          axis.line = element_line(size = .5, color = \"black\"),\n          axis.title = element_text(color = \"black\", size = 12, face = \"bold\"),\n          axis.text = element_text(color = \"black\", size = 10),\n          text = element_text(size = 8, color = \"black\", family = \"serif\"))\n  \n  res &lt;- list(dat_PR = dat_PR,\n              PC_pl = pl)\n  \n  return(res)\n} \n\nAUPRC_res &lt;- AUPRC(\n    DataTest = y_test, \n    PredProb = pred_prob, \n    nfeature = 20)\n\nAUPRC_res$PC_pl\n\n模型评估参数：使用pROC::roc(Robin 等 2011)和MLmetrics::PRAUC(Yan 2016)函数\n\n\nEvaluate_index &lt;- function(DataTest, PredProb, label, PredRaw) {\n  \n  threshold &lt;- rocbj_df$threshold[max_value_row]\n  sen &lt;- round(TP / (TP + FN), 3) # caret::sensitivity(con_matrix)\n  spe &lt;- round(TN / (TN + FP), 3) # caret::specificity(con_matrix)\n  acc &lt;- round((TP + TN) / (TP + TN + FP + FN), 3) # Accuracy\n  pre &lt;- round(TP / (TP + FP), 3) # precision\n  rec &lt;- round(TP / (TP + FN), 3) # recall\n  #F1S &lt;- round(2 * TP / (TP + TN + FP + FN + TP - TN), 3)# F1-Score\n  F1S &lt;- round(2 * TP / (2 * TP + FP + FN), 3)# F1-Score\n  youden &lt;- sen + spe - 1 # youden index\n  \n  \n  # AUROC\n  AUROC &lt;- round(as.numeric(auc(DataTest$Group, PredProb[, 1])), 3)\n  \n  # AUPRC\n  AUPRC &lt;- round(MLmetrics::PRAUC(y_pred = PredProb[, 1], \n                                  y_true = DataTest$Group), 3)  \n  \n  index_df &lt;- data.frame(Index = c(\"Threshold\", \"Sensitivity\",\n                                   \"Specificity\", \"Accuracy\",\n                                   \"Precision\", \"Recall\",\n                                   \"F1 Score\", \"Youden index\",\n                                   \"AUROC\", \"AUPRC\"),\n                         Value = c(threshold, sen, spe,\n                                   acc, pre, rec, F1S, \n                                   youden, AUROC, AUPRC)) %&gt;%\n    stats::setNames(c(\"Index\", label))\n  \n  return(index_df)\n}\n\nEvaluate_index(\n  DataTest = y_test,\n  PredProb = pred_prob,\n  label = group_names[1],\n  PredRaw = pred_raw)\n结果：从表中我们可以看到以下指标及其对应的数值：\n\n阈值（Threshold）：0.337。阈值用于将模型的预测结果转换为具体的类别（例如，在二分类问题中，通常将预测概率大于阈值的样本视为正类，小于阈值的视为负类）。\n灵敏度（Sensitivity）：0.937。也称为真正率（True Positive Rate, TPR）或召回率（Recall），它表示所有实际为正样本的样本中，被模型正确预测为正样本的比例。\n特异度（Specificity）：0.286。也称为真负率（True Negative Rate, TNR），它表示所有实际为负样本的样本中，被模型正确预测为负样本的比例。\n准确率（Accuracy）：0.737。它表示模型在所有样本上的正确分类的比例。\n精度（Precision）：0.747。它表示所有被模型预测为正样本的样本中，实际为正样本的比例。\n召回率（Recall）：0.937（注意这个与Sensitivity的值是一样的，因为在二分类问题中，Sensitivity和Recall是等价的）。\nF1得分（F1Score）：0.831。它是精度和召回率的调和平均值，用于综合衡量两者的表现。\nYouden指数：0.223。它是一个用于评估诊断测试性能的指标，等于灵敏度与特异度之和减去1。\nAUROC（Area Under the Receiver Operating Characteristic Curve）：0.732。AUROC是一种衡量分类模型性能的指标，它表示ROC曲线下的面积。\nAUPRC（Area Under the Precision-Recall Curve）：0.573。AUPRC是另一种衡量分类模型性能的指标，特别适用于正样本数量远少于负样本的情况，它表示Precision-Recall曲线下的面积。",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>LASSO LR</span>"
    ]
  },
  {
    "objectID": "biomarker-lassoLR.html#sec-lassoLR-model-biomarker",
    "href": "biomarker-lassoLR.html#sec-lassoLR-model-biomarker",
    "title": "19  LASSO LR",
    "section": "\n19.5 标记基因",
    "text": "19.5 标记基因\n在运用Lasso回归进行模型训练的过程中，通过L1正则化的作用，模型能够自动筛选出那些对预测结果具有显著影响的特征，这些特征对应的Lasso系数不为零，因此被称为标记基因或显著特征。\n\noptimal_feature &lt;- coef(cv.fit, s = \"lambda.min\") %&gt;%\n  as.matrix() %&gt;%\n  as.data.frame() %&gt;%\n  setNames(\"Coef\") %&gt;%\n  dplyr::filter(Coef != 0) %&gt;%\n  tibble::rownames_to_column(\"FeatureID\") %&gt;%\n  dplyr::slice(-1)\n\nhead(optimal_feature)\n\n可视化特征\n\n\nmain_theme &lt;- \n  theme(\n    panel.background = element_blank(),\n    panel.grid = element_blank(),\n    axis.line.x = element_line(linewidth = 0.5, color = \"black\"),\n    axis.line.y = element_line(linewidth = 0.5, color = \"black\"),\n    axis.ticks = element_line(color = \"black\"),\n    axis.title = element_text(size = 11, color = \"black\", face = \"bold\"),    \n    axis.text = element_text(color = \"black\", size = 10),\n    legend.position = \"right\",\n    legend.background = element_blank(),\n    legend.key = element_blank(),\n    legend.text = element_text(size = 12),\n    text = element_text(family = \"serif\"))\n\noptimal_feature_pl &lt;- optimal_feature %&gt;%\n  ggplot(aes(x = FeatureID, y = Coef))+\n    geom_bar(stat = \"identity\", fill = \"white\", color = \"blue\") +\n    labs(x = \"\", y = \"Coefficient\") +\n    coord_flip() +\n    main_theme\n\noptimal_feature_pl\n\n提取特征的表达谱\n\n\nprofile_LASSO &lt;- profile[pmatch(optimal_feature$FeatureID,\n                              rownames(profile)), ]\n\nhead(profile_LASSO[, 1:6])",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>LASSO LR</span>"
    ]
  },
  {
    "objectID": "biomarker-lassoLR.html#sec-lassoLR-output",
    "href": "biomarker-lassoLR.html#sec-lassoLR-output",
    "title": "19  LASSO LR",
    "section": "\n19.6 输出结果",
    "text": "19.6 输出结果\n\nif (!dir.exists(\"./data/result/ML/LASSO\")) {\n  dir.create(\"./data/result/ML/LASSO\", recursive = TRUE)\n}\n\nwrite.csv(optimal_feature, \"./data/result/ML/LASSO/HCC_LASSO_feature.csv\", row.names = F)\nwrite.table(profile_LASSO, \"./data/result/ML/LASSO/HCC_LASSO_profile.tsv\", row.names = T, sep = \"\\t\", quote = F)\nsave(AUROC_res, file = \"./data/result/ML/LASSO/HCC_LASSO_AUROC.RData\")\n\nif (!dir.exists(\"./data/result/Figure/\")) {\n  dir.create(\"./data/result/Figure/\", recursive = TRUE)\n}\n\npdf(\"./data/result/Figure/SFig3-A.pdf\", width = 5, height = 4)\nplot(cv.fit)\ndev.off()\n\nggsave(\"./data/result/Figure/SFig3-B.pdf\", AUROC_res$roc_pl, width = 5, height = 4, dpi = 600) \nggsave(\"./data/result/Figure/SFig3-C.pdf\", optimal_feature_pl, width = 5, height = 4, dpi = 600)",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>LASSO LR</span>"
    ]
  },
  {
    "objectID": "biomarker-lassoLR.html#sec-lassoLR-summary",
    "href": "biomarker-lassoLR.html#sec-lassoLR-summary",
    "title": "19  LASSO LR",
    "section": "\n19.7 总结",
    "text": "19.7 总结\n采用了一种结合差异基因分析和机器学习（LASSO+LR模型）的方法，来进行基因筛选和分类预测。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] MLmetrics_1.1.3     pROC_1.18.5         ROCR_1.0-11        \n [4] caret_6.0-94        lattice_0.22-6      glmnet_4.1-8       \n [7] Matrix_1.6-5        Biobase_2.62.0      BiocGenerics_0.48.1\n[10] lubridate_1.9.3     forcats_1.0.0       stringr_1.5.1      \n[13] dplyr_1.1.4         purrr_1.0.2         readr_2.1.5        \n[16] tidyr_1.3.1         tibble_3.2.1        ggplot2_3.5.1      \n[19] tidyverse_2.0.0    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.5         shape_1.4.6.1        xfun_0.43           \n [4] htmlwidgets_1.6.4    recipes_1.0.10       tzdb_0.4.0          \n [7] vctrs_0.6.5          tools_4.3.3          generics_0.1.3      \n[10] stats4_4.3.3         parallel_4.3.3       fansi_1.0.6         \n[13] ModelMetrics_1.2.2.2 pkgconfig_2.0.3      data.table_1.15.4   \n[16] lifecycle_1.0.4      compiler_4.3.3       munsell_0.5.1       \n[19] codetools_0.2-19     htmltools_0.5.8.1    class_7.3-22        \n[22] yaml_2.3.8           prodlim_2023.08.28   pillar_1.9.0        \n[25] MASS_7.3-60.0.1      gower_1.0.1          iterators_1.0.14    \n[28] rpart_4.1.23         foreach_1.5.2        parallelly_1.37.1   \n[31] lava_1.8.0           nlme_3.1-164         tidyselect_1.2.1    \n[34] digest_0.6.35        future_1.33.2        stringi_1.8.4       \n[37] reshape2_1.4.4       listenv_0.9.1        splines_4.3.3       \n[40] fastmap_1.1.1        grid_4.3.3           colorspace_2.1-0    \n[43] cli_3.6.2            magrittr_2.0.3       survival_3.7-0      \n[46] utf8_1.2.4           future.apply_1.11.2  withr_3.0.0         \n[49] scales_1.3.0         timechange_0.3.0     rmarkdown_2.26      \n[52] globals_0.16.3       nnet_7.3-19          timeDate_4032.109   \n[55] hms_1.1.3            evaluate_0.23        knitr_1.46          \n[58] hardhat_1.3.1        rlang_1.1.3          Rcpp_1.0.12         \n[61] glue_1.7.0           BiocManager_1.30.23  renv_1.0.0          \n[64] ipred_0.9-14         rstudioapi_0.16.0    jsonlite_1.8.8      \n[67] R6_2.5.1             plyr_1.8.9          \n\n\n\n\n\n\nFriedman, Jerome, Trevor Hastie, 和 Rob Tibshirani. 2010. 《Regularization paths for generalized linear models via coordinate descent》. Journal of statistical software 33 (1): 1.\n\n\nKuhn, Max. 2008. 《Building predictive models in R using the caret package》. Journal of statistical software 28: 1–26.\n\n\nRobin, Xavier, Natacha Turck, Alexandre Hainard, Natalia Tiberti, Frédérique Lisacek, Jean-Charles Sanchez, 和 Markus Müller. 2011. 《pROC: an open-source package for R and S+ to analyze and compare ROC curves》. BMC bioinformatics 12: 1–8.\n\n\nYan, Yachen. 2016. 《MLmetrics: Machine Learning Evaluation Metrics》. https://github.com/yanyachen/MLmetrics.",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>LASSO LR</span>"
    ]
  },
  {
    "objectID": "biomarker-BorutaRF.html",
    "href": "biomarker-BorutaRF.html",
    "title": "20  Boruta RF",
    "section": "",
    "text": "20.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(Biobase)\nlibrary(randomForest)\nlibrary(caret)\nlibrary(mlbench)\nlibrary(Boruta)\nlibrary(pROC)\nlibrary(Hmisc)\nlibrary(MLmetrics)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Boruta RF</span>"
    ]
  },
  {
    "objectID": "biomarker-BorutaRF.html#sec-BorutaRF-importdata",
    "href": "biomarker-BorutaRF.html#sec-BorutaRF-importdata",
    "title": "20  Boruta RF",
    "section": "\n20.2 导入数据",
    "text": "20.2 导入数据\n\n差异结果来自于 章节 11；\nExpressionSet来自于 章节 9。\n\nda_res &lt;- read.csv(\"./data/result/DA/HCC_Early_vs_Late_limma_select.csv\")\n\nExprSet &lt;- readRDS(\"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\")",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Boruta RF</span>"
    ]
  },
  {
    "objectID": "biomarker-BorutaRF.html#sec-BorutaRF-preparedata",
    "href": "biomarker-BorutaRF.html#sec-BorutaRF-preparedata",
    "title": "20  Boruta RF",
    "section": "\n20.3 准备数据",
    "text": "20.3 准备数据\n\n差异基因：结果解析见 表 11.1\n\n\n\nsignif_DEG &lt;- da_res %&gt;%\n  dplyr::filter(Enrichment != \"Nonsignif\") %&gt;%\n  dplyr::slice(-grep(\"\\\\.\", FeatureID))\n\nhead(signif_DEG[, 1:6])\n\n基因表达谱：行名是样本，列名是基因ID\n\n\nprofile &lt;- exprs(ExprSet) %&gt;%\n  as.data.frame()\nrownames(profile) &lt;- make.names(rownames(profile))\n\nhead(profile_DEG[, 1:6])\n\n去除共线性特征\n\n在机器学习中，数据预处理中使用去除共线性特征的方法，其主要目的是为了提升模型的性能、稳定性和准确性。以下是具体的几个原因：\n这里通过Hmisc::rcorr(Harrell Jr 和 Harrell Jr 2019)采用了相关系数分析去除共线性。\n\nif (file.exists(\"./data/result/ML/RF/HCC_RF_RM_profile.tsv\")) {\n  profile_remain &lt;- fread(\"./data/result/ML/RF/HCC_RF_RM_profile.tsv\", sep = \"\\t\") %&gt;%\n    tibble::column_to_rownames(\"V1\")\n} else {\n  profile_remain &lt;- profile_DEG %&gt;% \n    dplyr::select(all_of(rownames(feature_remain))) \n  \n  write.table(profile_remain, \"./data/result/ML/RF/HCC_RF_RM_profile.tsv\",\n              row.names = T, sep = \"\\t\", quote = F)\n}\n\nprint(dim(profile_remain))\n\n临床表型表：包含分组等信息\n\n\nmetadata &lt;- pData(ExprSet)\nhead(metadata[, 1:6])\n\n合并数据\n\n\nMergeData &lt;- metadata %&gt;%\n  dplyr::select(SampleID, Group) %&gt;%\n  dplyr::inner_join(profile_remain %&gt;%\n                      tibble::rownames_to_column(\"SampleID\"),\n                    by = \"SampleID\") %&gt;%\n  tibble::column_to_rownames(\"SampleID\") %&gt;%\n  dplyr::mutate(Group = recode(Group, \"Early Stage\" = \"Early\",\n                               \"Late Stage\" = \"Late\")) %&gt;%\n  dplyr::mutate(Group = factor(Group))\n\nhead(MergeData[, 1:6])",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Boruta RF</span>"
    ]
  },
  {
    "objectID": "biomarker-BorutaRF.html#sec-BorutaRF-model",
    "href": "biomarker-BorutaRF.html#sec-BorutaRF-model",
    "title": "20  Boruta RF",
    "section": "\n20.4 机器学习特征筛选",
    "text": "20.4 机器学习特征筛选\n特征筛选步骤：\n\n数据分割：\n\n将原始数据集划分为训练集、验证集和测试集。通常，训练集用于模型训练，验证集用于调整超参数和选择最佳模型，测试集用于评估最终模型的性能。 划分比例可以根据数据集的大小和特性进行调整，但一般常见的比例是训练集占60%-80%，验证集和测试集各占10%-20%。\n\n数据转换：\n\n数据清洗：处理缺失值、异常值、重复值等。对于缺失值，可以使用均值、中位数、众数等填充，或采用插值法、机器学习预测等方法进行填充。\n特征编码：对于分类变量，需要进行编码以便模型能够处理。常见的编码方式包括独热编码（One-Hot Encoding）、标签编码（Label Encoding）等。\n特征离散化：将连续特征转换为离散类别，例如通过分箱操作。这有助于处理一些具有非线性关系的特征。\n特征标准化或归一化：对于不同量纲或不同分布的特征，需要进行标准化或归一化，以便模型能够更好地处理它们。\n\n特征筛选：\n\n相关性分析：计算每个特征与目标变量之间的相关性，如皮尔逊相关系数或斯皮尔曼等级相关系数。通过相关性分析，可以初步筛选出与目标变量强相关的特征。\n树模型重要性：利用决策树、随机森林等树模型评估特征的重要性。这些模型可以根据特征在树中分裂的贡献度来评估特征的重要性。\n启发式搜索策略：如前向序列选择方法，从空的候选集合出发，逐步添加与目标变量相关性最强的特征。\n全局最优搜索策略：如穷举法或分支界定法，从所有可能的特征组合中挑选出表现最优的特征子集。\n\n训练集构建模型：使用经过特征筛选的训练集数据构建机器学习模型。选择合适的机器学习算法，如逻辑回归、支持向量机、决策树、随机森林、神经网络等。\n调参：使用验证集对模型进行调参，优化模型的超参数。超参数是机器学习算法中需要人为设定的参数，如学习率、迭代次数、正则化参数等。 可以采用网格搜索（Grid Search）、随机搜索（Random Search）等方法进行调参。\n测试集评估模型：使用测试集对经过调参的模型进行评估，计算模型的性能指标，如准确率、精确率、召回率、F1分数、AUC-ROC等。根据评估结果选择性能最佳的模型作为最终模型。\n\n\n20.4.1 数据分割\n在机器学习的实践中，数据分割是一个至关重要的步骤，用于将原始数据集划分为训练集和测试集（使用了caret::createDataPartition (Kuhn 2008)）。\n\nset.seed(123)\n\ntrainIndex &lt;- caret::createDataPartition(\n          MergeData$Group, \n          p = 0.8, \n          list = FALSE, \n          times = 1)\n\ntrainData &lt;- MergeData[trainIndex, ]\nX_train &lt;- trainData[, -1]\ny_train &lt;- trainData[, 1]\n\ntestData &lt;- MergeData[-trainIndex, ]\nX_test &lt;- testData[, -1]\ny_test &lt;- testData[, 1]\n\n20.4.2 基础模型\n使用randomForest函数(Liaw, Wiener, 等 2002)构建随机森林的基础模型，获得特征的重要性得分矩阵。\n\nset.seed(123)\nbase.fit &lt;- randomForest(\n  Group ~ .,\n  data = trainData,\n  importance = TRUE)\n\nbase.fit\n\n特征的重要性得分\n\nhead(imp_biomarker)\n\n20.4.3 Boruta特征筛选\nBoruta特征筛选（使用Boruta (Kursa 和 Rudnicki 2010) R包）是一种基于随机森林的特征选择方法，旨在从给定的特征集合中找到真正重要的特征，并区分无关的特征。它的核心思想是通过创建随机生成的“影子”特征（shadow features）来模拟随机选择的特征，并将这些影子特征与原始特征进行比较，以确定每个原始特征的重要性。\n\nif (!file.exists(\"./data/result/ML/RF/HCC_RF_Boruta.RData\")) {\n  set.seed(123)\n  \n  bank_df &lt;- Boruta::attStats(boruta.bank)\n  print(bank_df)  \n  \n  if (!dir.exists(\"./data/result/ML/RF\")) {\n    dir.create(\"./data/result/ML/RF\", recursive = TRUE)\n  }\n  \n  save(X_train, y_train, X_test, y_test, \n       fs_Boruta, boruta.bank, bank_df,\n       file = \"./data/result/ML/RF/HCC_RF_Boruta.RData\")  \n} else {\n  load(\"./data/result/ML/RF/HCC_RF_Boruta.RData\")\n}\n\nplot(boruta.bank, xlab = \"\", xaxt = \"n\")\nlz &lt;- lapply(1:ncol(boruta.bank$ImpHistory), function(i) {\n    boruta.bank$ImpHistory[is.finite(boruta.bank$ImpHistory[, i]), i]\n})\nnames(lz) &lt;- colnames(boruta.bank$ImpHistory)\nLabels &lt;- sort(sapply(lz, median))\naxis(side = 1, las = 2, labels = names(Labels),\nat = 1:ncol(boruta.bank$ImpHistory), cex.axis = 0.7) \n\ntrainData_select &lt;- trainData %&gt;%\n  dplyr::select(all_of(c(\"Group\", rownames(feature_Boruta))))\nX_train_select &lt;- trainData_select[, -1]\ny_train_select &lt;- trainData_select[, 1]\n\ntestData_select &lt;- testData %&gt;%\n  dplyr::select(all_of(c(\"Group\", rownames(feature_Boruta))))\nX_test_select &lt;- testData_select[, -1]\ny_test_select &lt;- testData_select[, 1]\n\n20.4.4 调参\n为了优化随机森林模型的性能，采用了重复交叉验证（repeated cross-validation）的方法来调整其两个关键参数：mtry（每棵树中随机选择的特征数）和ntree（树的总数）。在调参过程中，设定了不同的mtry和ntree参数组合，并使用重复交叉验证来评估每个组合下的模型性能。这种方法通过多次重复地划分训练集和验证集，并对每个参数组合进行多次评估，从而获得了更加稳定和可靠的性能指标。最终，根据这些性能指标，选择出能够使模型性能达到最优的mtry和ntree参数值。\n\nset.seed(123)\n## Print the best tuning parameter that maximizes model accuracy\noptimalVar &lt;- data.frame(tune_fit$results[which.max(tune_fit$results[, 3]), ])\n# print(optimalVar)\n\n## Plot model accuracy vs different values of Cost\nprint(plot(tune_fit))\n\n最佳特征：通过重复运行获得误差确定最佳特征数目\n\nn.var &lt;- as.numeric(rownames(error.cv))\ncolnames(error.cv) &lt;- paste(\"error\", 1:5, sep = \".\")\nerr.mean &lt;- apply(error.cv, 1, mean)\nerr.df &lt;- data.frame(num = n.var, \n                     err.mean = err.mean,\n                     error.cv) \nhead(err.df[, 1:6])\n\n最佳特征可视化\n\noptimal &lt;- err.df$num[which(err.df$err.mean == min(err.df$err.mean))]\nmain_theme &lt;- \n  theme(\n    panel.background = element_blank(),\n    panel.grid = element_blank(),\n    axis.line.x = element_line(linewidth = 0.5, color = \"black\"),\n    axis.line.y = element_line(linewidth = 0.5, color = \"black\"),\n    axis.ticks = element_line(color = \"black\"),\n    axis.title = element_text(size = 11, color = \"black\", face = \"bold\"),    \n    axis.text = element_text(color = \"black\", size = 10),\n    legend.position = \"right\",\n    legend.background = element_blank(),\n    legend.key = element_blank(),\n    legend.text = element_text(size = 12),\n    text = element_text(family = \"serif\"))\n\npl &lt;- \n  ggplot(data = err.df, aes(x = err.df$num)) + \n    geom_line(aes(y = err.df$error.1), color = \"grey\", linewidth = 0.5) + \n    geom_line(aes(y = err.df$error.2), color = \"grey\", linewidth = 0.5) +\n    geom_line(aes(y = err.df$error.3), color = \"grey\", linewidth = 0.5) +\n    geom_line(aes(y = err.df$error.4), color = \"grey\", linewidth = 0.5) +\n    geom_line(aes(y = err.df$error.5), color = \"grey\", linewidth = 0.5) +\n    geom_line(aes(y = err.df$err.mean), color = \"black\", linewidth = 0.5) + \n    geom_vline(xintercept = optimal, color = \"red\", lwd = 0.36, linetype = 2) + \n    coord_trans(x = \"log2\") +\n    scale_x_continuous(breaks = c(1, 5, 10, 20, 30)) +\n    labs(x = \"Number of Features \", y = \"Cross-validation error rate\") + \n    annotate(\"text\", \n             x = optimal - 6, \n             y = max(err.df$err.mean), \n             label = paste(\"Optimal = \", optimal, sep = \"\"),\n             color = \"red\") +\n    main_theme\n\npl\n\n20.4.5 最终分类模型\n在已经确定了mtry和ntree这两个关键参数的最优值，并选择了合适的特征数目之后，将这些参数和特征应用到随机森林模型的构建中。\n\nselected_biomarker &lt;- imp_biomarker %&gt;%\n  dplyr::filter(FeatureID %in% rownames(feature_Boruta)) %&gt;%\n  dplyr::slice(1:optimal)  \n\nselected_columns &lt;- c(\"Group\", selected_biomarker$FeatureID)\n\ntrainData_optimal &lt;- trainData_select %&gt;%\n  dplyr::select(all_of(selected_columns))\n\ntestData_optimal &lt;- testData_select %&gt;%\n  dplyr::select(all_of(selected_columns))\n\nset.seed(123)\nrf_fit_optimal\n结果：相比基础模型来说，最终模型降低了错误率。\n\n20.4.6 测试集验证\n\n混淆矩阵\n\nprint(caret::confusionMatrix(pred_raw, testData_optimal$Group))\n\nAUROC曲线：使用pROC::roc(Robin 等 2011)函数\n\n\nAUROC &lt;- function(\n    DataTest, \n    PredProb = pred_prob, \n    nfeature) {\n  \n  # plot\n  pl &lt;- ggplot(data = roc, aes(x = fpr, y = tpr)) +\n    geom_path(color = \"red\", size = 1) +\n    geom_abline(intercept = 0, slope = 1, \n                color = \"grey\", linewidth = 1, linetype = 2) +\n    labs(x = \"False Positive Rate (1 - Specificity)\",\n         y = \"True Positive Rate\",\n         title = paste0(\"AUROC (\", nfeature, \" Features)\")) +\n    annotate(\"text\", \n             x = 1 - rocbj_df$specificities[max_value_row] + 0.15, \n             y = rocbj_df$sensitivities[max_value_row] - 0.05, \n             label = paste0(threshold, \" (\", \n                            rocbj_df$specificities[max_value_row], \",\",\n                            rocbj_df$sensitivities[max_value_row], \")\"),\n             size=5, family=\"serif\") +\n    annotate(\"point\", \n             x = 1 - rocbj_df$specificities[max_value_row], \n             y = rocbj_df$sensitivities[max_value_row], \n             color = \"black\", size = 2) +    \n    annotate(\"text\", \n             x = .75, y = .25, \n             label = roc_CI_lab,\n             size = 5, family = \"serif\") +\n    coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +\n    theme_bw() +\n    theme(panel.background = element_rect(fill = \"transparent\"),\n          plot.title = element_text(size = 12, color = \"black\", face = \"bold\"),\n          axis.title = element_text(size = 11, color = \"black\", face = \"bold\"), \n          axis.text = element_text(size= 10, color = \"black\"),\n          axis.ticks.length = unit(0.4, \"lines\"),\n          axis.ticks = element_line(color = \"black\"),\n          axis.line = element_line(size = .5, color = \"black\"),\n          text = element_text(size = 8, color = \"black\", family = \"serif\"))\n  \n  res &lt;- list(rocobj = rocobj,\n              roc_CI = roc_CI_lab,\n              roc_pl = pl)\n  \n  return(res)\n}\n\nAUROC_res &lt;- AUROC(\n    DataTest = testData_select, \n    PredProb = pred_prob, \n    nfeature = optimal)\n\nAUROC_res$roc_pl\n\nAUPRC曲线：使用pROC::roc(Robin 等 2011)函数\n\n\nAUPRC &lt;- function(DataTest, PredProb, nfeature) {\n  \n  # plot\n  pl &lt;- ggplot(data = prc, aes(x = recall, y = precision)) +\n    geom_path(color = \"red\", size = 1) +\n    labs(x = \"Recall\",\n         y = \"Precision\",\n         title = paste0(\"AUPRC (\", nfeature, \" Features)\")) +\n    coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +\n    theme_bw() +\n    theme(panel.background = element_rect(fill = \"transparent\"),\n          plot.title = element_text(color = \"black\", size = 14, face = \"bold\"),\n          axis.ticks.length = unit(0.4, \"lines\"),\n          axis.ticks = element_line(color = \"black\"),\n          axis.line = element_line(size = .5, color = \"black\"),\n          axis.title = element_text(color = \"black\", size = 12, face = \"bold\"),\n          axis.text = element_text(color = \"black\", size = 10),\n          text = element_text(size = 8, color = \"black\", family = \"serif\"))\n  \n  res &lt;- list(dat_PR = dat_PR,\n              PC_pl = pl)\n  \n  return(res)\n} \n\nAUPRC_res &lt;- AUPRC(\n    DataTest = testData_select, \n    PredProb = pred_prob, \n    nfeature = optimal)\n\nAUPRC_res$PC_pl\n\n模型评估参数：使用pROC::roc(Robin 等 2011)和MLmetrics::PRAUC(Yan 2016)函数\n\n\nEvaluate_index &lt;- function(DataTest, PredProb, label, PredRaw) {\n  \n  # ROC object\n  rocobj &lt;- roc(DataTest$Group, PredProb[, 1])\n  \n  # confusionMatrix\n  con_matrix &lt;- table(PredRaw, DataTest$Group)\n  \n  threshold &lt;- rocbj_df$threshold[max_value_row]\n  sen &lt;- round(TP / (TP + FN), 3) # caret::sensitivity(con_matrix)\n  spe &lt;- round(TN / (TN + FP), 3) # caret::specificity(con_matrix)\n  acc &lt;- round((TP + TN) / (TP + TN + FP + FN), 3) # Accuracy\n  pre &lt;- round(TP / (TP + FP), 3) # precision\n  rec &lt;- round(TP / (TP + FN), 3) # recall\n  #F1S &lt;- round(2 * TP / (TP + TN + FP + FN + TP - TN), 3)# F1-Score\n  F1S &lt;- round(2 * TP / (2 * TP + FP + FN), 3)# F1-Score\n  youden &lt;- sen + spe - 1 # youden index\n  \n  \n  # AUROC\n  AUROC &lt;- round(as.numeric(auc(DataTest$Group, PredProb[, 1])), 3)\n  \n  # AUPRC\n  AUPRC &lt;- round(MLmetrics::PRAUC(y_pred = PredProb[, 1], \n                                  y_true = DataTest$Group), 3)  \n  \n  index_df &lt;- data.frame(Index = c(\"Threshold\", \"Sensitivity\",\n                                   \"Specificity\", \"Accuracy\",\n                                   \"Precision\", \"Recall\",\n                                   \"F1 Score\", \"Youden index\",\n                                   \"AUROC\", \"AUPRC\"),\n                         Value = c(threshold, sen, spe,\n                                   acc, pre, rec, F1S, \n                                   youden, AUROC, AUPRC)) %&gt;%\n    stats::setNames(c(\"Index\", label))\n  \n  return(index_df)\n}\n\nEvaluate_index(\n  DataTest = testData_select,\n  PredProb = pred_prob,\n  label = group_names[1],\n  PredRaw = pred_raw)\n结果：从表中我们可以看到以下指标及其对应的数值：\n\n阈值（Threshold）：0.585。阈值用于将模型的预测结果转换为具体的类别（例如，在二分类问题中，通常将预测概率大于阈值的样本视为正类，小于阈值的视为负类）。\n灵敏度（Sensitivity）：0.861。也称为真正率（True Positive Rate, TPR）或召回率（Recall），它表示所有实际为正样本的样本中，被模型正确预测为正样本的比例。\n特异度（Specificity）：0.429。也称为真负率（True Negative Rate, TNR），它表示所有实际为负样本的样本中，被模型正确预测为负样本的比例。\n准确率（Accuracy）：0.728。它表示模型在所有样本上的正确分类的比例。\n精度（Precision）：0.773。它表示所有被模型预测为正样本的样本中，实际为正样本的比例。\n召回率（Recall）：0.861（注意这个与Sensitivity的值是一样的，因为在二分类问题中，Sensitivity和Recall是等价的）。\nF1得分（F1Score）：0.814。它是精度和召回率的调和平均值，用于综合衡量两者的表现。\nYouden指数：0.290。它是一个用于评估诊断测试性能的指标，等于灵敏度与特异度之和减去1。\nAUROC（Area Under the Receiver Operating Characteristic Curve）：0.704。AUROC是一种衡量分类模型性能的指标，它表示ROC曲线下的面积。\nAUPRC（Area Under the Precision-Recall Curve）：0.220。AUPRC是另一种衡量分类模型性能的指标，特别适用于正样本数量远少于负样本的情况，它表示Precision-Recall曲线下的面积。",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Boruta RF</span>"
    ]
  },
  {
    "objectID": "biomarker-BorutaRF.html#sec-BorutaRF-model-biomarker",
    "href": "biomarker-BorutaRF.html#sec-BorutaRF-model-biomarker",
    "title": "20  Boruta RF",
    "section": "\n20.5 标记基因",
    "text": "20.5 标记基因\n通过Boruta特征筛选和随机森林交叉误差率，模型能够自动筛选出那些对预测结果具有显著影响的特征，因此被称为标记基因或显著特征。\n\noptimal_feature &lt;- imp_biomarker %&gt;%\n  dplyr::filter(FeatureID %in% rownames(feature_Boruta)) %&gt;%\n  dplyr::slice(1:optimal) %&gt;%\n  dplyr::select(FeatureID, MeanDecreaseAccuracy) %&gt;%\n  dplyr::arrange(MeanDecreaseAccuracy) %&gt;%\n  dplyr::mutate(FeatureID = forcats::fct_inorder(FeatureID))\n\nhead(optimal_feature)\n\n可视化特征\n\n\noptimal &lt;- 39\n\noptimal_feature_pl &lt;- imp_biomarker %&gt;%\n  dplyr::filter(FeatureID %in% rownames(feature_Boruta)) %&gt;%\n  dplyr::slice(1:optimal) %&gt;%\n  dplyr::select(FeatureID, MeanDecreaseAccuracy) %&gt;%\n  dplyr::arrange(MeanDecreaseAccuracy) %&gt;%\n  dplyr::mutate(FeatureID = forcats::fct_inorder(FeatureID)) %&gt;%\n  ggplot(aes(x = FeatureID, y = MeanDecreaseAccuracy))+\n    geom_bar(stat = \"identity\", fill = \"white\", color = \"blue\") +\n    labs(x = \"\", y = \"Mean decrease accuracy\") +\n    coord_flip() +\n    main_theme\n\noptimal_feature_pl\n\n提取特征的表达谱\n\n\nprofile_RF &lt;- profile[pmatch(optimal_feature$FeatureID,\n                              rownames(profile)), ]\n\nhead(profile_RF[, 1:6])",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Boruta RF</span>"
    ]
  },
  {
    "objectID": "biomarker-BorutaRF.html#sec-BorutaRF-output",
    "href": "biomarker-BorutaRF.html#sec-BorutaRF-output",
    "title": "20  Boruta RF",
    "section": "\n20.6 输出结果",
    "text": "20.6 输出结果\n\nif (!dir.exists(\"./data/result/ML/RF\")) {\n  dir.create(\"./data/result/ML/RF\", recursive = TRUE)\n}\n\nwrite.csv(optimal_feature, \"./data/result/ML/RF/HCC_RF_feature.csv\", row.names = F)\nwrite.table(profile_RF, \"./data/result/ML/RF/HCC_RF_profile.tsv\", row.names = T, sep = \"\\t\", quote = F)\nsave(AUROC_res, file = \"./data/result/ML/RF/HCC_RF_AUROC.RData\")\n\nif (!dir.exists(\"./data/result/Figure/\")) {\n  dir.create(\"./data/result/Figure/\", recursive = TRUE)\n}\n\npdf(\"./data/result/Figure/SFig3-D.pdf\", width = 5, height = 4)\n  plot(boruta.bank, xlab = \"\", xaxt = \"n\")\n  lz &lt;- lapply(1:ncol(boruta.bank$ImpHistory), function(i) {\n    boruta.bank$ImpHistory[is.finite(boruta.bank$ImpHistory[, i]), i]\n  })\n  names(lz) &lt;- colnames(boruta.bank$ImpHistory)\n  Labels &lt;- sort(sapply(lz, median))\n  axis(side = 1, las = 2, labels = names(Labels),\n  at = 1:ncol(boruta.bank$ImpHistory), cex.axis = 0.7)\ndev.off()\n\nggsave(\"./data/result/Figure/SFig3-E.pdf\", AUROC_res$roc_pl, width = 5, height = 4, dpi = 600) \nggsave(\"./data/result/Figure/SFig3-F.pdf\", optimal_feature_pl, width = 5, height = 5, dpi = 600)",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Boruta RF</span>"
    ]
  },
  {
    "objectID": "biomarker-BorutaRF.html#sec-BorutaRF-summary",
    "href": "biomarker-BorutaRF.html#sec-BorutaRF-summary",
    "title": "20  Boruta RF",
    "section": "\n20.7 总结",
    "text": "20.7 总结\n经过对差异基因进行Boruta特征筛选，成功识别出一组与特定生物学现象或条件紧密相关的基因子集。接着，利用随机森林模型进行进一步的特征选择，以找到在预测性能方面表现最佳的模型特征向量。通过这一详尽的模型训练和评估过程，最终确定了39个特征，这些特征在预测任务中展现出了相对不错的性能。这39个特征将被用于后续的分析，以进一步揭示这些差异基因在生物学过程中的作用机制和潜在价值。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] MLmetrics_1.1.3      Hmisc_5.1-2          pROC_1.18.5         \n [4] Boruta_8.0.0         mlbench_2.1-5        caret_6.0-94        \n [7] lattice_0.22-6       randomForest_4.7-1.1 Biobase_2.62.0      \n[10] BiocGenerics_0.48.1  data.table_1.15.4    lubridate_1.9.3     \n[13] forcats_1.0.0        stringr_1.5.1        dplyr_1.1.4         \n[16] purrr_1.0.2          readr_2.1.5          tidyr_1.3.1         \n[19] tibble_3.2.1         ggplot2_3.5.1        tidyverse_2.0.0     \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1     timeDate_4032.109    fastmap_1.1.1       \n [4] digest_0.6.35        rpart_4.1.23         timechange_0.3.0    \n [7] lifecycle_1.0.4      cluster_2.1.6        survival_3.7-0      \n[10] magrittr_2.0.3       compiler_4.3.3       rlang_1.1.3         \n[13] tools_4.3.3          utf8_1.2.4           yaml_2.3.8          \n[16] knitr_1.46           htmlwidgets_1.6.4    plyr_1.8.9          \n[19] foreign_0.8-86       withr_3.0.0          nnet_7.3-19         \n[22] grid_4.3.3           stats4_4.3.3         fansi_1.0.6         \n[25] colorspace_2.1-0     future_1.33.2        globals_0.16.3      \n[28] scales_1.3.0         iterators_1.0.14     MASS_7.3-60.0.1     \n[31] cli_3.6.2            rmarkdown_2.26       generics_0.1.3      \n[34] rstudioapi_0.16.0    future.apply_1.11.2  reshape2_1.4.4      \n[37] tzdb_0.4.0           splines_4.3.3        parallel_4.3.3      \n[40] BiocManager_1.30.23  base64enc_0.1-3      vctrs_0.6.5         \n[43] hardhat_1.3.1        Matrix_1.6-5         jsonlite_1.8.8      \n[46] hms_1.1.3            htmlTable_2.4.2      Formula_1.2-5       \n[49] listenv_0.9.1        foreach_1.5.2        gower_1.0.1         \n[52] recipes_1.0.10       glue_1.7.0           parallelly_1.37.1   \n[55] codetools_0.2-19     stringi_1.8.4        gtable_0.3.5        \n[58] munsell_0.5.1        pillar_1.9.0         htmltools_0.5.8.1   \n[61] ipred_0.9-14         lava_1.8.0           R6_2.5.1            \n[64] evaluate_0.23        backports_1.4.1      renv_1.0.0          \n[67] class_7.3-22         Rcpp_1.0.12          checkmate_2.3.1     \n[70] gridExtra_2.3        nlme_3.1-164         prodlim_2023.08.28  \n[73] xfun_0.43            pkgconfig_2.0.3      ModelMetrics_1.2.2.2\n\n\n\n\n\n\nHarrell Jr, Frank E, 和 Maintainer Frank E Harrell Jr. 2019. 《Package 〈hmisc〉》. CRAN2018 2019: 235–36.\n\n\nKuhn, Max. 2008. 《Building predictive models in R using the caret package》. Journal of statistical software 28: 1–26.\n\n\nKursa, Miron B, 和 Witold R Rudnicki. 2010. 《Feature selection with the Boruta package》. Journal of statistical software 36: 1–13.\n\n\nLiaw, Andy, Matthew Wiener, 等. 2002. 《Classification and regression by randomForest》. R news 2 (3): 18–22.\n\n\nRobin, Xavier, Natacha Turck, Alexandre Hainard, Natalia Tiberti, Frédérique Lisacek, Jean-Charles Sanchez, 和 Markus Müller. 2011. 《pROC: an open-source package for R and S+ to analyze and compare ROC curves》. BMC bioinformatics 12: 1–8.\n\n\nYan, Yachen. 2016. 《MLmetrics: Machine Learning Evaluation Metrics》. https://github.com/yanyachen/MLmetrics.",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Boruta RF</span>"
    ]
  },
  {
    "objectID": "biomarker-RefSVM.html",
    "href": "biomarker-RefSVM.html",
    "title": "21  REF SVM",
    "section": "",
    "text": "21.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(Biobase)\nlibrary(data.table)\nlibrary(caret)\nlibrary(e1071)\nlibrary(mlbench)\nlibrary(pROC)\nlibrary(Hmisc)\nlibrary(MLmetrics)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>REF SVM</span>"
    ]
  },
  {
    "objectID": "biomarker-RefSVM.html#sec-REFSVM-importdata",
    "href": "biomarker-RefSVM.html#sec-REFSVM-importdata",
    "title": "21  REF SVM",
    "section": "\n21.2 导入数据",
    "text": "21.2 导入数据\n\n差异结果来自于 章节 11；\nExpressionSet来自于 章节 9。\n\n\nda_res &lt;- read.csv(\"./data/result/DA/HCC_Early_vs_Late_limma_select.csv\")\n\nExprSet &lt;- readRDS(\"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\")",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>REF SVM</span>"
    ]
  },
  {
    "objectID": "biomarker-RefSVM.html#sec-REFSVM-preparedata",
    "href": "biomarker-RefSVM.html#sec-REFSVM-preparedata",
    "title": "21  REF SVM",
    "section": "\n21.3 准备数据",
    "text": "21.3 准备数据\n\n差异基因：结果解析见 表 11.1\n\n\n\nsignif_DEG &lt;- da_res %&gt;%\n  dplyr::filter(Enrichment != \"Nonsignif\") %&gt;%\n  dplyr::slice(-grep(\"\\\\.\", FeatureID))\n\nhead(signif_DEG[, 1:6])\n\n基因表达谱：行名是样本，列名是基因ID\n\n\nprofile &lt;- exprs(ExprSet) %&gt;%\n  as.data.frame()\nrownames(profile) &lt;- make.names(rownames(profile))\n\nhead(profile_DEG[, 1:6])\n\n去除共线性特征\n\n在机器学习中，数据预处理中使用去除共线性特征的方法，其主要目的是为了提升模型的性能、稳定性和准确性。以下是具体的几个原因：\n\n提高模型准确性：共线性特征指的是在数据集中存在高度相关性的特征。这些特征在建模时可能会提供冗余的信息，甚至可能导致模型过拟合，从而降低预测的准确性。通过去除共线性特征，可以减少这些冗余信息，使模型更加专注于关键信息，从而提高预测的准确性。\n提高模型稳定性：当数据集中存在共线性特征时，模型的参数可能会变得不稳定，对训练数据的微小变化都可能会产生较大的影响。通过去除共线性特征，可以降低模型的复杂性，提高模型的稳定性，使模型在面对新的、未见过的数据时能够保持较好的性能。\n加速模型训练：在训练模型时，如果数据集中存在大量的共线性特征，那么模型可能需要更多的时间和计算资源来找到最优的参数组合。通过去除共线性特征，可以减少模型的输入维度，降低模型的复杂性，从而加速模型的训练过程。\n\n常用的去除共线性特征的方法包括：\n\n方差膨胀因子（VIF）：VIF用于量化特征之间的共线性程度。当VIF值较高时，表示该特征与其他特征之间存在较强的共线性关系。可以通过设定一个阈值，将VIF值超过该阈值的特征进行剔除或合并。\n主成分分析（PCA）：PCA是一种常用的降维方法，它通过找到数据中的主要变化方向（即主成分）来降低数据的维度。PCA可以有效地去除共线性特征，因为它会生成一组新的、不相关的特征（即主成分），这些特征能够捕获原始数据中的大部分信息。\n相关系数分析：通过分析特征之间的相关系数，可以找出存在高度相关性的特征对。对于相关系数较高的特征对，可以选择其中一个特征进行保留，而将另一个特征进行剔除或合并。\n\n这里通过Hmisc::rcorr(Harrell Jr 和 Harrell Jr 2019)采用了相关系数分析去除共线性。\n\nif (file.exists(\"./data/result/ML/SVM/HCC_SVM_RM_profile.tsv\")) {\n  profile_remain &lt;- fread(\"./data/result/ML/SVM/HCC_SVM_RM_profile.tsv\", sep = \"\\t\") %&gt;%\n    tibble::column_to_rownames(\"V1\")\n} else {\n  \n  write.table(profile_remain, \"./data/result/ML/SVM/HCC_SVM_RM_profile.tsv\",\n              row.names = T, sep = \"\\t\", quote = F)\n}\n\nprint(dim(profile_remain))\n\n临床表型表：包含分组等信息\n\n\nmetadata &lt;- pData(ExprSet)\nhead(metadata[, 1:6])\n\n合并数据\n\n\nMergeData &lt;- metadata %&gt;%\n  dplyr::select(SampleID, Group) %&gt;%\n  dplyr::inner_join(profile_remain %&gt;%\n                      tibble::rownames_to_column(\"SampleID\"),\n                    by = \"SampleID\") %&gt;%\n  tibble::column_to_rownames(\"SampleID\") %&gt;%\n  dplyr::mutate(Group = recode(Group, \"Early Stage\" = \"Early\",\n                               \"Late Stage\" = \"Late\")) %&gt;%\n  dplyr::mutate(Group = factor(Group))\n\nhead(MergeData[, 1:6])",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>REF SVM</span>"
    ]
  },
  {
    "objectID": "biomarker-RefSVM.html#sec-REFSVM-model",
    "href": "biomarker-RefSVM.html#sec-REFSVM-model",
    "title": "21  REF SVM",
    "section": "\n21.4 机器学习特征筛选",
    "text": "21.4 机器学习特征筛选\n特征筛选步骤：\n\n数据分割：\n\n将原始数据集划分为训练集、验证集和测试集。通常，训练集用于模型训练，验证集用于调整超参数和选择最佳模型，测试集用于评估最终模型的性能。 划分比例可以根据数据集的大小和特性进行调整，但一般常见的比例是训练集占60%-80%，验证集和测试集各占10%-20%。\n\n数据转换：\n\n数据清洗：处理缺失值、异常值、重复值等。对于缺失值，可以使用均值、中位数、众数等填充，或采用插值法、机器学习预测等方法进行填充。\n特征编码：对于分类变量，需要进行编码以便模型能够处理。常见的编码方式包括独热编码（One-Hot Encoding）、标签编码（Label Encoding）等。\n特征离散化：将连续特征转换为离散类别，例如通过分箱操作。这有助于处理一些具有非线性关系的特征。\n特征标准化或归一化：对于不同量纲或不同分布的特征，需要进行标准化或归一化，以便模型能够更好地处理它们。\n\n特征筛选：\n\n相关性分析：计算每个特征与目标变量之间的相关性，如皮尔逊相关系数或斯皮尔曼等级相关系数。通过相关性分析，可以初步筛选出与目标变量强相关的特征。\n树模型重要性：利用决策树、随机森林等树模型评估特征的重要性。这些模型可以根据特征在树中分裂的贡献度来评估特征的重要性。\n启发式搜索策略：如前向序列选择方法，从空的候选集合出发，逐步添加与目标变量相关性最强的特征。\n全局最优搜索策略：如穷举法或分支界定法，从所有可能的特征组合中挑选出表现最优的特征子集。\n\n训练集构建模型：使用经过特征筛选的训练集数据构建机器学习模型。选择合适的机器学习算法，如逻辑回归、支持向量机、决策树、随机森林、神经网络等。\n调参：使用验证集对模型进行调参，优化模型的超参数。超参数是机器学习算法中需要人为设定的参数，如学习率、迭代次数、正则化参数等。 可以采用网格搜索（Grid Search）、随机搜索（Random Search）等方法进行调参。\n测试集评估模型：使用测试集对经过调参的模型进行评估，计算模型的性能指标，如准确率、精确率、召回率、F1分数、AUC-ROC等。根据评估结果选择性能最佳的模型作为最终模型。\n\n\n21.4.1 数据分割\n在机器学习的实践中，数据分割是一个至关重要的步骤，用于将原始数据集划分为训练集和测试集（使用了caret::createDataPartition (Kuhn 2008)）。\n\nset.seed(123)\n\ntrainIndex &lt;- caret::createDataPartition(\n          MergeData$Group, \n          p = 0.8, \n          list = FALSE, \n          times = 1)\n\ntrainData &lt;- MergeData[trainIndex, ]\nX_train &lt;- trainData[, -1]\ny_train &lt;- trainData[, 1]\n\ntestData &lt;- MergeData[-trainIndex, ]\nX_test &lt;- testData[, -1]\ny_test &lt;- testData[, 1]\n\n21.4.2 基础模型\n\nset.seed(123)\n\nbase.fit &lt;- e1071::svm(\n  Group ~ .,\n  data = trainData,\n  kernel = \"radial\")\n\nbase.fit\n\n21.4.3 Recursive Feature Elimination特征筛选\n递归特征消除（Recursive Feature Elimination，RFE）是一种基于模型的特征选择方法，其原理是通过反复训练模型和剔除最不重要特征的方式来选择最优的特征子集。以下是RFE特征筛选的具体步骤：\n\nif (!file.exists(\"./data/result/ML/SVM/SVM_preData.RData\")) {\n  set.seed(123)\n  \n  if (!dir.exists(\"./data/result/ML/SVM\")) {\n    dir.create(\"./data/result/ML/SVM\", recursive = TRUE)\n  }\n\n  save(X_train, y_train, X_test, y_test, fs_rfe,\n       file = \"./data/result/ML/SVM/SVM_preData.RData\")\n} else {\n  load(\"./data/result/ML/SVM/SVM_preData.RData\")\n}\n\nprint(fs_rfe)\n#list the chosen features\npredictors(fs_rfe)[1:41]\nplot(fs_rfe, type = c(\"g\", \"o\"))\n\ntrainData_select &lt;- trainData %&gt;%\n  dplyr::select(all_of(c(\"Group\", feature_rfe)))\nX_train_select &lt;- trainData_select[, -1]\ny_train_select &lt;- trainData_select[, 1]\n\ntestData_select &lt;- testData %&gt;%\n  dplyr::select(all_of(c(\"Group\", feature_rfe)))\nX_test_select &lt;- testData_select[, -1]\ny_test_select &lt;- testData_select[, 1]\n\n21.4.4 调参\n\nset.seed(123)\n\nif (file.exists(\"./data/result/ML/SVM/HCC_SVM_tuneFit.RData\")) {\n  load(\"./data/result/ML/SVM/HCC_SVM_tuneFit.RData\")\n} else {\n\n  set.seed(123)\n  tune_fit &lt;- train(\n    Group ~.,\n    data = trainData_select,\n    method = \"svmLinear\", # svmRadial svmLinear svmRadialCost\n    trControl = myControl,\n    tuneGrid = tuneGrid)\n  \n  save(tune_fit, file = \"./data/result/ML/SVM/HCC_SVM_tuneFit.RData\")\n}\n\n## Plot model accuracy vs different values of Cost\nprint(plot(tune_fit))\n\n## Print the best tuning parameter that maximizes model accuracy\noptimalVar &lt;- data.frame(tune_fit$results[which.max(tune_fit$results[, 3]), ])\nprint(optimalVar)\n\n21.4.5 最终分类模型\n在已经通过适当的参数调优确定了Cost关键参数的值之后，可以基于这些参数构建最终的SVM（支持向量机）模型。这个模型将使用选定的Cost值来控制对误差的容忍度，从而确保模型在训练数据上具有良好的拟合能力，并在未知数据上保持优秀的泛化性能。\n\noptimal &lt;- length(fs_rfe$optVariables[1:selected_num])\nselected_columns &lt;- c(\"Group\", fs_rfe$optVariables[1:selected_num])\n\ntrainData_optimal &lt;- trainData_select %&gt;%\n  dplyr::select(all_of(selected_columns))\n\ntestData_optimal &lt;- testData_select %&gt;%\n  dplyr::select(all_of(selected_columns))\n\nset.seed(123)\n\nsvm_fit_optimal\n\n21.4.6 测试集验证\n首先，将训练好的模型应用于测试集数据，以预测每个样本的分类标签。预测结果将与测试集的真实标签进行对比，以计算模型在各个类别上的分类准确性。\n为了更详细地了解模型的性能，构建混淆矩阵。混淆矩阵是一个N x N的表格（其中N为分类类别数），用于显示每个类别下的真实标签与预测标签之间的对比情况。通过混淆矩阵，可以计算出精确度（Precision）、召回率（Recall）、F1分数（F1-Score）等评估指标，这些指标能够全面反映模型在各类别上的分类效果。\n此外，还可以绘制ROC曲线来评估模型的性能。ROC曲线是通过设置不同的分类阈值，计算真正例率（True Positive Rate，TPR）和假正例率（False Positive Rate，FPR）得到的。ROC曲线越靠近左上角，说明模型在保持较低假正例率的同时，能够获得较高的真正例率，即模型的性能越好。\n通过混淆矩阵和ROC曲线，可以全面、客观地评估机器学习模型在测试集上的性能。\n\n混淆矩阵\n\nprint(caret::confusionMatrix(pred_raw, testData_optimal$Group))\n\nAUROC曲线：使用pROC::roc(Robin 等 2011)函数\n\n\nAUROC &lt;- function(\n    DataTest, \n    PredProb = pred_prob, \n    nfeature) {\n  \n  # plot\n  pl &lt;- ggplot(data = roc, aes(x = fpr, y = tpr)) +\n    geom_path(color = \"red\", size = 1) +\n    geom_abline(intercept = 0, slope = 1, \n                color = \"grey\", linewidth = 1, linetype = 2) +\n    labs(x = \"False Positive Rate (1 - Specificity)\",\n         y = \"True Positive Rate\",\n         title = paste0(\"AUROC (\", nfeature, \" Features)\")) +\n    annotate(\"text\", \n             x = 1 - rocbj_df$specificities[max_value_row] + 0.15, \n             y = rocbj_df$sensitivities[max_value_row] - 0.05, \n             label = paste0(threshold, \" (\", \n                            rocbj_df$specificities[max_value_row], \",\",\n                            rocbj_df$sensitivities[max_value_row], \")\"),\n             size = 5, family = \"serif\") +\n    annotate(\"point\", \n             x = 1 - rocbj_df$specificities[max_value_row], \n             y = rocbj_df$sensitivities[max_value_row], \n             color = \"black\", size = 2) +    \n    annotate(\"text\", \n             x = .75, y = .25, \n             label = roc_CI_lab,\n             size = 5, family = \"serif\") +\n    coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +\n    theme_bw() +\n    theme(panel.background = element_rect(fill = \"transparent\"),\n          plot.title = element_text(size = 12, color = \"black\", face = \"bold\"),\n          axis.title = element_text(size = 11, color = \"black\", face = \"bold\"), \n          axis.text = element_text(size= 10, color = \"black\"),\n          axis.ticks.length = unit(0.4, \"lines\"),\n          axis.ticks = element_line(color = \"black\"),\n          axis.line = element_line(size = .5, color = \"black\"),\n          text = element_text(size = 8, color = \"black\", family = \"serif\"))\n  \n  res &lt;- list(rocobj = rocobj,\n              roc_CI = roc_CI_lab,\n              roc_pl = pl)\n  \n  return(res)\n}\n\nAUROC_res &lt;- AUROC(\n    DataTest = testData_optimal, \n    PredProb = pred_prob, \n    nfeature = optimal)\n\nAUROC_res$roc_pl\n\nAUPRC曲线：使用pROC::roc(Robin 等 2011)函数\n\n\nAUPRC &lt;- function(DataTest, PredProb, nfeature) {\n  \n  # plot\n  pl &lt;- ggplot(data = prc, aes(x = recall, y = precision)) +\n    geom_path(color = \"red\", size = 1) +\n    labs(x = \"Recall\",\n         y = \"Precision\",\n         title = paste0(\"AUPRC (\", nfeature, \" Features)\")) +\n    coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +\n    theme_bw() +\n    theme(panel.background = element_rect(fill = \"transparent\"),\n          plot.title = element_text(color = \"black\", size = 14, face = \"bold\"),\n          axis.ticks.length = unit(0.4, \"lines\"),\n          axis.ticks = element_line(color = \"black\"),\n          axis.line = element_line(size = .5, color = \"black\"),\n          axis.title = element_text(color = \"black\", size = 12, face = \"bold\"),\n          axis.text = element_text(color = \"black\", size = 10),\n          text = element_text(size = 8, color = \"black\", family = \"serif\"))\n  \n  res &lt;- list(dat_PR = dat_PR,\n              PC_pl = pl)\n  \n  return(res)\n} \n\nAUPRC_res &lt;- AUPRC(\n    DataTest = testData_optimal, \n    PredProb = pred_prob, \n    nfeature = optimal)\n\nAUPRC_res$PC_pl\n\n模型评估参数：使用pROC::roc(Robin 等 2011)和MLmetrics::PRAUC(Yan 2016)函数\n\n\nEvaluate_index &lt;- function(DataTest, PredProb, label, PredRaw) {\n  \n  threshold &lt;- rocbj_df$threshold[max_value_row]\n  sen &lt;- round(TP / (TP + FN), 3) # caret::sensitivity(con_matrix)\n  spe &lt;- round(TN / (TN + FP), 3) # caret::specificity(con_matrix)\n  acc &lt;- round((TP + TN) / (TP + TN + FP + FN), 3) # Accuracy\n  pre &lt;- round(TP / (TP + FP), 3) # precision\n  rec &lt;- round(TP / (TP + FN), 3) # recall\n  #F1S &lt;- round(2 * TP / (TP + TN + FP + FN + TP - TN), 3)# F1-Score\n  F1S &lt;- round(2 * TP / (2 * TP + FP + FN), 3)# F1-Score\n  youden &lt;- sen + spe - 1 # youden index\n  \n  \n  # AUROC\n  AUROC &lt;- round(as.numeric(auc(DataTest$Group, PredProb[, 1])), 3)\n  \n  # AUPRC\n  AUPRC &lt;- round(MLmetrics::PRAUC(y_pred = PredProb[, 1], \n                                  y_true = DataTest$Group), 3)  \n  \n  index_df &lt;- data.frame(Index = c(\"Threshold\", \"Sensitivity\",\n                                   \"Specificity\", \"Accuracy\",\n                                   \"Precision\", \"Recall\",\n                                   \"F1 Score\", \"Youden index\",\n                                   \"AUROC\", \"AUPRC\"),\n                         Value = c(threshold, sen, spe,\n                                   acc, pre, rec, F1S, \n                                   youden, AUROC, AUPRC)) %&gt;%\n    stats::setNames(c(\"Index\", label))\n  \n  return(index_df)\n}\n\nEvaluate_index(\n  DataTest = testData_optimal,\n  PredProb = pred_prob,\n  label = group_names[1],\n  PredRaw = pred_raw)\n结果：从表中我们可以看到以下指标及其对应的数值：\n\n阈值（Threshold）：0.598。阈值用于将模型的预测结果转换为具体的类别（例如，在二分类问题中，通常将预测概率大于阈值的样本视为正类，小于阈值的视为负类）。\n灵敏度（Sensitivity）：0.911。也称为真正率（True Positive Rate, TPR）或召回率（Recall），它表示所有实际为正样本的样本中，被模型正确预测为正样本的比例。\n特异度（Specificity）：0.343。也称为真负率（True Negative Rate, TNR），它表示所有实际为负样本的样本中，被模型正确预测为负样本的比例。\n准确率（Accuracy）：0.737。它表示模型在所有样本上的正确分类的比例。\n精度（Precision）：0.758。它表示所有被模型预测为正样本的样本中，实际为正样本的比例。\n召回率（Recall）：0.911（注意这个与Sensitivity的值是一样的，因为在二分类问题中，Sensitivity和Recall是等价的）。\nF1得分（F1Score）：0.828。它是精度和召回率的调和平均值，用于综合衡量两者的表现。\nYouden指数：0.254。它是一个用于评估诊断测试性能的指标，等于灵敏度与特异度之和减去1。\nAUROC（Area Under the Receiver Operating Characteristic Curve）：0.663。AUROC是一种衡量分类模型性能的指标，它表示ROC曲线下的面积。\nAUPRC（Area Under the Precision-Recall Curve）：0.231。AUPRC是另一种衡量分类模型性能的指标，特别适用于正样本数量远少于负样本的情况，它表示Precision-Recall曲线下的面积。",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>REF SVM</span>"
    ]
  },
  {
    "objectID": "biomarker-RefSVM.html#sec-REFSVM-model-biomarker",
    "href": "biomarker-RefSVM.html#sec-REFSVM-model-biomarker",
    "title": "21  REF SVM",
    "section": "\n21.5 标记基因",
    "text": "21.5 标记基因\n通过REF特征筛选，模型能够自动筛选出那些对预测结果具有显著影响的特征，因此被称为标记基因或显著特征。\n\noptimal_feature &lt;- fs_rfe$variables %&gt;%\n  dplyr::rename(FeatureID = var) %&gt;%\n  dplyr::filter(FeatureID %in% fs_rfe$optVariables[1:selected_num]) %&gt;%\n  dplyr::inner_join(fs_rfe$results, by = \"Variables\") %&gt;%\n  dplyr::select(FeatureID, Accuracy, Kappa, AccuracySD, KappaSD) %&gt;%\n  dplyr::arrange(Accuracy) %&gt;%\n  dplyr::mutate(FeatureID = forcats::fct_inorder(FeatureID))\n\noptimal_feature &lt;- optimal_feature[pmatch(unique(optimal_feature$FeatureID),\n                                          optimal_feature$FeatureID), ,]\n\nhead(optimal_feature)\n\n提取特征的表达谱\n\n\nprofile_SVM &lt;- profile[pmatch(optimal_feature$FeatureID,\n                              rownames(profile)), ]\n\nhead(profile_SVM[, 1:6])",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>REF SVM</span>"
    ]
  },
  {
    "objectID": "biomarker-RefSVM.html#sec-REFSVM-output",
    "href": "biomarker-RefSVM.html#sec-REFSVM-output",
    "title": "21  REF SVM",
    "section": "\n21.6 输出结果",
    "text": "21.6 输出结果\n\n\nif (!dir.exists(\"./data/result/ML/SVM\")) {\n  dir.create(\"./data/result/ML/SVM\", recursive = TRUE)\n}\n\nwrite.csv(optimal_feature, \"./data/result/ML/SVM/HCC_SVM_feature.csv\", row.names = F)\nwrite.table(profile_SVM, \"./data/result/ML/SVM/HCC_SVM_profile.tsv\", row.names = T, sep = \"\\t\", quote = F)\nsave(AUROC_res, file = \"./data/result/ML/SVM/HCC_SVM_AUROC.RData\")\n\nif (!dir.exists(\"./data/result/Figure/\")) {\n  dir.create(\"./data/result/Figure/\", recursive = TRUE)\n}\n\npdf(\"./data/result/Figure/SFig3-G.pdf\", width = 5, height = 4)\nplot(fs_rfe, type = c(\"g\", \"o\"))\ndev.off()\n\nggsave(\"./data/result/Figure/SFig3-H.pdf\", AUROC_res$roc_pl, width = 5, height = 4, dpi = 600)",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>REF SVM</span>"
    ]
  },
  {
    "objectID": "biomarker-RefSVM.html#sec-REFSVM-summary",
    "href": "biomarker-RefSVM.html#sec-REFSVM-summary",
    "title": "21  REF SVM",
    "section": "\n21.7 总结",
    "text": "21.7 总结\n经过对差异基因进行REF特征筛选，成功识别出一组与特定生物学现象或条件紧密相关的基因子集。接着，利用支持向量机构建预测模型。通过这一详尽的模型训练和评估过程，最终确定了41个特征，这些特征在预测任务中展现出了相对不错的性能（需要注意，它在Late分期预测不好）。这41个特征将被用于后续的分析，以进一步揭示这些差异基因在生物学过程中的作用机制和潜在价值。\n\n\n\n\n\n\n警告\n\n\n\n相比其他两种机器学习方法（见 章节 19 和 章节 20）得到的预测模型，REF+SVM的预测模型在Late分期样本预测效果相对不佳。\n\n\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] MLmetrics_1.1.3     Hmisc_5.1-2         pROC_1.18.5        \n [4] mlbench_2.1-5       e1071_1.7-14        caret_6.0-94       \n [7] lattice_0.22-6      data.table_1.15.4   Biobase_2.62.0     \n[10] BiocGenerics_0.48.1 lubridate_1.9.3     forcats_1.0.0      \n[13] stringr_1.5.1       dplyr_1.1.4         purrr_1.0.2        \n[16] readr_2.1.5         tidyr_1.3.1         tibble_3.2.1       \n[19] ggplot2_3.5.1       tidyverse_2.0.0    \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1     timeDate_4032.109    fastmap_1.1.1       \n [4] digest_0.6.35        rpart_4.1.23         timechange_0.3.0    \n [7] lifecycle_1.0.4      cluster_2.1.6        survival_3.7-0      \n[10] magrittr_2.0.3       compiler_4.3.3       rlang_1.1.3         \n[13] tools_4.3.3          utf8_1.2.4           yaml_2.3.8          \n[16] knitr_1.46           htmlwidgets_1.6.4    plyr_1.8.9          \n[19] foreign_0.8-86       withr_3.0.0          nnet_7.3-19         \n[22] grid_4.3.3           stats4_4.3.3         fansi_1.0.6         \n[25] colorspace_2.1-0     future_1.33.2        globals_0.16.3      \n[28] scales_1.3.0         iterators_1.0.14     MASS_7.3-60.0.1     \n[31] cli_3.6.2            rmarkdown_2.26       generics_0.1.3      \n[34] rstudioapi_0.16.0    future.apply_1.11.2  reshape2_1.4.4      \n[37] tzdb_0.4.0           proxy_0.4-27         splines_4.3.3       \n[40] parallel_4.3.3       BiocManager_1.30.23  base64enc_0.1-3     \n[43] vctrs_0.6.5          hardhat_1.3.1        Matrix_1.6-5        \n[46] jsonlite_1.8.8       hms_1.1.3            htmlTable_2.4.2     \n[49] Formula_1.2-5        listenv_0.9.1        foreach_1.5.2       \n[52] gower_1.0.1          recipes_1.0.10       glue_1.7.0          \n[55] parallelly_1.37.1    codetools_0.2-19     stringi_1.8.4       \n[58] gtable_0.3.5         munsell_0.5.1        pillar_1.9.0        \n[61] htmltools_0.5.8.1    ipred_0.9-14         lava_1.8.0          \n[64] R6_2.5.1             evaluate_0.23        backports_1.4.1     \n[67] renv_1.0.0           class_7.3-22         Rcpp_1.0.12         \n[70] checkmate_2.3.1      gridExtra_2.3        nlme_3.1-164        \n[73] prodlim_2023.08.28   xfun_0.43            pkgconfig_2.0.3     \n[76] ModelMetrics_1.2.2.2\n\n\n\n\n\n\nHarrell Jr, Frank E, 和 Maintainer Frank E Harrell Jr. 2019. 《Package 〈hmisc〉》. CRAN2018 2019: 235–36.\n\n\nKuhn, Max. 2008. 《Building predictive models in R using the caret package》. Journal of statistical software 28: 1–26.\n\n\nRobin, Xavier, Natacha Turck, Alexandre Hainard, Natalia Tiberti, Frédérique Lisacek, Jean-Charles Sanchez, 和 Markus Müller. 2011. 《pROC: an open-source package for R and S+ to analyze and compare ROC curves》. BMC bioinformatics 12: 1–8.\n\n\nYan, Yachen. 2016. 《MLmetrics: Machine Learning Evaluation Metrics》. https://github.com/yanyachen/MLmetrics.",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>REF SVM</span>"
    ]
  },
  {
    "objectID": "biomarker-intersect.html",
    "href": "biomarker-intersect.html",
    "title": "22  交集特征",
    "section": "",
    "text": "22.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(ggvenn)\nlibrary(UpSetR)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>交集特征</span>"
    ]
  },
  {
    "objectID": "biomarker-intersect.html#sec-intersect-importdata",
    "href": "biomarker-intersect.html#sec-intersect-importdata",
    "title": "22  交集特征",
    "section": "\n22.2 导入数据",
    "text": "22.2 导入数据\n\nLASSO_feature结果来自于 章节 19 ；\nRF_feature结果来自于 章节 20 ；\nSVM_feature结果来自于 章节 21 。\n\n\nLASSO_feature &lt;- read.csv(\"./data/result/ML/LASSO/HCC_LASSO_feature.csv\")\nRF_feature &lt;- read.csv(\"./data/result/ML/RF/HCC_RF_feature.csv\")\nSVM_feature &lt;- read.csv(\"./data/result/ML/SVM/HCC_SVM_feature.csv\")",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>交集特征</span>"
    ]
  },
  {
    "objectID": "biomarker-intersect.html#sec-intersect-overlap",
    "href": "biomarker-intersect.html#sec-intersect-overlap",
    "title": "22  交集特征",
    "section": "\n22.3 重叠的重要特征",
    "text": "22.3 重叠的重要特征\n在通过三种不同的机器学习方法筛选特征后，取这些特征集合的交集。位于这个交集内的基因，将其视为具有显著重要性的特征，这些特征对于所研究的问题具有共同的、关键的影响。\n\nfeature_list &lt;- list(\n  LASSO = LASSO_feature$FeatureID,\n  RF_Boruta = RF_feature$FeatureID,\n  SVM_RFE = SVM_feature$FeatureID\n)\n\nover_LASSO_RF &lt;- intersect(LASSO_feature$FeatureID,\n                           RF_feature$FeatureID)\nover_SVM_RF &lt;- intersect(SVM_feature$FeatureID,\n                         RF_feature$FeatureID)\nover_LASSO_SVM &lt;- intersect(LASSO_feature$FeatureID,\n                         SVM_feature$FeatureID)\n\nover_gene_three &lt;- df_int_gene %&gt;%\n  dplyr::filter(int %in% c(\"LASSO|RF_Boruta|SVM_RFE\")) \n\nhead(over_gene_three)",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>交集特征</span>"
    ]
  },
  {
    "objectID": "biomarker-intersect.html#sec-intersect-Venn",
    "href": "biomarker-intersect.html#sec-intersect-Venn",
    "title": "22  交集特征",
    "section": "\n22.4 重要特征的韦恩图",
    "text": "22.4 重要特征的韦恩图\n\n采用UpSetR(Conway, Lex, 和 Gehlenborg 2017)R包画交集图\n\n\nupset_pl &lt;- UpSetR::upset(\n  data = UpSetR::fromList(feature_list),\n  nsets = 3, \n  sets = c(\"LASSO\", \"RF_Boruta\", \"SVM_RFE\"),\n  sets.bar.color = c(\"#CD534CFF\", \"#EFC000FF\", \"#0073C2FF\"))\n\nupset_pl\n\n采用ggvenn(Yan 和 Yan 2021)R包画交集图\n\n\nvenn_pl &lt;- ggvenn(\n  data = feature_list, \n  fill_color = c(\"#0073C2FF\", \"#EFC000FF\", \"#CD534CFF\"),\n  stroke_size = 0.5, \n  set_name_size = 4,\n  show_percentage = FALSE)\n\nvenn_pl",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>交集特征</span>"
    ]
  },
  {
    "objectID": "biomarker-intersect.html#sec-intersect-output",
    "href": "biomarker-intersect.html#sec-intersect-output",
    "title": "22  交集特征",
    "section": "\n22.5 输出结果",
    "text": "22.5 输出结果\n\nif (!dir.exists(\"./data/result/Biomarker/\")) {\n  dir.create(\"./data/result/Biomarker/\", recursive = TRUE)\n}\n\nwrite.csv(over_gene_three, \"./data/result/Biomarker/Biomarker_LR_RF_SVM.csv\", row.names = F)\n\n\nif (!dir.exists(\"./data/result/Figure/\")) {\n  dir.create(\"./data/result/Figure/\", recursive = TRUE)\n}\n\npdf(\"./data/result/Figure/Fig5-A1.pdf\", width = 7, height = 5, onefile = FALSE)\nupset_pl\ndev.off()\n\nggsave(\"./data/result/Figure/Fig5-A2.pdf\", venn_pl, width = 5, height = 4, dpi = 600)",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>交集特征</span>"
    ]
  },
  {
    "objectID": "biomarker-intersect.html#sec-intersect-summary",
    "href": "biomarker-intersect.html#sec-intersect-summary",
    "title": "22  交集特征",
    "section": "\n22.6 总结",
    "text": "22.6 总结\n采用了三种不同的机器学习算法来筛选与表型或疾病状态紧密相关的基因特征。这三种算法分别是LASSO+LR]、Boruta+RF和REF+SVM*，它们各自基于不同的统计原理和假设，以识别与目标变量显著相关的基因。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] grid      stats     graphics  grDevices datasets  utils     methods  \n[8] base     \n\nother attached packages:\n [1] UpSetR_1.4.0      ggvenn_0.1.10     data.table_1.15.4 lubridate_1.9.3  \n [5] forcats_1.0.0     stringr_1.5.1     dplyr_1.1.4       purrr_1.0.2      \n [9] readr_2.1.5       tidyr_1.3.1       tibble_3.2.1      ggplot2_3.5.1    \n[13] tidyverse_2.0.0  \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.5        jsonlite_1.8.8      compiler_4.3.3     \n [4] BiocManager_1.30.23 renv_1.0.0          Rcpp_1.0.12        \n [7] tidyselect_1.2.1    gridExtra_2.3       scales_1.3.0       \n[10] yaml_2.3.8          fastmap_1.1.1       plyr_1.8.9         \n[13] R6_2.5.1            generics_0.1.3      knitr_1.46         \n[16] htmlwidgets_1.6.4   munsell_0.5.1       tzdb_0.4.0         \n[19] pillar_1.9.0        rlang_1.1.3         utf8_1.2.4         \n[22] stringi_1.8.4       xfun_0.43           timechange_0.3.0   \n[25] cli_3.6.2           withr_3.0.0         magrittr_2.0.3     \n[28] digest_0.6.35       rstudioapi_0.16.0   hms_1.1.3          \n[31] lifecycle_1.0.4     vctrs_0.6.5         evaluate_0.23      \n[34] glue_1.7.0          fansi_1.0.6         colorspace_2.1-0   \n[37] rmarkdown_2.26      tools_4.3.3         pkgconfig_2.0.3    \n[40] htmltools_0.5.8.1  \n\n\n\n\n\n\nConway, Jake R, Alexander Lex, 和 Nils Gehlenborg. 2017. 《UpSetR: an R package for the visualization of intersecting sets and their properties》. Bioinformatics 33 (18): 2938–40.\n\n\nYan, Linlin, 和 Maintainer Linlin Yan. 2021. 《Package 〈ggvenn.〉》 Google Scholar.",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>交集特征</span>"
    ]
  },
  {
    "objectID": "biomarker-validation.html",
    "href": "biomarker-validation.html",
    "title": "23  验证特征",
    "section": "",
    "text": "23.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(Biobase)\nlibrary(pROC)\nlibrary(multipleROC)\nlibrary(ggdist)\nlibrary(gghalves)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>验证特征</span>"
    ]
  },
  {
    "objectID": "biomarker-validation.html#sec-validate-importdata",
    "href": "biomarker-validation.html#sec-validate-importdata",
    "title": "23  验证特征",
    "section": "\n23.2 导入数据",
    "text": "23.2 导入数据\n\ncommon_feature结果来自于 章节 22 ；\nExpressionSet来自于 章节 9。\n\n\ncommon_feature &lt;- read.csv(\"./data/result/Biomarker/Biomarker_LR_RF_SVM.csv\")\n\nExprSet &lt;- readRDS(\"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\")\n\nExprSet_GSE14520 &lt;- readRDS(\"./data/result/ExpSetObject/GSE14520_ExpSet_counts.RDS\")",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>验证特征</span>"
    ]
  },
  {
    "objectID": "biomarker-validation.html#sec-validate-overlap",
    "href": "biomarker-validation.html#sec-validate-overlap",
    "title": "23  验证特征",
    "section": "\n23.3 函数",
    "text": "23.3 函数\n\nget_raincloud：组间表达值的云雨图，使用ggdist(Kay 2023)和gghalves(Tiedemann 2022)R包；\nget_ROC：特征的ROC曲线，使用multipleROC(Moon 2019)R包。\n\n\nget_raincloud &lt;- function(\n  dat,\n  group,\n  group_names = grp_names,\n  group_colors = grp_colors,\n  measures,\n  angle = 30) {\n  \n  MergeData &lt;- metadata %&gt;%\n    dplyr::select(SampleID, Group) %&gt;%\n    dplyr::inner_join(profile %&gt;%\n                        tibble::rownames_to_column(\"SampleID\"),\n                      by = \"SampleID\") %&gt;%\n    tibble::column_to_rownames(\"SampleID\") %&gt;%\n    dplyr::mutate(Group = factor(Group, levels = grp_names))  \n  \n  # group for plot x-label  \n  dat_cln2 &lt;- MergeData\n  colnames(dat_cln2)[which(colnames(dat_cln2) == group)] &lt;- \"Group_new\"\n  \n  if (group_names[1] == \"all\") {\n    tempdata &lt;- dat_cln2\n  } else {\n    tempdata &lt;- dat_cln2 %&gt;%\n      dplyr::filter(Group_new %in% group_names)\n  }\n  tempdata$Group_new &lt;- factor(tempdata$Group_new, levels = group_names)\n  \n  if (length(measures) &gt; 1) {\n    pl &lt;- ggplot(plotdata, aes(x = Group_new, y = Values, fill = Group_new)) +\n      ggdist::stat_halfeye(adjust = 0.5, width = 0.3,\n                           .width = 0, justification = -0.3, point_colour = NA) +\n      stat_boxplot(aes(color = Group_new), geom = \"errorbar\", width = 0.1) +    \n      geom_boxplot(width = 0.1, outlier.shape = NA) + \n      gghalves::geom_half_point(side = \"l\", range_scale = 0.4, alpha = 0.5) +\n      stat_summary(geom = \"crossbar\", width = 0.08, fatten = 0, color = \"white\", \n               fun.data = function(x){c(y = median(x), ymin = median(x), ymax = median(x))}) +       \n      labs(x = \"\", y = \"Value\") + \n      scale_fill_manual(values = group_colors) +\n      scale_color_manual(values = group_colors) +\n      guides(fill = \"none\", color = \"none\") + \n      scale_y_continuous(expand = expansion(mult = c(0.1, 0.1))) +\n      ggpubr::stat_compare_means(method = \"wilcox.test\",\n                                 comparisons = cmp) +\n      facet_wrap(.~ Index, scales = \"free\", nrow = 2) +      \n      theme_bw() +\n      theme(axis.title.y = element_text(size = 11, face = \"bold\"),\n            axis.text.y = element_text(size = 10),\n            axis.text.x = element_text(size = 9, hjust = .5, vjust = .5, angle = angle),\n            strip.text = element_text(size = 10, face = \"bold\", color = \"black\"),\n            text = element_text(family = \"serif\"))    \n  } else {\n    pl &lt;- ggplot(plotdata, aes(x = Group_new, y = Values, fill = Group_new)) +\n      ggdist::stat_halfeye(adjust = 0.5, width = 0.3,\n                           .width = 0, justification = -0.3, point_colour = NA) +\n      stat_boxplot(aes(color = Group_new), geom = \"errorbar\", width = 0.1) +    \n      geom_boxplot(width = 0.1, outlier.shape = NA) + \n      gghalves::geom_half_point(side = \"l\", range_scale = 0.4, alpha = 0.5) +\n      stat_summary(geom = \"crossbar\", width = 0.08, fatten = 0, color = \"white\", \n               fun.data = function(x){c(y = median(x), ymin = median(x), ymax = median(x))}) +       \n      labs(x = \"\", y = measures) + \n      scale_fill_manual(values = group_colors) +\n      scale_color_manual(values = group_colors) +\n      guides(fill = \"none\", color = \"none\") + \n      scale_y_continuous(expand = expansion(mult = c(0.1, 0.1))) +\n      ggpubr::stat_compare_means(method = \"wilcox.test\",\n                                 comparisons = cmp) +\n      theme_bw() +\n      theme(axis.title.y = element_text(size = 11, face = \"bold\"),\n            axis.text.y = element_text(size = 10),\n            axis.text.x = element_text(size = 9, hjust = .5, vjust = .5, angle = angle),\n            strip.text = element_text(size = 10, face = \"bold\", color = \"black\"),\n            text = element_text(family = \"serif\"))    \n  }\n  \n  return(pl)\n}\n\nget_ROC &lt;- function(\n    dat,\n    group,\n    index,\n    type = c(1, 2, 3)) {\n  \n  if (type == 1) {\n    print(with(dat_cln, roc(Stage ~ Feature)))\n  } else if (type == 2) {\n    pROC_obj &lt;- roc(\n      dat_cln$Stage,\n      dat_cln$Feature,\n      smoothed = TRUE,\n      # arguments for ci\n      ci = TRUE, \n      ci.alpha = 0.9, \n      stratified = FALSE,\n      # arguments for plot\n      plot = TRUE, \n      auc.polygon = TRUE, \n      max.auc.polygon = TRUE, \n      grid = TRUE,\n      print.auc = TRUE, \n      show.thres = TRUE)\n    \n    sens.ci &lt;- ci.se(pROC_obj)\n    plot(sens.ci, type = \"shape\", col = \"lightblue\")\n    plot(sens.ci, type = \"bars\")     \n  } else if (type == 3) {\n    multipleROC(Stage ~ Feature, data = dat_cln)\n  } else if (type == 4) {\n\n    ROC_fun &lt;- function (formula, data, plot = TRUE, threshold) {\n      fit = glm(formula, data = data, family = \"binomial\")\n      fit = glm(Stage ~ Feature, data = dat_cln, family = \"binomial\")\n      df = calSens(fit$fitted.values, fit$y)\n      no = which.max(df$sum)\n      cutpoint = threshold #df$x[no]\n      sens = paste(\"Sens:\", sprintf(\"%03.1f\", df[no, ]$sens * \n        100), \"%\\n\", \"Spec:\", sprintf(\"%03.1f\", df[no, ]$spec * \n        100), \"%\\n\", \"PPV:\", sprintf(\"%03.1f\", df[no, ]$ppv * \n        100), \"%\\n\", \"NPV:\", sprintf(\"%03.1f\", df[no, ]$npv * \n        100), \"%\\n\", sep = \"\")\n      auc = simpleAUC(df)\n      cutoff = fit$model[which(fit$fitted == cutpoint), ][-1]\n      result = list(fit = fit, df = df, cutpoint = cutpoint, sens = sens, \n        auc = auc, cutoff = cutoff)\n      class(result) = \"multipleROC\"\n      if (plot) \n        print(plot(result))\n      invisible(result)\n    }\n    ROC_fun(Stage ~ Feature, data = dat_cln, threshold = cutoff)\n  }\n}",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>验证特征</span>"
    ]
  },
  {
    "objectID": "biomarker-validation.html#sec-validate-expression",
    "href": "biomarker-validation.html#sec-validate-expression",
    "title": "23  验证特征",
    "section": "\n23.4 重要特征的表达",
    "text": "23.4 重要特征的表达\n\n采用云雨图展示组间差异结果（发现数据集）\n\n\nrain_dis_pl &lt;- get_raincloud(\n  dat = ExprSet,\n  group = \"Group\",\n  group_names = grp_names,\n  group_colors = grp_colors,\n  measures = common_feature$gene,\n  angle = 30)\n\nrain_dis_pl\n结果：重要特征在发现数据集的组间表达（wilcox.test的p值作为显著性水平）\n\n在癌症早期Early富集的基因：FTCD，CYP2C9，CNGA1，ACSL6；\n在癌症晚期Late富集的基因：SLC6A8，ANGPT2，ENO1，KCNJ15，SLC39A4，ETV1；\n\n\n采用云雨图展示组间差异结果（验证数据集GSE14520）\n\n\nrain_val_pl &lt;- get_raincloud(\n  dat = ExprSet_GSE14520,\n  group = \"Group\",\n  group_names = grp_names,\n  group_colors = grp_colors,\n  measures = common_feature$gene,\n  angle = 30)\n\nrain_val_pl\n\n重要特征的表达结果总结\n\n\ncommon_feature_consis_all &lt;- data.frame(\n  FeatureID = c(\"FTCD\", \"CYP2C9\", \"CNGA1\", \"SLC6A8\", \"ANGPT2\", \"ENO1\",\n                \"ACSL6\", \"KCNJ15\", \"ETV1\", \"SLC39A4\"),\n  Enrich = c(rep(\"Both_Early\", 3), rep(\"Both_Late\", 3), \n             rep(\"Non-consist\", 4))\n)\n\n\ncommon_feature_consis &lt;- data.frame(\n  FeatureID = c(\"FTCD\", \"CYP2C9\", \"CNGA1\", \"SLC6A8\", \"ANGPT2\", \"ENO1\"),\n  Enrich = c(rep(\"Both_Early\", 3), rep(\"Both_Late\", 3))\n)\n\nhead(common_feature_consis)",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>验证特征</span>"
    ]
  },
  {
    "objectID": "biomarker-validation.html#sec-validate-roc",
    "href": "biomarker-validation.html#sec-validate-roc",
    "title": "23  验证特征",
    "section": "\n23.5 ROC分析",
    "text": "23.5 ROC分析\nROC曲线（Receiver Operating Characteristic Curve）来评估每个核心特征区分肝癌（HCC）早晚期的能力。\n\n准备数据：发现和验证数据集合并元数据和表达谱\n\n\nMergeData_dis &lt;- pData(ExprSet) %&gt;%\n  dplyr::select(SampleID, Group) %&gt;%\n  dplyr::inner_join(exprs(ExprSet) %&gt;%\n                      as.data.frame() %&gt;%\n                      t() %&gt;%\n                      as.data.frame() %&gt;%\n                      tibble::rownames_to_column(\"SampleID\"),\n                    by = \"SampleID\") %&gt;%\n  tibble::column_to_rownames(\"SampleID\") %&gt;%\n  dplyr::mutate(Group = factor(Group, levels = grp_names))\n\nhead(MergeData_dis[, 1:6])\n\n\nMergeData_val &lt;- pData(ExprSet_GSE14520) %&gt;%\n  dplyr::select(SampleID, Group) %&gt;%\n  dplyr::inner_join(exprs(ExprSet_GSE14520) %&gt;%\n                      as.data.frame() %&gt;%\n                      t() %&gt;%\n                      as.data.frame() %&gt;%\n                      tibble::rownames_to_column(\"SampleID\"),\n                    by = \"SampleID\") %&gt;%\n  tibble::column_to_rownames(\"SampleID\") %&gt;%\n  dplyr::mutate(Group = factor(Group, levels = grp_names))\n\nhead(MergeData_val[, 1:6])\n\nROC曲线展示区分癌症分期能力（发现数据集）\n\n\nfor (gene in common_feature_consis$FeatureID) {\n\n  temp_roc_pl &lt;- get_ROC(\n      dat = MergeData_dis,\n      group = \"Group\",\n      index = gene,\n      type = 3)\n}\n\nROC曲线展示区分癌症分期能力（验证数据集GSE14520）\n\n\nfor (gene in common_feature_consis$FeatureID) {\n\n  temp_roc_pl &lt;- get_ROC(\n      dat = MergeData_val,\n      group = \"Group\",\n      index = gene,\n      type = 3)\n}",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>验证特征</span>"
    ]
  },
  {
    "objectID": "biomarker-validation.html#sec-validate-final",
    "href": "biomarker-validation.html#sec-validate-final",
    "title": "23  验证特征",
    "section": "\n23.6 汇总筛选结果",
    "text": "23.6 汇总筛选结果\n通过表达值一致性和AUC两个指标，我们确定了最终的候选核心特征，它们便是SLC6A8和ANGPT2，但SLC6A8的AUC在验证数据集更高一些。现在我们汇总这两个核心特征的表达值一致性和AUC结果。\n\n采用云雨图展示组间差异结果\n\n\nrain_dis_SLC6A8 &lt;- get_raincloud(\n  dat = ExprSet,\n  group = \"Group\",\n  group_names = grp_names,\n  group_colors = grp_colors,\n  measures = \"SLC6A8\",\n  angle = 30)\n\nrain_dis_SLC6A8\n\nrain_val_SLC6A8 &lt;- get_raincloud(\n  dat = ExprSet_GSE14520,\n  group = \"Group\",\n  group_names = grp_names,\n  group_colors = grp_colors,\n  measures = \"SLC6A8\",\n  angle = 30)\n\nrain_val_SLC6A8\n结果：核心特征SLC6A8在数据集的组间表达\n\nROC曲线展示区分癌症分期能力\n\n\ndis_roc_SLC6A8 &lt;- get_ROC(\n    dat = MergeData_dis,\n    group = \"Group\",\n    index = \"SLC6A8\",\n    type = 3)\n\nval_roc_SLC6A8 &lt;- get_ROC(\n    dat = MergeData_val,\n    group = \"Group\",\n    index = \"SLC6A8\",\n    type = 3)",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>验证特征</span>"
    ]
  },
  {
    "objectID": "biomarker-validation.html#sec-validate-output",
    "href": "biomarker-validation.html#sec-validate-output",
    "title": "23  验证特征",
    "section": "\n23.7 输出结果",
    "text": "23.7 输出结果\n\nif (!dir.exists(\"./data/result/Biomarker/\")) {\n  dir.create(\"./data/result/Biomarker/\", recursive = TRUE)\n}\n\nwrite.csv(common_feature_consis_all, \"./data/result/Biomarker/Biomarker_LR_RF_SVM_validation.csv\", row.names = F)\n\n\nif (!dir.exists(\"./data/result/Figure/\")) {\n  dir.create(\"./data/result/Figure/\", recursive = TRUE)\n}\n\nggsave(\"./data/result/Figure/Fig5-B.pdf\", rain_dis_SLC6A8, width = 5, height = 4, dpi = 600) \nggsave(\"./data/result/Figure/Fig5-C.pdf\", rain_val_SLC6A8, width = 5, height = 4, dpi = 600) \n\npdf(\"./data/result/Figure/Fig5-D.pdf\", width = 5, height = 4)  \ndis_roc_SLC6A8 &lt;- get_ROC(\n    dat = MergeData_dis,\n    group = \"Group\",\n    index = \"SLC6A8\",\n    type = 3)\ndev.off() \n\npdf(\"./data/result/Figure/Fig5-E.pdf\", width = 5, height = 4)  \nval_roc_SLC6A8 &lt;- get_ROC(\n    dat = MergeData_val,\n    group = \"Group\",\n    index = \"SLC6A8\",\n    type = 3)\ndev.off() \n\n\nggsave(\"./data/result/Figure/SFig4-A.pdf\", rain_dis_pl, width = 9, height = 7, dpi = 600) \nggsave(\"./data/result/Figure/SFig4-B.pdf\", rain_val_pl, width = 9, height = 7, dpi = 600) \n\nfor (gene in common_feature_consis$FeatureID) {\n\n  filename &lt;- paste0(\"./data/result/Figure/\", \"SFig4-C-discovery-\", gene, \".pdf\")\n  pdf(filename, width = 5, height = 4)  \n  temp_roc_pl_dis &lt;- get_ROC(\n      dat = MergeData_dis,\n      group = \"Group\",\n      index = gene,\n      type = 3)\n  dev.off()   \n}\n\nfor (gene in common_feature_consis$FeatureID) {\n\n  filename &lt;- paste0(\"./data/result/Figure/\", \"SFig4-D-validation-\", gene, \".pdf\")\n  pdf(filename, width = 5, height = 4)  \n  temp_roc_pl_val &lt;- get_ROC(\n      dat = MergeData_val,\n      group = \"Group\",\n      index = gene,\n      type = 3)\n  dev.off()   \n}",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>验证特征</span>"
    ]
  },
  {
    "objectID": "biomarker-validation.html#sec-validate-summary",
    "href": "biomarker-validation.html#sec-validate-summary",
    "title": "23  验证特征",
    "section": "\n23.8 总结",
    "text": "23.8 总结\n在深入分析数据集的过程中，我们特别关注于识别那些对区分样本早晚期状态具有重要意义的特征。通过对发现数据集和验证数据集上的关键特征进行细致比较，我们评估了这些特征的表达一致性和其基于受试者工作特性曲线（ROC）的区分能力。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] gghalves_0.1.4      ggdist_3.3.2        multipleROC_0.1.1  \n [4] pROC_1.18.5         Biobase_2.62.0      BiocGenerics_0.48.1\n [7] data.table_1.15.4   lubridate_1.9.3     forcats_1.0.0      \n[10] stringr_1.5.1       dplyr_1.1.4         purrr_1.0.2        \n[13] readr_2.1.5         tidyr_1.3.1         tibble_3.2.1       \n[16] ggplot2_3.5.1       tidyverse_2.0.0    \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.4           generics_0.1.3       renv_1.0.0          \n [4] stringi_1.8.4        hms_1.1.3            digest_0.6.35       \n [7] magrittr_2.0.3       evaluate_0.23        grid_4.3.3          \n[10] timechange_0.3.0     fastmap_1.1.1        plyr_1.8.9          \n[13] jsonlite_1.8.8       BiocManager_1.30.23  fansi_1.0.6         \n[16] scales_1.3.0         cli_3.6.2            rlang_1.1.3         \n[19] munsell_0.5.1        withr_3.0.0          yaml_2.3.8          \n[22] tools_4.3.3          tzdb_0.4.0           colorspace_2.1-0    \n[25] vctrs_0.6.5          R6_2.5.1             lifecycle_1.0.4     \n[28] htmlwidgets_1.6.4    pkgconfig_2.0.3      pillar_1.9.0        \n[31] gtable_0.3.5         glue_1.7.0           Rcpp_1.0.12         \n[34] xfun_0.43            tidyselect_1.2.1     rstudioapi_0.16.0   \n[37] knitr_1.46           htmltools_0.5.8.1    rmarkdown_2.26      \n[40] compiler_4.3.3       distributional_0.4.0\n\n\n\n\n\n\nKay, Matthew. 2023. 《ggdist: Visualizations of Distributions and Uncertainty in the Grammar of Graphics》. IEEE Transactions on Visualization and Computer Graphics.\n\n\nMoon, Keon-Woong. 2019. 《The multipleROC package》. https://github.com/cardiomoon/multipleROC.\n\n\nTiedemann, Frederik. 2022. 《The gghalves package》. https://github.com/erocoar/gghalves.",
    "crumbs": [
      "标记筛选",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>验证特征</span>"
    ]
  },
  {
    "objectID": "association-immunecell.html",
    "href": "association-immunecell.html",
    "title": "24  关联分析",
    "section": "",
    "text": "24.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(Biobase)\nlibrary(ggpmisc)\nlibrary(ggpubr)\nlibrary(ggExtra)\nlibrary(cowplot)\nlibrary(pheatmap)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "关联分析",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>关联分析</span>"
    ]
  },
  {
    "objectID": "association-immunecell.html#sec-association-importdata",
    "href": "association-immunecell.html#sec-association-importdata",
    "title": "24  关联分析",
    "section": "\n24.2 导入数据",
    "text": "24.2 导入数据\n\nImmuneCell结果来自于 章节 17；\ncommon_feature结果来自于 章节 23；\nExpressionSet来自于 章节 9。\n\n\nImmuneCell &lt;- read.csv(\"./data/result/ImmuneCell/HCC_ImmuneCell_ImmuCellAI.csv\")\ncommon_feature &lt;- read.csv(\"./data/result/Biomarker/Biomarker_LR_RF_SVM_validation.csv\")\nExprSet &lt;- readRDS(\"./data/result/ExpSetObject/MergeExpSet_VoomSNM_VoomSNM_LIRI-JP_TCGA-LIHC.RDS\")",
    "crumbs": [
      "关联分析",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>关联分析</span>"
    ]
  },
  {
    "objectID": "association-immunecell.html#sec-validate-overlap",
    "href": "association-immunecell.html#sec-validate-overlap",
    "title": "24  关联分析",
    "section": "\n24.3 函数",
    "text": "24.3 函数\n\nget_cor：免疫细胞和重要特征之间的相关性pheatmap::pheatmap(Kolde 等 2019)热图；\nget_lollipop：免疫细胞和单个重要特征之间的相关性棒棒图，cowplot::plot_grid(Wilke 2019)组图；\nget_cor_scatterplot：单个免疫细胞和单个重要特征之间的相关性散点图，ggExtra::ggMarginal(Dean Attali 2019)边沿图。\n\n\nget_cor &lt;- function(\n    object,\n    genelist,\n    immunescore) {\n\n  metadata &lt;- pData(object)\n  profile &lt;- exprs(object) %&gt;%\n    data.frame() \n  \n  Iscore &lt;- immunescore %&gt;%\n    dplyr::select(-c(2:8)) %&gt;%\n    tibble::column_to_rownames(\"SampleID\") %&gt;%\n    dplyr::select(-all_of(c(\"Effector_memory\", \"Gamma_delta\", \n                            \"Central_memory\")))\n  Iscore &lt;- Iscore[, colSums(Iscore) &gt; 0]\n  \n  sid &lt;- intersect(colnames(profile), rownames(Iscore))\n  profile_final &lt;- profile[rownames(profile) %in% genelist$FeatureID, \n                           pmatch(sid, colnames(profile))]\n  Iscore_final &lt;- Iscore[pmatch(sid, rownames(Iscore)), ]\n  \n  if (!all(colnames(profile_final) == rownames(Iscore_final))) {\n    message(\"wrong order bettween profile and Iscore\")\n  } else {\n    profile_final &lt;- profile_final[, pmatch(rownames(Iscore_final), \n                                            colnames(profile_final))]\n  }\n  \n  # calculate the association by stats::cor.test\n  mat_rho &lt;- datRho\n  mat_signif &lt;- as.matrix(datPva)\n  mat_signif[mat_signif &gt; 0.05] &lt;- \"\"\n  mat_signif[mat_signif &gt; 0.01 & mat_signif != \"\"] &lt;- \"*\"\n  mat_signif[mat_signif &lt;= 0.01 & mat_signif != \"\" & mat_signif != \"*\"] &lt;- \"+\"\n  \n  pl &lt;- pheatmap::pheatmap(\n      mat = t(mat_rho),\n      color = colorRampPalette(c(\"green\", \"black\", \"red\"))(100), # \"green\", \"black\", \"red\"    \n      cluster_rows = T,\n      cluster_cols = F,\n      display_numbers = t(mat_signif),\n      number_color = \"white\",      \n      fontsize_number = 15,\n      fontsize_row = 8,\n      fontsize_col = 8, \n      fontfamily = \"serif\")\n  \n  res &lt;- list(Rho = datRho,\n              Pvalue = datPva,\n              pl = pl)\n  \n  return(res)\n}\n\n\nget_lollipop &lt;- function(\n    dat_rho,\n    dat_pva,\n    biomarker) {\n  \n  plotdata &lt;- rho %&gt;%\n    dplyr::inner_join(pval, by = \"Cell\") %&gt;%\n    dplyr::arrange(Rho)\n  plotdata$Cell &lt;- factor(plotdata$Cell, levels = unique(plotdata$Cell))\n  \n  p1 &lt;- ggplot(plotdata, aes(x = Rho, y = Cell)) +\n    scale_color_manual(name = \"pvalue\",\n                       values = c(\"#E69F00\", \"#56B4E9\", \"#009E73\", \"gray\")) +\n    geom_segment(aes(x = 0, y = Cell, xend = Rho, yend = Cell), size = 1) +\n    geom_point(aes(size = Rho_label, color = Pval_label)) +\n    labs(title = biomarker,\n         x = \"Spearman Correrlation Coefficient\", y = \"\") +\n    guides(size = guide_legend(order = 1, title = \"abs(cor)\"),\n           color = guide_legend(order = 2, title = \"pvalue\")) +\n    theme_bw() +\n    theme(plot.title = element_text(size = 12, color = \"black\", hjust = 0.5, face = \"bold\"),\n          axis.title = element_text(size = 11, color = \"black\", face = \"bold\"), \n          axis.text.y = element_text(size = 10, color = \"black\"),\n          legend.position = \"right\",\n          text = element_text(family = \"serif\"))  \n  \n  p2 &lt;- ggplot() +\n    geom_text(plotdata, mapping = aes(x = 0, y = Cell, \n                       color = Pval_label2, \n                       label = Pval)) +\n    scale_color_manual(name = \"\",\n                       values = c(\"red\", \"black\", \"\"))+\n    theme_void() +\n    guides(color = \"none\")\n  \n  pl &lt;- cowplot::plot_grid(\n    p1, p2, ncol = 2,\n    align = \"hv\",\n    rel_widths = c(1, 0.1)\n  )\n  \n  return(pl)\n}\n\nget_cor_scatterplot &lt;- function(\n    object,\n    genelist,\n    immunescore,\n    biomarker_gene,\n    biomarker_cell,\n    group_names = grp_names,\n    group_colors = grp_colors) {\n  \n  mdat &lt;- Iscore %&gt;%\n    dplyr::select(all_of(c(\"Group\", biomarker_cell))) %&gt;%\n    tibble::rownames_to_column(\"SampleID\") %&gt;%\n    dplyr::inner_join(profile %&gt;%\n                        t() %&gt;% as.data.frame() %&gt;%\n                        dplyr::select(biomarker_gene) %&gt;%\n                        tibble::rownames_to_column(\"SampleID\"),\n                      by = \"SampleID\") \n  plotdata &lt;- mdat\n  colnames(plotdata)[3:4] &lt;- c(\"Cell\", \"Gene\")\n  plotdata$Group &lt;- factor(plotdata$Group, levels = group_names)\n  \n\n  xlab &lt;- paste(biomarker_gene, \"expression\") \n  ylab &lt;- biomarker_cell \n  \n  pl &lt;- ggExtra::ggMarginal(\n    pl_temp, \n    type = \"density\",\n    groupFill = TRUE)\n  \n  return(pl)\n}",
    "crumbs": [
      "关联分析",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>关联分析</span>"
    ]
  },
  {
    "objectID": "association-immunecell.html#sec-association-heatmap",
    "href": "association-immunecell.html#sec-association-heatmap",
    "title": "24  关联分析",
    "section": "\n24.4 重要特征与免疫细胞的相关热图",
    "text": "24.4 重要特征与免疫细胞的相关热图\n所有重要特征和免疫浸润细胞的相关性分析，解析特征和免疫细胞之间的相关性也即是特征对癌症的免疫微环境的关联情况。这种关联可以是正相关（一个变量增加时，另一个也增加），也可以是负相关（一个变量增加时，另一个减少）。相关性的知识点：\n\n关系的强度和方向：相关系数的值（如皮尔逊相关系数）可以表示两个变量之间关系的强度和方向。系数的绝对值越接近1，关系越强；接近0则关系越弱。正数表示正相关，负数表示负相关。\n是否存在依赖关系：虽然相关性不等于因果性（即一个变量导致另一个变量变化），但它可以指示两个变量之间是否存在某种依赖关系。这种依赖关系可能是直接的，也可能是通过其他变量间接的。\n预测能力：高度相关的变量可能具有预测另一个变量的能力。例如，如果两个变量高度正相关，那么知道一个变量的值可能有助于预测另一个变量的值。\n数据模式：相关性分析可以帮助我们识别数据中的模式或趋势，这有助于理解数据的性质和行为。\n\n\ncell_cor &lt;- get_cor(\n  object = ExprSet,\n  genelist = common_feature, \n  immunescore = ImmuneCell)\n\ncell_cor$pl",
    "crumbs": [
      "关联分析",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>关联分析</span>"
    ]
  },
  {
    "objectID": "association-immunecell.html#sec-association-SLC6A8",
    "href": "association-immunecell.html#sec-association-SLC6A8",
    "title": "24  关联分析",
    "section": "\n24.5 SLC6A8关联图",
    "text": "24.5 SLC6A8关联图\n综合先前验证结果 小节 23.6 和 上述相关热图结果 小节 24.4，对SLC6A8单独做相关性分析和可视化进一步了解其特性。\n\nSLC6A8_pl &lt;- get_lollipop(\n  dat_rho = cell_cor$Rho,\n  dat_pva = cell_cor$Pvalue,\n  biomarker = \"SLC6A8\")\n\nSLC6A8_pl",
    "crumbs": [
      "关联分析",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>关联分析</span>"
    ]
  },
  {
    "objectID": "association-immunecell.html#sec-association-scatter",
    "href": "association-immunecell.html#sec-association-scatter",
    "title": "24  关联分析",
    "section": "\n24.6 SLC6A8与特定免疫细胞",
    "text": "24.6 SLC6A8与特定免疫细胞\n针对上述相关结果 小节 24.5，为了进一步探索SLC6A8和Bcell（树突状细胞）之间的具体相关情况，我们进行了散点图的可视化分析。\n\nSLC6A8_Bcell &lt;- get_cor_scatterplot(\n  object = ExprSet,\n  genelist = common_feature,\n  immunescore = ImmuneCell,\n  biomarker_gene = \"SLC6A8\",\n  biomarker_cell = \"Bcell\")\n\nSLC6A8_Bcell\n针对上述相关结果 小节 24.5，为了进一步探索SLC6A8和CD8_naive（未成熟的CD8+ T淋巴细胞）之间的具体相关情况，我们进行了散点图的可视化分析。\n\nSLC6A8_CD8_naive &lt;- get_cor_scatterplot(\n  object = ExprSet,\n  genelist = common_feature,\n  immunescore = ImmuneCell,\n  biomarker_gene = \"SLC6A8\",\n  biomarker_cell = \"CD8_naive\")\n\nSLC6A8_CD8_naive",
    "crumbs": [
      "关联分析",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>关联分析</span>"
    ]
  },
  {
    "objectID": "association-immunecell.html#sec-association-others-scatter",
    "href": "association-immunecell.html#sec-association-others-scatter",
    "title": "24  关联分析",
    "section": "\n24.7 SLC6A8与其他免疫细胞",
    "text": "24.7 SLC6A8与其他免疫细胞\n除了上述两种免疫细胞外，SLC6A8与其他细胞的结果可以作为附图保存。\n\nIC_names &lt;- colnames(ImmuneCell)[9:32]\nIC_names &lt;- IC_names[!IC_names %in% \n                       c(\"Effector_memory\", \"Gamma_delta\", \n                         \"Central_memory\", \"CD4_T\", \"Tfh\", \n                         \"Th1\", \"MAIT\", \"iTreg\", \"Th2\", \n                         \"Macrophage\", \"CD8_naive\", \"Bcell\")]\n\nSLC6A8_ImmuneCell_list &lt;- list()\nfor (j in 1:length(IC_names)) {\n\n  IC &lt;- IC_names[j]\n  temp_plot &lt;- get_cor_scatterplot(\n    object = ExprSet,\n    genelist = common_feature,\n    immunescore = ImmuneCell,\n    biomarker_gene = \"SLC6A8\",\n    biomarker_cell = IC)\n  \n  SLC6A8_ImmuneCell_list[[j]] &lt;- temp_plot\n}\n\nnames(SLC6A8_ImmuneCell_list) &lt;- IC_names\n合并上述画图对象\n\nSLC6A8_ImmuneCell_pl &lt;- cowplot::plot_grid(\n  SLC6A8_ImmuneCell_list$CD4_naive, SLC6A8_ImmuneCell_list$Cytotoxic,\n  SLC6A8_ImmuneCell_list$Exhausted, SLC6A8_ImmuneCell_list$Tr1,\n  SLC6A8_ImmuneCell_list$nTreg, SLC6A8_ImmuneCell_list$Th17,\n  SLC6A8_ImmuneCell_list$NKT, SLC6A8_ImmuneCell_list$DC,\n  SLC6A8_ImmuneCell_list$Monocyte, SLC6A8_ImmuneCell_list$NK,\n  SLC6A8_ImmuneCell_list$Neutrophil, SLC6A8_ImmuneCell_list$CD8_T,  \n  ncol = 4, align = \"hv\",\n  labels = LETTERS[1:length(IC_names)])\n\nSLC6A8_ImmuneCell_pl",
    "crumbs": [
      "关联分析",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>关联分析</span>"
    ]
  },
  {
    "objectID": "association-immunecell.html#sec-association-output",
    "href": "association-immunecell.html#sec-association-output",
    "title": "24  关联分析",
    "section": "\n24.8 输出结果",
    "text": "24.8 输出结果\n\nif (!dir.exists(\"./data/result/Figure/\")) {\n  dir.create(\"./data/result/Figure/\", recursive = TRUE)\n}\n\nggsave(\"./data/result/Figure/Fig6-A.pdf\", cell_cor$pl, width = 8, height = 5, dpi = 600) \nggsave(\"./data/result/Figure/Fig6-B.pdf\", SLC6A8_pl, width = 6, height = 4, dpi = 600)\nggsave(\"./data/result/Figure/Fig6-C.pdf\", SLC6A8_Bcell, width = 6, height = 4, dpi = 600)\nggsave(\"./data/result/Figure/Fig6-D.pdf\", SLC6A8_CD8_naive, width = 6, height = 4, dpi = 600)\n\nggsave(\"./data/result/Figure/SFig6.pdf\", SLC6A8_ImmuneCell_pl, width = 11, height = 9, dpi = 600)",
    "crumbs": [
      "关联分析",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>关联分析</span>"
    ]
  },
  {
    "objectID": "association-immunecell.html#sec-association-summary",
    "href": "association-immunecell.html#sec-association-summary",
    "title": "24  关联分析",
    "section": "\n24.9 总结",
    "text": "24.9 总结\n经过对关键特征的细致筛选与深入分析，我们针对肿瘤微环境中的免疫浸润细胞进行了详尽的相关性研究。在此过程中，SLC6A8的显著重要性得以进一步凸显，特别是在肝细胞癌（HCC）晚期的显著富集 小节 23.6，为我们揭示了其在癌症进程中的潜在作用。\n具体而言，我们的研究观察到SLC6A8与Bcell（B淋巴细胞）和CD8_naive（未成熟的CD8+ T淋巴细胞）之间存在显著的相关性。一方面，SLC6A8与Bcell呈显著正相关，这一发现表明SLC6A8可能与B细胞的活化、增殖或功能执行存在紧密联系，进而在肿瘤免疫应答中发挥关键作用。另一方面，SLC6A8与CD8_naive则呈显著负相关，这一结果可能揭示了SLC6A8在调节CD8+ T淋巴细胞成熟和活化过程中的潜在抑制作用。\nB细胞和CD8+ T淋巴细胞作为免疫系统的关键组成部分，在癌症的演变和进展过程中扮演着至关重要的角色。B细胞通过产生抗体参与体液免疫应答，而CD8+ T淋巴细胞则主要执行细胞毒性功能，直接杀伤被感染的细胞或肿瘤细胞。\n此外，根据我们之前的免疫浸润分析 小节 18.5，我们发现B细胞显著富集在HCC晚期分组，而CD8_naive则显著富集在HCC早期分组。这一发现进一步强调了SLC6A8与这两种免疫细胞之间关系的重要性，并可能为我们理解HCC进展的免疫机制提供新的线索。\n综上所述，SLC6A8与B细胞和CD8_naive之间的显著相关性，以及其在HCC早晚期的显著富集，为我们揭示了该基因在肿瘤免疫应答中的潜在作用，并为进一步的研究和临床应用提供了有价值的参考。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] pheatmap_1.0.12     cowplot_1.1.3       ggExtra_0.10.1     \n [4] ggpubr_0.6.0        ggpmisc_0.5.6       ggpp_0.5.7         \n [7] Biobase_2.62.0      BiocGenerics_0.48.1 data.table_1.15.4  \n[10] lubridate_1.9.3     forcats_1.0.0       stringr_1.5.1      \n[13] dplyr_1.1.4         purrr_1.0.2         readr_2.1.5        \n[16] tidyr_1.3.1         tibble_3.2.1        ggplot2_3.5.1      \n[19] tidyverse_2.0.0    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.5        xfun_0.43           htmlwidgets_1.6.4  \n [4] rstatix_0.7.2       lattice_0.22-6      tzdb_0.4.0         \n [7] vctrs_0.6.5         tools_4.3.3         generics_0.1.3     \n[10] fansi_1.0.6         pkgconfig_2.0.3     Matrix_1.6-5       \n[13] RColorBrewer_1.1-3  lifecycle_1.0.4     compiler_4.3.3     \n[16] MatrixModels_0.5-3  munsell_0.5.1       carData_3.0-5      \n[19] SparseM_1.81        httpuv_1.6.15       quantreg_5.97      \n[22] htmltools_0.5.8.1   yaml_2.3.8          later_1.3.2        \n[25] pillar_1.9.0        car_3.1-2           MASS_7.3-60.0.1    \n[28] abind_1.4-5         mime_0.12           tidyselect_1.2.1   \n[31] digest_0.6.35       stringi_1.8.4       splines_4.3.3      \n[34] fastmap_1.1.1       grid_4.3.3          colorspace_2.1-0   \n[37] cli_3.6.2           magrittr_2.0.3      survival_3.7-0     \n[40] utf8_1.2.4          broom_1.0.5         withr_3.0.0        \n[43] promises_1.3.0      scales_1.3.0        backports_1.4.1    \n[46] timechange_0.3.0    rmarkdown_2.26      ggsignif_0.6.4     \n[49] hms_1.1.3           shiny_1.8.1.1       evaluate_0.23      \n[52] knitr_1.46          miniUI_0.1.1.1      rlang_1.1.3        \n[55] Rcpp_1.0.12         xtable_1.8-4        glue_1.7.0         \n[58] polynom_1.4-1       BiocManager_1.30.23 renv_1.0.0         \n[61] rstudioapi_0.16.0   jsonlite_1.8.8      R6_2.5.1           \n\n\n\n\n\n\nDean Attali, Christopher Baker. 2019. 《ggExtra: Add Marginal Histograms to ’ggplot2’, and More ’ggplot2’ Enhancements》. https://github.com/daattali/ggExtra.\n\n\nKolde, Raivo 等. 2019. 《Pheatmap: pretty heatmaps》. R package version 1 (2): 726.\n\n\nWilke, Claus O. 2019. 《cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’》. https://github.com/wilkelab/cowplot.",
    "crumbs": [
      "关联分析",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>关联分析</span>"
    ]
  },
  {
    "objectID": "scRNA-DataProcess.html",
    "href": "scRNA-DataProcess.html",
    "title": "25  单细胞数据处理",
    "section": "",
    "text": "25.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(Seurat)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>单细胞数据处理</span>"
    ]
  },
  {
    "objectID": "scRNA-DataProcess.html#sec-seurat-importdata",
    "href": "scRNA-DataProcess.html#sec-seurat-importdata",
    "title": "25  单细胞数据处理",
    "section": "\n25.2 导入数据",
    "text": "25.2 导入数据\n\n\nGSE149614所有数据获取方式见 小节 6.5\n\n\nphenotype &lt;- fread(\"./data/GSE149614_scRNA/GSE149614_HCC.metadata.updated.txt\")\nprofile &lt;- fread(\"./data/GSE149614_scRNA/GSE149614_HCC.scRNAseq.S71915.count.txt\")",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>单细胞数据处理</span>"
    ]
  },
  {
    "objectID": "scRNA-DataProcess.html#sec-seurat-convert",
    "href": "scRNA-DataProcess.html#sec-seurat-convert",
    "title": "25  单细胞数据处理",
    "section": "\n25.3 原始数据转换成Seurat对象",
    "text": "25.3 原始数据转换成Seurat对象\nSeurat对象(Hao 等 2024)是单细胞分析常见的数据对象，Seurat::CreateSeuratObject函数可以将原始数据转换成Seurat对象。\n\nSeurat是一个集成了多种处理单细胞RNA测序数据功能的R包。它允许研究人员方便地对单细胞数据进行探索、预处理、分析和可视化。通过Seurat对象，研究人员可以执行细胞类型分类、基因表达分析、细胞群聚等操作。Seurat数据对象是一种高度灵活的数据结构，主要用于存储单细胞RNA测序数据。\n\nCreateObject &lt;- function(\n    count, \n    metadata, \n    proj = \"GSE149614\"){\n  \n  res &lt;- Seurat::CreateSeuratObject(\n    counts = count.cln, \n    assay = \"RNA\",\n    min.cells = 3,\n    # min.features = 400,\n    meta.data = metadata.cln,\n    project = proj)\n  res[[\"Batch\"]] &lt;-  proj\n  \n  return(res)\n}\n\nSeurat_raw &lt;- CreateObject(\n  count = profile,\n  metadata = phenotype,\n  proj = \"GSE149614\")\n\nSeurat_raw\n\nSeurat_raw &lt;- readRDS(\"./data/result/scRNA/Seurat_raw.RDS\")\n\nSeurat_raw\n结果：Seurat对象需要注意的列信息：\n\norig.ident: 该列将包含已知的样本身份。如果在加载数据时提供了project参数的值，它将会默认使用这个值（通过Seurat_raw@meta.data$orig.ident访问）；\nnCount_RNA/nUMI: 表示每个细胞中UMI（Unique Molecular Identifier，唯一分子标识符）的数量。UMI通常用于区分PCR扩增产生的相同序列的分子，以便更准确地估计基因的表达水平（通过Seurat_raw@meta.data$nCount_RNA访问）；\nnFeature_RNA/nGene: 表示每个细胞中检测到的基因数量。这里的“基因”可能指的是检测到的转录本或独特的RNA分子。这一数据通常用于质量控制，例如排除基因表达量过低或过高（可能是噪声或异常值）的细胞（通过Seurat_raw@meta.data$nFeature_RNA访问）。\n\nSeurat对象的count matrix\n\nGetAssayData(Seurat_raw, assay = \"RNA\", layer = \"counts\")[c(\"ODF4\", \"MC4R\", \"UBOX5-AS1\"), 1:10]\n结果：矩阵中的.值代表0（未检测到分子）。由于scRNA-seq矩阵中的大多数值都是0，Seurat在可能的情况下使用稀疏矩阵表示法。这可以为Drop-seq/inDrop/10x数据节省大量内存和速度。\n\ndense.size &lt;- object.size(as.matrix(GetAssayData(Seurat_raw, assay = \"RNA\", layer = \"counts\")))\ndense.size\nsparse.size &lt;- object.size(GetAssayData(Seurat_raw, assay = \"RNA\", layer = \"counts\"))\nsparse.size\ndense.size / sparse.size",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>单细胞数据处理</span>"
    ]
  },
  {
    "objectID": "scRNA-DataProcess.html#sec-seurat-QC",
    "href": "scRNA-DataProcess.html#sec-seurat-QC",
    "title": "25  单细胞数据处理",
    "section": "\n25.4 数据过滤",
    "text": "25.4 数据过滤\n为了更容易地识别不同的细胞类型群体，我们需要过滤数据以仅包含高质量的真实细胞。同时，我们需要识别任何失败的样本，并尝试挽救数据或将其从分析中移除，此外，还要尝试理解样本失败的原因。\n数据过滤的挑战在1）区分质量差的细胞和复杂性较低的细胞；2）选择合适的过滤阈值，以便保留高质量细胞而不移除生物学上相关的细胞类型。因此，在进行质量控制之前，请明确您期望样本中存在的细胞类型。例如，您是否期望样本中有低复杂性的细胞或线粒体表达水平较高的细胞？如果是这样，那么在评估数据质量时，我们需要考虑这种生物学特性。\n\n25.4.1 过滤指标\n\n\nnumber of genes per UMI for each cell： 只需要取每个细胞检测到的基因数量的以10为底的对数，以及每个细胞UMI数量的以10为底的对数，然后将基因数量的对数值除以UMI数量的对数值。\n\n\nSeurat_raw$log10GenesPerUMI\n\n\nMitochondrial Ratio: 映射到线粒体基因的转录本比例\n\n\nSeurat_raw$mitoRatio &lt;- PercentageFeatureSet(object = Seurat_raw, pattern = \"^MT-\", assay = \"RNA\")\nSeurat_raw$mitoRatio &lt;- Seurat_raw@meta.data$mitoRatio / 100\n\n使用分布图可视化过滤指标在样本或者细胞等分布\n\n\nSeurat_raw@meta.data %&gt;% \n  ggplot(aes(x = sample, fill = sample)) + \n  geom_bar() +\n  geom_hline(yintercept = c(500, 1800)) +  \n  theme_classic() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"))\n\nSeurat_raw@meta.data %&gt;% \n  ggplot(aes(x = nCount_RNA, color = sample, fill = sample)) + \n  geom_density(alpha = 0.2) +\n  scale_x_log10() +\n  geom_vline(xintercept = 500) +  \n  theme_classic() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"))\n\nSeurat_raw@meta.data %&gt;% \n  ggplot(aes(x = nFeature_RNA, color = sample, fill= sample)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  geom_vline(xintercept = 300) +\n  theme_classic() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"))\n\nSeurat_raw@meta.data %&gt;% \n  ggplot(aes(x = log10GenesPerUMI, color = sample, fill= sample)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  geom_vline(xintercept = 0.8) +\n  theme_classic() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\")) \n\nSeurat_raw@meta.data %&gt;% \n  ggplot(aes(x = mitoRatio, color = sample, fill= sample)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  geom_vline(xintercept = 0.2) +\n  theme_classic() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"))\n结果：从每个过滤指标的分布图确定最近过滤阈值。\n\nVlnPlot(Seurat_raw, \n        features = c(\"nCount_RNA\", \"nFeature_RNA\", \n                     \"log10GenesPerUMI\", \"mitoRatio\"), \n        pt.size = 0, ncol = 2)\n\n25.4.2 过滤处理\n根据上述过滤指标的阈值，过滤数据。以下是过滤的原因：\n过滤不符合要求的细胞或基因\n\nSeurat_filter &lt;- subset(\n  x = Seurat_raw,\n  subset = (nCount_RNA &gt; 500) & (nCount_RNA &lt; 150000) &\n    (nFeature_RNA &gt; 200) & (nFeature_RNA &lt; 7500) &\n    (log10GenesPerUMI &gt; 0.8) & \n    (mitoRatio &lt; 0.2))\n\nSeurat_filter\n结果：有2497个细胞不符合上述过滤指标阈值要求被丢弃。\n\nVlnPlot(Seurat_filter, \n        features = c(\"nCount_RNA\", \"nFeature_RNA\", \n                     \"log10GenesPerUMI\", \"mitoRatio\"), \n        pt.size = 0, ncol = 2)",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>单细胞数据处理</span>"
    ]
  },
  {
    "objectID": "scRNA-DataProcess.html#sec-seurat-output",
    "href": "scRNA-DataProcess.html#sec-seurat-output",
    "title": "25  单细胞数据处理",
    "section": "\n25.5 输出结果",
    "text": "25.5 输出结果\nif (!dir.exists(\"./data/result/scRNA/\")) {\n  dir.create(\"./data/result/scRNA/\", recursive = TRUE)\n}\n\nsaveRDS(Seurat_raw, file = \"./data/result/scRNA/Seurat_raw.RDS\", compress = TRUE)\nsaveRDS(Seurat_filter, file = \"./data/result/scRNA/Seurat_filter.RDS\", compress = TRUE)",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>单细胞数据处理</span>"
    ]
  },
  {
    "objectID": "scRNA-DataProcess.html#sec-seurat-summary",
    "href": "scRNA-DataProcess.html#sec-seurat-summary",
    "title": "25  单细胞数据处理",
    "section": "\n25.6 总结",
    "text": "25.6 总结\n整个过程涉及数据获取、数据转换、数据过滤和数据保存等多个步骤，是生物信息学和数据分析中不可或缺的一部分。通过这一过程，我们可以从公开发表的单细胞表达谱数据中提取有价值的信息，为后续研究核心特征如SLC6A8等在癌症早晚期的细胞水平表达研究提供有力的支持。接下来需要对该数据进行数据标准化等操作。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] Seurat_5.0.3       SeuratObject_5.0.2 sp_2.1-4           data.table_1.15.4 \n [5] lubridate_1.9.3    forcats_1.0.0      stringr_1.5.1      dplyr_1.1.4       \n [9] purrr_1.0.2        readr_2.1.5        tidyr_1.3.1        tibble_3.2.1      \n[13] ggplot2_3.5.1      tidyverse_2.0.0   \n\nloaded via a namespace (and not attached):\n  [1] deldir_2.0-4           pbapply_1.7-2          gridExtra_2.3         \n  [4] rlang_1.1.3            magrittr_2.0.3         RcppAnnoy_0.0.22      \n  [7] spatstat.geom_3.2-9    matrixStats_1.3.0      ggridges_0.5.6        \n [10] compiler_4.3.3         reshape2_1.4.4         png_0.1-8             \n [13] vctrs_0.6.5            pkgconfig_2.0.3        fastmap_1.1.1         \n [16] utf8_1.2.4             promises_1.3.0         rmarkdown_2.26        \n [19] tzdb_0.4.0             xfun_0.43              jsonlite_1.8.8        \n [22] goftest_1.2-3          later_1.3.2            spatstat.utils_3.0-4  \n [25] irlba_2.3.5.1          parallel_4.3.3         cluster_2.1.6         \n [28] R6_2.5.1               ica_1.0-3              spatstat.data_3.0-4   \n [31] stringi_1.8.4          RColorBrewer_1.1-3     reticulate_1.37.0     \n [34] parallelly_1.37.1      scattermore_1.2        lmtest_0.9-40         \n [37] Rcpp_1.0.12            knitr_1.46             tensor_1.5            \n [40] future.apply_1.11.2    zoo_1.8-12             sctransform_0.4.1     \n [43] httpuv_1.6.15          Matrix_1.6-5           splines_4.3.3         \n [46] igraph_2.0.3           timechange_0.3.0       tidyselect_1.2.1      \n [49] abind_1.4-5            rstudioapi_0.16.0      yaml_2.3.8            \n [52] spatstat.random_3.2-3  spatstat.explore_3.2-7 codetools_0.2-19      \n [55] miniUI_0.1.1.1         listenv_0.9.1          plyr_1.8.9            \n [58] lattice_0.22-6         shiny_1.8.1.1          withr_3.0.0           \n [61] ROCR_1.0-11            evaluate_0.23          Rtsne_0.17            \n [64] future_1.33.2          fastDummies_1.7.3      survival_3.7-0        \n [67] polyclip_1.10-6        fitdistrplus_1.1-11    pillar_1.9.0          \n [70] BiocManager_1.30.23    KernSmooth_2.23-22     renv_1.0.0            \n [73] plotly_4.10.4          generics_0.1.3         RcppHNSW_0.6.0        \n [76] hms_1.1.3              munsell_0.5.1          scales_1.3.0          \n [79] globals_0.16.3         xtable_1.8-4           glue_1.7.0            \n [82] lazyeval_0.2.2         tools_4.3.3            RSpectra_0.16-1       \n [85] RANN_2.6.1             leiden_0.4.3.1         dotCall64_1.1-1       \n [88] cowplot_1.1.3          grid_4.3.3             colorspace_2.1-0      \n [91] nlme_3.1-164           patchwork_1.2.0        cli_3.6.2             \n [94] spatstat.sparse_3.0-3  spam_2.10-0            fansi_1.0.6           \n [97] viridisLite_0.4.2      uwot_0.2.2             gtable_0.3.5          \n[100] digest_0.6.35          progressr_0.14.0       ggrepel_0.9.5         \n[103] htmlwidgets_1.6.4      htmltools_0.5.8.1      lifecycle_1.0.4       \n[106] httr_1.4.7             mime_0.12              MASS_7.3-60.0.1       \n\n\n\n\n\n\nHao, Yuhan, Tim Stuart, Madeline H Kowalski, Saket Choudhary, Paul Hoffman, Austin Hartman, Avi Srivastava, 等. 2024. 《Dictionary learning for integrative, multimodal and scalable single-cell analysis》. Nature biotechnology 42 (2): 293–304.",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>单细胞数据处理</span>"
    ]
  },
  {
    "objectID": "scRNA-Normalization.html",
    "href": "scRNA-Normalization.html",
    "title": "26  单细胞数据标准化",
    "section": "",
    "text": "26.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(cowplot)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>单细胞数据标准化</span>"
    ]
  },
  {
    "objectID": "scRNA-Normalization.html#sec-normlize-importdata",
    "href": "scRNA-Normalization.html#sec-normlize-importdata",
    "title": "26  单细胞数据标准化",
    "section": "\n26.2 导入数据",
    "text": "26.2 导入数据\n\n\nseurat_obj数据来自于 章节 25\n\n\n\nseurat_obj &lt;- readRDS(\"./data/result/scRNA/Seurat_filter.RDS\")\n\nseurat_obj",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>单细胞数据标准化</span>"
    ]
  },
  {
    "objectID": "scRNA-Normalization.html#sec-normlize-LogNormalize",
    "href": "scRNA-Normalization.html#sec-normlize-LogNormalize",
    "title": "26  单细胞数据标准化",
    "section": "\n26.3 消除测序深度影响",
    "text": "26.3 消除测序深度影响\n首先了解以下两个概念：\n\nseurat_norm &lt;- NormalizeData(\n  object = seurat_obj,\n  normalization.method = \"LogNormalize\",\n  scale.factor = 10000,\n  verbose = FALSE)\n\nseurat_norm",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>单细胞数据标准化</span>"
    ]
  },
  {
    "objectID": "scRNA-Normalization.html#sec-normlize-cell",
    "href": "scRNA-Normalization.html#sec-normlize-cell",
    "title": "26  单细胞数据标准化",
    "section": "\n26.4 评估细胞周期的影响",
    "text": "26.4 评估细胞周期的影响\n细胞周期（cell cycle）是指细胞从一次分裂完成开始到下一次分裂结束所经历的全过程，包括间期和分裂期。评估细胞周期有助于了解细胞所处的具体阶段（如G1期、S期、G2期和M期），这对于理解细胞的功能状态、代谢活动和生长特性至关重要。\nload(\"./data/result/scRNA/Homo_sapiens_cycle.rda\")\n\nseurat_phase@meta.data %&gt;% \n  ggplot(aes(x = S.Score, y = G2M.Score)) + \n  geom_point(aes(color = Phase)) +\n  theme_minimal()",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>单细胞数据标准化</span>"
    ]
  },
  {
    "objectID": "scRNA-Normalization.html#sec-normlize-highVar",
    "href": "scRNA-Normalization.html#sec-normlize-highVar",
    "title": "26  单细胞数据标准化",
    "section": "\n26.5 识别高度可变的特征",
    "text": "26.5 识别高度可变的特征\n可以使用Seurat函数FindVariableFeatures选择vst（Variance Stabilizing Transformation，方差稳定变换）方法（筛选标准是通过基因在不同细胞间的平均表达量和变异程度），并设置高变异基因数量为2000。\n\nseurat_var &lt;- FindVariableFeatures(\n  object = seurat_phase,\n  selection.method = \"vst\",\n  nfeatures = 2000,\n  verbose = FALSE)\n\nLabelPoints(plot = VariableFeaturePlot(seurat_var),\n            points = head(VariableFeatures(seurat_var), 10),\n            repel = TRUE)",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>单细胞数据标准化</span>"
    ]
  },
  {
    "objectID": "scRNA-Normalization.html#sec-normlize-scale",
    "href": "scRNA-Normalization.html#sec-normlize-scale",
    "title": "26  单细胞数据标准化",
    "section": "\n26.6 缩放数据",
    "text": "26.6 缩放数据\n\nseurat_scale &lt;- ScaleData(\n  object = seurat_var,\n  verbose = FALSE)\n\nseurat_scale",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>单细胞数据标准化</span>"
    ]
  },
  {
    "objectID": "scRNA-Normalization.html#sec-normlize-reduction",
    "href": "scRNA-Normalization.html#sec-normlize-reduction",
    "title": "26  单细胞数据标准化",
    "section": "\n26.7 降维聚类",
    "text": "26.7 降维聚类\n\n查看细胞周期的影响\n\n\nseurat_pca &lt;- RunPCA(\n  object = seurat_scale,\n  features = VariableFeatures(object = seurat_scale),\n  verbose = FALSE)\n\nDimPlot(seurat_pca,\n        reduction = \"pca\",\n        group.by = \"Phase\")",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>单细胞数据标准化</span>"
    ]
  },
  {
    "objectID": "scRNA-Normalization.html#sec-normlize-output",
    "href": "scRNA-Normalization.html#sec-normlize-output",
    "title": "26  单细胞数据标准化",
    "section": "\n26.8 输出结果",
    "text": "26.8 输出结果\nif (!dir.exists(\"./data/result/scRNA/\")) {\n  dir.create(\"./data/result/scRNA/\", recursive = TRUE)\n}\n\nsaveRDS(seurat_pca, file = \"./data/result/scRNA/Seurat_pca.RDS\", compress = TRUE)",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>单细胞数据标准化</span>"
    ]
  },
  {
    "objectID": "scRNA-Normalization.html#sec-normlize-summary",
    "href": "scRNA-Normalization.html#sec-normlize-summary",
    "title": "26  单细胞数据标准化",
    "section": "\n26.9 总结",
    "text": "26.9 总结\n我们采取了严谨的数据预处理流程。这一流程的核心在于通过数据标准化来降低技术变异，并妥善处理生物学变异，以确保分析结果的准确性和可靠性。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] cowplot_1.1.3      Seurat_5.0.3       SeuratObject_5.0.2 sp_2.1-4          \n [5] lubridate_1.9.3    forcats_1.0.0      stringr_1.5.1      dplyr_1.1.4       \n [9] purrr_1.0.2        readr_2.1.5        tidyr_1.3.1        tibble_3.2.1      \n[13] ggplot2_3.5.1      tidyverse_2.0.0   \n\nloaded via a namespace (and not attached):\n  [1] deldir_2.0-4           pbapply_1.7-2          gridExtra_2.3         \n  [4] rlang_1.1.3            magrittr_2.0.3         RcppAnnoy_0.0.22      \n  [7] spatstat.geom_3.2-9    matrixStats_1.3.0      ggridges_0.5.6        \n [10] compiler_4.3.3         reshape2_1.4.4         png_0.1-8             \n [13] vctrs_0.6.5            pkgconfig_2.0.3        fastmap_1.1.1         \n [16] utf8_1.2.4             promises_1.3.0         rmarkdown_2.26        \n [19] tzdb_0.4.0             xfun_0.43              jsonlite_1.8.8        \n [22] goftest_1.2-3          later_1.3.2            spatstat.utils_3.0-4  \n [25] irlba_2.3.5.1          parallel_4.3.3         cluster_2.1.6         \n [28] R6_2.5.1               ica_1.0-3              spatstat.data_3.0-4   \n [31] stringi_1.8.4          RColorBrewer_1.1-3     reticulate_1.37.0     \n [34] parallelly_1.37.1      scattermore_1.2        lmtest_0.9-40         \n [37] Rcpp_1.0.12            knitr_1.46             tensor_1.5            \n [40] future.apply_1.11.2    zoo_1.8-12             sctransform_0.4.1     \n [43] httpuv_1.6.15          Matrix_1.6-5           splines_4.3.3         \n [46] igraph_2.0.3           timechange_0.3.0       tidyselect_1.2.1      \n [49] abind_1.4-5            rstudioapi_0.16.0      yaml_2.3.8            \n [52] spatstat.random_3.2-3  spatstat.explore_3.2-7 codetools_0.2-19      \n [55] miniUI_0.1.1.1         listenv_0.9.1          plyr_1.8.9            \n [58] lattice_0.22-6         shiny_1.8.1.1          withr_3.0.0           \n [61] ROCR_1.0-11            evaluate_0.23          Rtsne_0.17            \n [64] future_1.33.2          fastDummies_1.7.3      survival_3.7-0        \n [67] polyclip_1.10-6        fitdistrplus_1.1-11    pillar_1.9.0          \n [70] BiocManager_1.30.23    KernSmooth_2.23-22     renv_1.0.0            \n [73] plotly_4.10.4          generics_0.1.3         RcppHNSW_0.6.0        \n [76] hms_1.1.3              munsell_0.5.1          scales_1.3.0          \n [79] globals_0.16.3         xtable_1.8-4           glue_1.7.0            \n [82] lazyeval_0.2.2         tools_4.3.3            data.table_1.15.4     \n [85] RSpectra_0.16-1        RANN_2.6.1             leiden_0.4.3.1        \n [88] dotCall64_1.1-1        grid_4.3.3             colorspace_2.1-0      \n [91] nlme_3.1-164           patchwork_1.2.0        cli_3.6.2             \n [94] spatstat.sparse_3.0-3  spam_2.10-0            fansi_1.0.6           \n [97] viridisLite_0.4.2      uwot_0.2.2             gtable_0.3.5          \n[100] digest_0.6.35          progressr_0.14.0       ggrepel_0.9.5         \n[103] htmlwidgets_1.6.4      htmltools_0.5.8.1      lifecycle_1.0.4       \n[106] httr_1.4.7             mime_0.12              MASS_7.3-60.0.1",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>单细胞数据标准化</span>"
    ]
  },
  {
    "objectID": "scRNA-Cluster.html",
    "href": "scRNA-Cluster.html",
    "title": "27  单细胞聚类分析",
    "section": "",
    "text": "27.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(cowplot)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\ngrp_shapes &lt;- c(15, 16)",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>单细胞聚类分析</span>"
    ]
  },
  {
    "objectID": "scRNA-Cluster.html#sec-cluster-importdata",
    "href": "scRNA-Cluster.html#sec-cluster-importdata",
    "title": "27  单细胞聚类分析",
    "section": "\n27.2 导入数据",
    "text": "27.2 导入数据\n\n\nseurat_obj数据来自于 章节 26，已经做过PCA降纬处理。\n\n\nseurat_obj &lt;- readRDS(\"./data/result/scRNA/Seurat_pca.RDS\")\n\nseurat_obj",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>单细胞聚类分析</span>"
    ]
  },
  {
    "objectID": "scRNA-Cluster.html#sec-cluster-dims",
    "href": "scRNA-Cluster.html#sec-cluster-dims",
    "title": "27  单细胞聚类分析",
    "section": "\n27.3 确定PC纬度",
    "text": "27.3 确定PC纬度\n在单细胞聚类分析过程中，对细胞数据进行PCA（主成分分析）以提取主成分（PC）是常见的预处理步骤。由于PC的选取直接关系到聚类结果的质量，因此选择恰当的PC数量至关重要。理想的PC数量应能充分保留原始数据中的关键信息，同时避免引入过多的冗余信息，以确保聚类结果的有效性和准确性。\n\n# seurat_pca &lt;- JackStraw(seurat_pca, num.replicate = 100)\n# seurat_pca &lt;- ScoreJackStraw(seurat_pca, dims = 1:30)\n# JackStrawPlot(seurat_pca, dims = 1:20)\n\nElbowPlot(seurat_obj, ndims = 50, reduction = \"pca\")\n结果：可以观察到PC10 - 20周围是“肘部”，这表明大部分真实信号是在前20个PC捕获的，为了保留更多信息，我们选择40个PC。",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>单细胞聚类分析</span>"
    ]
  },
  {
    "objectID": "scRNA-Cluster.html#sec-cluster-neighbors",
    "href": "scRNA-Cluster.html#sec-cluster-neighbors",
    "title": "27  单细胞聚类分析",
    "section": "\n27.4 寻找邻居",
    "text": "27.4 寻找邻居\nSeurat使用基于图的聚类方法，该方法采用了 K-最近邻方法，然后尝试将这个图划分为高度相互连接的“簇”。基于PCA空间中的欧氏距离来构建一个K-最近邻（K-nearest neighbor，KNN）图。\n\nseurat_obj &lt;- FindNeighbors(\n  object = seurat_obj,\n  dims = 1:40,\n  verbose = FALSE)\n\nseurat_obj",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>单细胞聚类分析</span>"
    ]
  },
  {
    "objectID": "scRNA-Cluster.html#sec-cluster-clusters",
    "href": "scRNA-Cluster.html#sec-cluster-clusters",
    "title": "27  单细胞聚类分析",
    "section": "\n27.5 寻找聚类",
    "text": "27.5 寻找聚类\nSeurat将以优化标准模块化函数为目标，迭代地将细胞组合在一起。我们将使用FindClusters()函数来执行基于图的聚类。分辨率是一个重要的参数，它设定了下游聚类的“粒度”，并且需要针对每个独立实验进行优化。对于3000 - 5000个细胞的数据集，分辨率设置在0.4 - 1.4之间通常会产生良好的聚类效果。\n\nseurat_cluster &lt;- FindClusters(\n  object = seurat_obj,\n  resolution = seq(0.4, 1.4, 0.2),\n  verbose = FALSE)\n\nseurat_cluster\n结果：不同分辨率的聚类结果可以通过seurat_obj@meta.data查看，会看到以RNA_snn_res开头（如果是整合多个来源数据的数据集可能是integrated_snn_res开头）。\n\n选择聚类分辨率，增加分辨率值会导致聚类数量增加，这通常对于更大的数据集是必要的。我们这里选择最大的1.4分辨率。\n\n\nIdents(object = seurat_cluster) &lt;- \"RNA_snn_res.1.4\"\n\nseurat_cluster",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>单细胞聚类分析</span>"
    ]
  },
  {
    "objectID": "scRNA-Cluster.html#sec-cluster-visualize",
    "href": "scRNA-Cluster.html#sec-cluster-visualize",
    "title": "27  单细胞聚类分析",
    "section": "\n27.6 可视化聚类",
    "text": "27.6 可视化聚类\nSeurat提供了几种非线性降维技术，如tSNE和UMAP，以可视化和探索这些数据集。这些算法的目标是学习数据的底层流形，以便在低维空间中将相似的细胞放置在一起。基于图的聚类中确定的细胞应该在这些降维图上共定位。作为UMAP和tSNE的输入，我们建议使用与聚类分析相同的主成分（PCs）作为输入。\n\nseurat_cluster &lt;- RunUMAP(\n  object = seurat_cluster,\n  reduction = \"pca\",\n  dims = 1:40,\n  verbose = FALSE)\n\nseurat_cluster &lt;- RunTSNE(\n  object = seurat_cluster,\n  reduction = \"pca\",\n  dims = 1:40,\n  check_duplicates = FALSE,\n  verbose = FALSE)\n\nDimPlot(seurat_cluster,\n        reduction = \"umap\",\n        label = TRUE,\n        label.size = 6) + NoLegend()\n\nDimPlot(seurat_cluster,\n        reduction = \"tsne\",\n        label = TRUE,\n        label.size = 6) + NoLegend()\n结果：总计识别出52个细胞类别。可以通过观察同一个细胞聚类簇它们是否聚集在一起，若它们是分散在不同区域，说明该分辨率下聚类效果不好请重新选择分辨率，但还是没有改善可能需要重新进行数据预处理等步骤了。比如，假定26和40在某次聚类显示是一个细胞类群，但它们却是分散在很远的两端，这很大概率是聚类错误。\n\n使用ggh4x(van den Brand 2023)和ggunchull(Lyu 2021)R包生成符合出版社的图片。\n\nlibrary(ggh4x)\nlibrary(ggunchull)\n\numap_pl &lt;- ggplot(umap_data, aes(x = umap_1, y = umap_2, fill = ident, color = ident)) +\n    geom_point(size = 0.5, show.legend = FALSE) +\n    guides(color = \"none\", x = umap_axis, y = umap_axis) +\n    scale_x_continuous(breaks = NULL) +\n    scale_y_continuous(breaks = NULL) +  \n    theme(aspect.ratio = 1,\n         panel.background = element_blank(),\n         panel.grid = element_blank(),\n         axis.line = element_line(arrow = arrow(type = \"closed\")),\n         axis.title = element_text(hjust = 0.05, face = \"italic\"))\n\numap_pl",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>单细胞聚类分析</span>"
    ]
  },
  {
    "objectID": "scRNA-Cluster.html#sec-cluster-output",
    "href": "scRNA-Cluster.html#sec-cluster-output",
    "title": "27  单细胞聚类分析",
    "section": "\n27.7 输出结果",
    "text": "27.7 输出结果\nif (!dir.exists(\"./data/result/scRNA/\")) {\n  dir.create(\"./data/result/scRNA/\", recursive = TRUE)\n}\n\nsaveRDS(seurat_cluster, file = \"./data/result/scRNA/Seurat_cluster.RDS\", compress = TRUE)",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>单细胞聚类分析</span>"
    ]
  },
  {
    "objectID": "scRNA-Cluster.html#sec-cluster-summary",
    "href": "scRNA-Cluster.html#sec-cluster-summary",
    "title": "27  单细胞聚类分析",
    "section": "\n27.8 总结",
    "text": "27.8 总结\n我们从降维后的数据中筛选出了能够代表足够多原始信息的主成分。这些被筛选出的主成分不仅保留了原始数据的关键特征，而且减少了数据的冗余和噪声，为后续的聚类分析提供了更加清晰和准确的数据基础。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] cowplot_1.1.3      Seurat_5.0.3       SeuratObject_5.0.2 sp_2.1-4          \n [5] lubridate_1.9.3    forcats_1.0.0      stringr_1.5.1      dplyr_1.1.4       \n [9] purrr_1.0.2        readr_2.1.5        tidyr_1.3.1        tibble_3.2.1      \n[13] ggplot2_3.5.1      tidyverse_2.0.0   \n\nloaded via a namespace (and not attached):\n  [1] deldir_2.0-4           pbapply_1.7-2          gridExtra_2.3         \n  [4] rlang_1.1.3            magrittr_2.0.3         RcppAnnoy_0.0.22      \n  [7] spatstat.geom_3.2-9    matrixStats_1.3.0      ggridges_0.5.6        \n [10] compiler_4.3.3         reshape2_1.4.4         png_0.1-8             \n [13] vctrs_0.6.5            pkgconfig_2.0.3        fastmap_1.1.1         \n [16] utf8_1.2.4             promises_1.3.0         rmarkdown_2.26        \n [19] tzdb_0.4.0             xfun_0.43              jsonlite_1.8.8        \n [22] goftest_1.2-3          later_1.3.2            spatstat.utils_3.0-4  \n [25] irlba_2.3.5.1          parallel_4.3.3         cluster_2.1.6         \n [28] R6_2.5.1               ica_1.0-3              spatstat.data_3.0-4   \n [31] stringi_1.8.4          RColorBrewer_1.1-3     reticulate_1.37.0     \n [34] parallelly_1.37.1      scattermore_1.2        lmtest_0.9-40         \n [37] Rcpp_1.0.12            knitr_1.46             tensor_1.5            \n [40] future.apply_1.11.2    zoo_1.8-12             sctransform_0.4.1     \n [43] httpuv_1.6.15          Matrix_1.6-5           splines_4.3.3         \n [46] igraph_2.0.3           timechange_0.3.0       tidyselect_1.2.1      \n [49] abind_1.4-5            rstudioapi_0.16.0      yaml_2.3.8            \n [52] spatstat.random_3.2-3  spatstat.explore_3.2-7 codetools_0.2-19      \n [55] miniUI_0.1.1.1         listenv_0.9.1          plyr_1.8.9            \n [58] lattice_0.22-6         shiny_1.8.1.1          withr_3.0.0           \n [61] ROCR_1.0-11            evaluate_0.23          Rtsne_0.17            \n [64] future_1.33.2          fastDummies_1.7.3      survival_3.7-0        \n [67] polyclip_1.10-6        fitdistrplus_1.1-11    pillar_1.9.0          \n [70] BiocManager_1.30.23    KernSmooth_2.23-22     renv_1.0.0            \n [73] plotly_4.10.4          generics_0.1.3         RcppHNSW_0.6.0        \n [76] hms_1.1.3              munsell_0.5.1          scales_1.3.0          \n [79] globals_0.16.3         xtable_1.8-4           glue_1.7.0            \n [82] lazyeval_0.2.2         tools_4.3.3            data.table_1.15.4     \n [85] RSpectra_0.16-1        RANN_2.6.1             leiden_0.4.3.1        \n [88] dotCall64_1.1-1        grid_4.3.3             colorspace_2.1-0      \n [91] nlme_3.1-164           patchwork_1.2.0        cli_3.6.2             \n [94] spatstat.sparse_3.0-3  spam_2.10-0            fansi_1.0.6           \n [97] viridisLite_0.4.2      uwot_0.2.2             gtable_0.3.5          \n[100] digest_0.6.35          progressr_0.14.0       ggrepel_0.9.5         \n[103] htmlwidgets_1.6.4      htmltools_0.5.8.1      lifecycle_1.0.4       \n[106] httr_1.4.7             mime_0.12              MASS_7.3-60.0.1       \n\n\n\n\n\n\nLyu, Yulin. 2021. 《ggunchull: A ggplot extension for drawing smooth non-convex irregular hulls around groups of points》. https://github.com/sajuukLyu/ggunchull.\n\n\nvan den Brand, Teun. 2023. ggh4x: Hacks for ’ggplot2’. https://github.com/teunbrand/ggh4x.",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>单细胞聚类分析</span>"
    ]
  },
  {
    "objectID": "scRNA-CellType.html",
    "href": "scRNA-CellType.html",
    "title": "28  单细胞细胞识别",
    "section": "",
    "text": "28.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(cowplot)\nlibrary(pheatmap)\nlibrary(ggh4x)\nlibrary(ggunchull)\nlibrary(scCATCH)\nlibrary(SingleR)\nlibrary(UCell)\nlibrary(patchwork)\nlibrary(ggtree)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\n\ncell_types &lt;- c(\"Hepatocyte\", \"T/NK\", \n               \"Myeloid\", \"B\",\n               \"Endothelial\", \"Fibroblast\")\n\ncell_colors &lt;- c(\"#A01FF0\", \"#1F78B4\", \"#4EB29D\", \n                 \"#DA3F4C\", \"#F1EE97\", \"#08306B\")",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>单细胞细胞识别</span>"
    ]
  },
  {
    "objectID": "scRNA-CellType.html#sec-celltype-importdata",
    "href": "scRNA-CellType.html#sec-celltype-importdata",
    "title": "28  单细胞细胞识别",
    "section": "\n28.2 导入数据",
    "text": "28.2 导入数据\n\n\nseurat_obj数据来自于 章节 27\n\n\n\nseurat_obj &lt;- readRDS(\"./data/result/scRNA/Seurat_cluster.RDS\")\n\nseurat_obj",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>单细胞细胞识别</span>"
    ]
  },
  {
    "objectID": "scRNA-CellType.html#sec-celltype-markers",
    "href": "scRNA-CellType.html#sec-celltype-markers",
    "title": "28  单细胞细胞识别",
    "section": "\n28.3 细胞簇的标记基因",
    "text": "28.3 细胞簇的标记基因\n细胞簇的标记基因是表征不同细胞簇的特异性基因，这些基因在特定细胞簇中表现出独特的表达模式，从而成为区分不同细胞簇的重要特征。\n\nif (file.exists(\"./data/result/scRNA/All_Markers_raw.csv\")) {\n  all_markers_raw &lt;- read.csv(\"./data/result/scRNA/All_Markers_raw.csv\")\n} else {\n  # 找出每个细胞簇的标记物，与所有剩余的细胞进行比较，只报告阳性细胞\n  all_markers_raw &lt;- FindAllMarkers(\n    object = seurat_obj,\n    only.pos = TRUE,\n    min.pct = 0.25,\n    logfc.threshold = 0.25,    \n    verbose = FALSE)\n  \n  write.csv(all_markers_raw, \"./data/result/scRNA/All_Markers_raw.csv\", row.names = FALSE)  \n}\n\n\ntopN_markers &lt;- all_markers_raw %&gt;%\n  dplyr::group_by(cluster) %&gt;%\n  dplyr::top_n(n = 5, wt = avg_log2FC)\n\n# DoHeatmap(object = seurat_obj, \n#           features = top10_markers$gene) + \n#   NoLegend() +\n#   scale_fill_gradientn(colors = c(\"white\",\"grey\",\"firebrick3\"))\n\nhead(topN_markers)",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>单细胞细胞识别</span>"
    ]
  },
  {
    "objectID": "scRNA-CellType.html#sec-celltype-ATC",
    "href": "scRNA-CellType.html#sec-celltype-ATC",
    "title": "28  单细胞细胞识别",
    "section": "\n28.4 ATC细胞注释",
    "text": "28.4 ATC细胞注释\n生成ATC网站需要的输入文件。\n\ntopN_markers_label &lt;- topN_markers %&gt;%\n  dplyr::group_by(cluster) %&gt;%\n  dplyr::summarise(label = paste0(\"Cluster\", cluster, \":\", paste(gene, collapse = \",\"))) %&gt;%\n  dplyr::distinct() %&gt;%\n  dplyr::ungroup() \n\n# cat(paste(topN_markers_label$label, collapse = \"\\n\"))\n结果：在Annotation of Cell Types，ATC选择好Human和liver后，每次输入的簇数目必须小于50。注释结果不够理想，很多cluster无法注释出结果，比如cluster0没有注释到细胞类群。",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>单细胞细胞识别</span>"
    ]
  },
  {
    "objectID": "scRNA-CellType.html#sec-celltype-scCATCH",
    "href": "scRNA-CellType.html#sec-celltype-scCATCH",
    "title": "28  单细胞细胞识别",
    "section": "\n28.5 scCATCH细胞注释",
    "text": "28.5 scCATCH细胞注释\nscCATCH(Shao 等 2020)是浙江大学团队在2020年发表的自动注释R包，它提供findmarkergene和findcelltype函数用于自动注释。通过查看数据中的组织和癌症列表判断是否适合自己的数据。\nsc_data &lt;- GetAssayData(seurat_obj, assay = \"RNA\", layer = \"scale.data\")\nsc_cluster &lt;- FetchData(object = seurat_obj, vars = \"ident\")\n\nobj &lt;- createscCATCH(data = sc_data, cluster = as.character(sc_cluster$ident))\n\n# find marker gene for each cluster\nobj &lt;- findmarkergene(\n  object = obj, \n  species = \"Human\",\n  cluster = \"All\",\n  marker = cellmatch, \n  use_method = \"1\",\n  tissue = \"Liver\", \n  cancer = \"Liver Cancer\",\n  cell_min_pct = 0.25,\n  logfc = 0.25,\n  pvalue = 0.05,\n  verbose = TRUE)\n\n# find cell type for each cluster\nobj &lt;- findcelltype(obj)\n结果：代码运行错误，报错信息No potential marker genes found in the matrix! You may adjust the cell clusters by applying other clustering algorithm and try again。",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>单细胞细胞识别</span>"
    ]
  },
  {
    "objectID": "scRNA-CellType.html#sec-celltype-SingleR",
    "href": "scRNA-CellType.html#sec-celltype-SingleR",
    "title": "28  单细胞细胞识别",
    "section": "\n28.6 SingleR细胞注释",
    "text": "28.6 SingleR细胞注释\n\nSingleR自建数据集，细胞注释。metadata已经包含文章提供的细胞注释信息，我们直接从seurat_obj构建数据库文件。\n\nseurat_SGR &lt;- seurat_obj\n\npred_label &lt;- SingleR(\n  test = GetAssayData(object = seurat_obj, \n                      assay = \"RNA\",\n                      layer = \"data\"), \n  ref = SGT_ref,\n  labels = SGT_ref$CellType)\n\nplotScoreHeatmap(pred_label)\n\nseurat_SGR_label &lt;- seurat_obj\nseurat_SGR_label$singleR &lt;- pred_label$labels\nseurat_SGR_label$singleR &lt;- factor(seurat_SGR_label$singleR,\n                                   levels = cell_types)\n\nDimPlot(seurat_SGR_label,\n        reduction = \"tsne\",\n        label = FALSE,\n        group.by = \"singleR\",        \n        cols = cell_colors,\n        pt.size = 0.5)\n结果：和 小节 28.7 的结果还是存在部分差异，说明该方法自动注释效果还是不太行。",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>单细胞细胞识别</span>"
    ]
  },
  {
    "objectID": "scRNA-CellType.html#sec-celltype-inner",
    "href": "scRNA-CellType.html#sec-celltype-inner",
    "title": "28  单细胞细胞识别",
    "section": "\n28.7 内部细胞注释",
    "text": "28.7 内部细胞注释\n\n\nseurat_obj@meta.data$celltype列已经包含了公开数据提供的细胞注释信息，我们可以直接使用该信息画图即可。\n\n\ntSNE_columns &lt;- c(\"celltype\", \"tSNE_1\", \"tSNE_2\")\ntSNE_data &lt;- FetchData(\n  object = seurat_obj,\n  vars = tSNE_columns) %&gt;%\n  dplyr::mutate(celltype = factor(celltype, levels = cell_types))\n\ntSNE_axis &lt;- ggh4x::guide_axis_truncated(\n    trunc_lower = unit(0, \"npc\"),\n    trunc_upper = unit(3, \"cm\"))\n\ntSNE_pl &lt;- ggplot(tSNE_data, aes(x = tSNE_1, y = tSNE_2, fill = celltype, color = celltype)) +\n    geom_point(size = 0.5, show.legend = FALSE) +\n    guides(color = \"none\", fill = guide_legend(title = NULL), \n           x = tSNE_axis, y = tSNE_axis) +\n    scale_fill_manual(values = cell_colors) +\n    scale_color_manual(values = cell_colors) +  \n    scale_x_continuous(breaks = NULL) +\n    scale_y_continuous(breaks = NULL) +  \n    theme(aspect.ratio = 1,\n         panel.background = element_blank(),\n         panel.grid = element_blank(),\n         axis.line = element_line(arrow = arrow(type = \"closed\")),\n         axis.title = element_text(hjust = 0.05, face = \"italic\"))\n\ntSNE_pl\n结果：在tsne图中，同一细胞类群没有聚集在一起，这和文章提供的图表现不一致，原因是我们仅仅保留了tumor患者的细胞。\n\n修改默认identity为细胞注释结果\n\n\nseurat_cell &lt;- seurat_obj\n\nIdents(object = seurat_cell) &lt;- \"celltype\"\nlevels(seurat_cell) &lt;- cell_types\n\nDimPlot(seurat_cell,\n        reduction = \"tsne\",\n        label = FALSE,\n        cols = cell_colors,\n        pt.size = 0.5)\n结果：从图示数据分析中观察到，部分簇内包含了多个细胞类群，这可能是由于新方法的聚类效果未能达到如先前研究那样的高度一致性。为了更准确地描述这些簇，我们需要重新对每个簇进行命名，命名规则将依据簇内出现概率最高的细胞类群来确定。",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>单细胞细胞识别</span>"
    ]
  },
  {
    "objectID": "scRNA-CellType.html#sec-celltype-clusterRename",
    "href": "scRNA-CellType.html#sec-celltype-clusterRename",
    "title": "28  单细胞细胞识别",
    "section": "\n28.8 重命名簇",
    "text": "28.8 重命名簇\n\nseurat_cell_rename &lt;- seurat_obj\n\ntable(seurat_obj$seurat_clusters, seurat_obj$celltype)\n\nseurat_cell_rename &lt;- RenameIdents(\n  object = seurat_cell_rename, \"0\" = \"Hepatocyte\",\n  \"1\" = \"Hepatocyte\", \"2\" = \"T/NK\", \"3\" = \"Myeloid\",\n  \"4\" = \"Myeloid\", \"5\" = \"Hepatocyte\", \"6\" = \"Hepatocyte\",\n  \"7\" = \"Myeloid\", \"8\" = \"Myeloid\", \"9\" = \"Hepatocyte\",\n  \"10\" = \"Hepatocyte\", \"11\" = \"Hepatocyte\", \"12\" = \"Endothelial\",\n  \"13\" = \"T/NK\", \"14\" = \"Hepatocyte\", \"15\" = \"Fibroblast\",\n  \"16\" = \"Hepatocyte\", \"17\" = \"T/NK\", \"18\" = \"Myeloid\",\n  \"19\" = \"T/NK\", \"20\" = \"T/NK\", \"21\" = \"Hepatocyte\",\n  \"22\" = \"Myeloid\", \"23\" = \"Fibroblast\", \"24\" = \"Myeloid\",\n  \"25\" = \"T/NK\", \"26\" = \"Hepatocyte\", \"27\" = \"Hepatocyte\",\n  \"28\" = \"Endothelial\", \"29\" = \"T/NK\", \"30\" = \"Myeloid\",\n  \"31\" = \"Hepatocyte\", \"32\" = \"T/NK\", \"33\" = \"Endothelial\",\n  \"34\" = \"B\", \"35\" = \"B\", \"36\" = \"Myeloid\",\n  \"37\" = \"Fibroblast\", \"38\" = \"Myeloid\", \"39\" = \"Hepatocyte\",\n  \"40\" = \"Myeloid\", \"41\" = \"T/NK\", \"42\" = \"Myeloid\",\n  \"43\" = \"Myeloid\", \"44\" = \"Myeloid\", \"45\" = \"Hepatocyte\",\n  \"46\" = \"Hepatocyte\", \"47\" = \"T/NK\", \"48\" = \"Endothelial\",\n  \"49\" = \"T/NK\", \"50\" = \"T/NK\", \"51\" = \"Myeloid\")\n\nlevels(seurat_cell_rename) &lt;- cell_types\n\nDimPlot(seurat_cell_rename,\n        reduction = \"tsne\",\n        label = FALSE,\n        cols = cell_colors,\n        pt.size = 0.5)",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>单细胞细胞识别</span>"
    ]
  },
  {
    "objectID": "scRNA-CellType.html#sec-celltype-geneex",
    "href": "scRNA-CellType.html#sec-celltype-geneex",
    "title": "28  单细胞细胞识别",
    "section": "\n28.9 展示分组基因表达",
    "text": "28.9 展示分组基因表达\n使用气泡图展示不同细胞类型的差异表达基因。\n\n\nif (file.exists(\"./data/result/scRNA/All_Markers_celltype.csv\")) {\n  all_markers_cell &lt;- read.csv(\"./data/result/scRNA/All_Markers_celltype.csv\")\n} else {\n  # 找出每个细胞簇的标记物，与所有剩余的细胞进行比较，只报告阳性细胞\n  # devtools::install_github('immunogenomics/presto')\n  require(presto)\n  all_markers_cell &lt;- FindAllMarkers(\n    object = seurat_cell_rename,\n    only.pos = TRUE,\n    min.pct = 0.25,\n    logfc.threshold = 0.25,    \n    verbose = FALSE)\n  \n  write.csv(all_markers_cell, \"./data/result/scRNA/All_Markers_celltype.csv\", row.names = FALSE)  \n}\n\ntopN_markers_cell &lt;- all_markers_cell %&gt;%\n  dplyr::group_by(cluster) %&gt;%\n  dplyr::top_n(n = 5, wt = avg_log2FC)\n\nDotPlot_markers &lt;- DotPlot(object = seurat_cell_rename, \n        features = topN_markers_cell$gene,\n        cols = cell_colors) + \n  coord_flip() +\n  labs(x = \"\", y = \"\") +\n  scale_color_gradientn(colors = c('#330066', '#336699', '#66CC66', '#FFCC33')) +\n  theme(axis.text.x = element_text(angle = 60, hjust = 1))\n\nggplot(DotPlot_markers$data, aes(x = id, y = features.plot, size = pct.exp)) +\n  geom_point(shape = 21,aes(fill = avg.exp.scaled), position = position_dodge(0)) +\n  scale_size_continuous(range = c(1, 10)) + \n  scale_fill_gradient(low = \"#E54924\", high = \"#498EA4\") +\n  labs(x = \"\", y = \"\", size = \"Percent Express\",\n       fill = \"Average Expression\") +\n  # guides(size = guide_legend(title = \"Percent Express\", order = 1),\n  #        fill = guide_legend(title = \"Average Expression\", order = 2)) +\n  theme_bw() +\n  theme(legend.position = \"right\",\n        legend.box = \"vertical\",\n        legend.margin = margin(t = 0, unit = 'cm'),\n        legend.spacing = unit(0, \"in\"),\n        axis.text.x = element_text(color = \"black\", size = 11, angle = 45, \n                                    vjust = 0.5, hjust = 0.5),\n        axis.text.y = element_text(color = \"black\", size = 10),\n        legend.text = element_text(size = 10, color = \"black\"),\n        legend.title = element_text(size = 10, color = \"black\"))\n结果：从气泡图可以看出每个细胞类型都有自己独有的差异基因。",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>单细胞细胞识别</span>"
    ]
  },
  {
    "objectID": "scRNA-CellType.html#sec-celltype-dotplot",
    "href": "scRNA-CellType.html#sec-celltype-dotplot",
    "title": "28  单细胞细胞识别",
    "section": "\n28.10 美化气泡图",
    "text": "28.10 美化气泡图\n对 小节 28.9 的细胞类群的基因表达状况气泡图进行美化，体现不同的原始聚类结果。\ncell_bubble_pl &lt;- plot_spacer() + plot_spacer() + ggtree_plot_col +\n    plot_spacer() + plot_spacer() + labels + \n    plot_spacer() + plot_spacer() + plot_spacer() +\n    ggtree_plot + plot_spacer() + dotplot + \n    plot_spacer() + plot_spacer() + legend + \n    plot_layout(ncol = 3, widths = c(0.7, -0.1, 4), heights = c(0.9, 0.1, -0.1, 4, 1)) &\n  theme(text = element_text(family = \"serif\"))\n\ncell_bubble_pl\n结果：气泡图",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>单细胞细胞识别</span>"
    ]
  },
  {
    "objectID": "scRNA-CellType.html#sec-celltype-evaluate",
    "href": "scRNA-CellType.html#sec-celltype-evaluate",
    "title": "28  单细胞细胞识别",
    "section": "\n28.11 单细胞评分",
    "text": "28.11 单细胞评分\n单细胞评分分析UCell(Andreatta 和 Carmona 2021)R包，对细胞类群进行评分。\n\nmarkers &lt;- list()\nmarkers$Hepatocyte &lt;- c(\"SPINK1\", \"COX7B2\", \"TFF2\")\nmarkers$`T/NK` &lt;- c(\"CD2\", \"TRAC\", \"CD3E\")\nmarkers$Myeloid &lt;- c(\"MS4A7\", \"C5AR1\", \"FPR3\")\nmarkers$B &lt;- c(\"MS4A1\", \"BANK1\", \"TNFRSF13C\")\nmarkers$Endothelial &lt;- c(\"CLEC14A\", \"EMCN\", \"TM4SF18\")\nmarkers$Fibroblast &lt;- c(\"COL14A1\", \"PLN\", \"MFAP4\")\n\nmarker_score &lt;- AddModuleScore_UCell(\n  obj = seurat_cell_rename,\n  features = markers)\n\nFeaturePlot(object = marker_score,\n            features = colnames(marker_score@meta.data) %&gt;% \n              stringr::str_subset(\"_UCell\"),\n            reduction = \"tsne\",\n            order = T, \n            ncol = 3,\n            cols = viridis::viridis(256)) &\n  theme(plot.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        legend.title = element_text(size = 10))",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>单细胞细胞识别</span>"
    ]
  },
  {
    "objectID": "scRNA-CellType.html#sec-celltype-output",
    "href": "scRNA-CellType.html#sec-celltype-output",
    "title": "28  单细胞细胞识别",
    "section": "\n28.12 输出结果",
    "text": "28.12 输出结果\n\nif (!dir.exists(\"./data/result/Figure/\")) {\n  dir.create(\"./data/result/Figure/\", recursive = TRUE)\n}\n\npdf(file = \"./data/result/Figure/Fig7-A.pdf\", width = 7, height = 5)\ntSNE_pl\ndev.off()\nif (!dir.exists(\"./data/result/scRNA/\")) {\n  dir.create(\"./data/result/scRNA/\", recursive = TRUE)\n}\n\nsaveRDS(seurat_cell_rename, file = \"./data/result/scRNA/Seurat_celltype.RDS\", compress = TRUE)\n\nif (!dir.exists(\"./data/result/Figure/\")) {\n  dir.create(\"./data/result/Figure/\", recursive = TRUE)\n}\n\nggsave(\"./data/result/Figure/Fig7-A.pdf\", tSNE_pl, width = 7, height = 5, dpi = 600)",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>单细胞细胞识别</span>"
    ]
  },
  {
    "objectID": "scRNA-CellType.html#sec-celltype-summary",
    "href": "scRNA-CellType.html#sec-celltype-summary",
    "title": "28  单细胞细胞识别",
    "section": "\n28.13 总结",
    "text": "28.13 总结\n在进行生物信息学或单细胞测序数据的分析中，聚类分析是识别不同细胞类型的关键步骤。一旦聚类完成，对类群进行标记基因的识别、细胞自动注释以及文献结果的整合注释，最后对注释结果进行打分评估，是评估聚类效果的重要流程。\n接下来，我们针对每个聚类类群进行标记基因的识别。这些标记基因通常是在该类群中特异性高表达，而在其他类群中表达量较低的基因。通过比较不同类群间的基因表达差异，我们可以筛选出每个类群的特异性标记基因，为后续细胞类型的注释提供基础。除此之外，我们还采用了自动注释方法，但由于数据库的局限性和实验条件的差异，自动注释的结果可能并不完全准确。需要结合手动注释结果和文献验证。\n最后，我们需要对注释结果进行打分评估，以验证聚类效果的好坏。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices datasets  utils     methods  \n[8] base     \n\nother attached packages:\n [1] ggtree_3.10.1               patchwork_1.2.0            \n [3] UCell_2.6.2                 SingleR_2.4.1              \n [5] SummarizedExperiment_1.32.0 Biobase_2.62.0             \n [7] GenomicRanges_1.54.1        GenomeInfoDb_1.38.8        \n [9] IRanges_2.36.0              S4Vectors_0.40.2           \n[11] BiocGenerics_0.48.1         MatrixGenerics_1.14.0      \n[13] matrixStats_1.3.0           scCATCH_3.2.2              \n[15] ggunchull_1.0.1             ggh4x_0.2.8                \n[17] pheatmap_1.0.12             cowplot_1.1.3              \n[19] Seurat_5.0.3                SeuratObject_5.0.2         \n[21] sp_2.1-4                    lubridate_1.9.3            \n[23] forcats_1.0.0               stringr_1.5.1              \n[25] dplyr_1.1.4                 purrr_1.0.2                \n[27] readr_2.1.5                 tidyr_1.3.1                \n[29] tibble_3.2.1                ggplot2_3.5.1              \n[31] tidyverse_2.0.0            \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.22            splines_4.3.3              \n  [3] later_1.3.2                 ggplotify_0.1.2            \n  [5] bitops_1.0-7                R.oo_1.26.0                \n  [7] polyclip_1.10-6             fastDummies_1.7.3          \n  [9] lifecycle_1.0.4             globals_0.16.3             \n [11] lattice_0.22-6              MASS_7.3-60.0.1            \n [13] magrittr_2.0.3              plotly_4.10.4              \n [15] rmarkdown_2.26              yaml_2.3.8                 \n [17] httpuv_1.6.15               sctransform_0.4.1          \n [19] spam_2.10-0                 spatstat.sparse_3.0-3      \n [21] reticulate_1.37.0           pbapply_1.7-2              \n [23] RColorBrewer_1.1-3          abind_1.4-5                \n [25] zlibbioc_1.48.2             Rtsne_0.17                 \n [27] R.utils_2.12.3              RCurl_1.98-1.14            \n [29] yulab.utils_0.1.4           GenomeInfoDbData_1.2.11    \n [31] ggrepel_0.9.5               irlba_2.3.5.1              \n [33] listenv_0.9.1               spatstat.utils_3.0-4       \n [35] tidytree_0.4.6              goftest_1.2-3              \n [37] RSpectra_0.16-1             spatstat.random_3.2-3      \n [39] fitdistrplus_1.1-11         parallelly_1.37.1          \n [41] DelayedMatrixStats_1.24.0   leiden_0.4.3.1             \n [43] codetools_0.2-19            DelayedArray_0.28.0        \n [45] alphahull_2.5               tidyselect_1.2.1           \n [47] aplot_0.2.2                 ScaledMatrix_1.10.0        \n [49] sgeostat_1.0-27             spatstat.explore_3.2-7     \n [51] jsonlite_1.8.8              BiocNeighbors_1.20.2       \n [53] progressr_0.14.0            ggridges_0.5.6             \n [55] survival_3.7-0              dbscan_1.1-12              \n [57] tools_4.3.3                 progress_1.2.3             \n [59] treeio_1.26.0               ica_1.0-3                  \n [61] Rcpp_1.0.12                 glue_1.7.0                 \n [63] gridExtra_2.3               SparseArray_1.2.4          \n [65] xfun_0.43                   withr_3.0.0                \n [67] BiocManager_1.30.23         fastmap_1.1.1              \n [69] fansi_1.0.6                 rsvd_1.0.5                 \n [71] digest_0.6.35               gridGraphics_0.5-1         \n [73] timechange_0.3.0            R6_2.5.1                   \n [75] mime_0.12                   colorspace_2.1-0           \n [77] scattermore_1.2             tensor_1.5                 \n [79] spatstat.data_3.0-4         R.methodsS3_1.8.2          \n [81] utf8_1.2.4                  generics_0.1.3             \n [83] renv_1.0.0                  data.table_1.15.4          \n [85] prettyunits_1.2.0           httr_1.4.7                 \n [87] htmlwidgets_1.6.4           S4Arrays_1.2.1             \n [89] uwot_0.2.2                  pkgconfig_2.0.3            \n [91] gtable_0.3.5                lmtest_0.9-40              \n [93] SingleCellExperiment_1.24.0 XVector_0.42.0             \n [95] htmltools_0.5.8.1           dotCall64_1.1-1            \n [97] scales_1.3.0                png_0.1-8                  \n [99] ggfun_0.1.4                 splancs_2.01-44            \n[101] knitr_1.46                  rstudioapi_0.16.0          \n[103] tzdb_0.4.0                  reshape2_1.4.4             \n[105] nlme_3.1-164                cachem_1.0.8               \n[107] zoo_1.8-12                  KernSmooth_2.23-22         \n[109] parallel_4.3.3              miniUI_0.1.1.1             \n[111] pillar_1.9.0                grid_4.3.3                 \n[113] vctrs_0.6.5                 RANN_2.6.1                 \n[115] promises_1.3.0              BiocSingular_1.18.0        \n[117] beachmat_2.18.1             xtable_1.8-4               \n[119] cluster_2.1.6               evaluate_0.23              \n[121] cli_3.6.2                   compiler_4.3.3             \n[123] rlang_1.1.3                 crayon_1.5.2               \n[125] future.apply_1.11.2         interp_1.1-6               \n[127] fs_1.6.4                    plyr_1.8.9                 \n[129] stringi_1.8.4               BiocParallel_1.36.0        \n[131] viridisLite_0.4.2           deldir_2.0-4               \n[133] munsell_0.5.1               lazyeval_0.2.2             \n[135] spatstat.geom_3.2-9         Matrix_1.6-5               \n[137] RcppHNSW_0.6.0              hms_1.1.3                  \n[139] sparseMatrixStats_1.14.0    future_1.33.2              \n[141] shiny_1.8.1.1               ROCR_1.0-11                \n[143] memoise_2.0.1               igraph_2.0.3               \n[145] ape_5.8                    \n\n\n\n\n\n\nAndreatta, Massimo, 和 Santiago J Carmona. 2021. 《UCell: Robust and scalable single-cell gene signature scoring》. Computational and structural biotechnology journal 19: 3796–98.\n\n\nShao, Xin, Jie Liao, Xiaoyan Lu, Rui Xue, Ni Ai, 和 Xiaohui Fan. 2020. 《scCATCH: automatic annotation on cell types of clusters from single-cell RNA sequencing data》. Iscience 23 (3).",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>单细胞细胞识别</span>"
    ]
  },
  {
    "objectID": "scRNA-CellValidation.html",
    "href": "scRNA-CellValidation.html",
    "title": "29  核心特征单细胞表达",
    "section": "",
    "text": "29.1 加载R包\n使用rm(list = ls())来清空环境中的所有变量。\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(cowplot)\nlibrary(rstatix)\nlibrary(viridis)\nlibrary(ggpubr)\n\nrm(list = ls())\noptions(stringsAsFactors = F)\noptions(future.globals.maxSize = 10000 * 1024^2)\n\ngrp_names &lt;- c(\"Early Stage\", \"Late Stage\")\ngrp_colors &lt;- c(\"#8AC786\", \"#B897CA\")\n\ncell_types &lt;- c(\"Hepatocyte\", \"T/NK\", \n               \"Myeloid\", \"B\",\n               \"Endothelial\", \"Fibroblast\")\n\ncell_colors &lt;- c(\"#A01FF0\", \"#1F78B4\", \"#4EB29D\", \n                 \"#DA3F4C\", \"#F1EE97\", \"#08306B\")",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>核心特征单细胞表达</span>"
    ]
  },
  {
    "objectID": "scRNA-CellValidation.html#sec-cellvalidate-importdata",
    "href": "scRNA-CellValidation.html#sec-cellvalidate-importdata",
    "title": "29  核心特征单细胞表达",
    "section": "\n29.2 导入数据",
    "text": "29.2 导入数据\n\nseurat_obj数据来自于 章节 28\ncommon_feature数据来自于 章节 23\n\n\nseurat_obj &lt;- readRDS(\"./data/result/scRNA/Seurat_celltype.RDS\")\ncommon_feature &lt;- read.csv(\"./data/result/Biomarker/Biomarker_LR_RF_SVM_validation.csv\")",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>核心特征单细胞表达</span>"
    ]
  },
  {
    "objectID": "scRNA-CellValidation.html#sec-cellvalidate-tSNE",
    "href": "scRNA-CellValidation.html#sec-cellvalidate-tSNE",
    "title": "29  核心特征单细胞表达",
    "section": "\n29.3 细胞类群的tSNE",
    "text": "29.3 细胞类群的tSNE\n查看细胞类群的可视化结果\n\nDimPlot(seurat_obj,\n        reduction = \"tsne\",\n        label = FALSE,\n        cols = cell_colors,\n        pt.size = 0.5)\n结果：从tSNE图得知，有6种类型的细胞。",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>核心特征单细胞表达</span>"
    ]
  },
  {
    "objectID": "scRNA-CellValidation.html#sec-cellvalidate-expression",
    "href": "scRNA-CellValidation.html#sec-cellvalidate-expression",
    "title": "29  核心特征单细胞表达",
    "section": "\n29.4 核心特征表达分布",
    "text": "29.4 核心特征表达分布\n查看核心特征在单细胞水平的表达密度分布图\n\nfeature_FeaturePlot &lt;- FeaturePlot(\n  object = seurat_obj,\n  features = common_feature %&gt;%\n    dplyr::filter(Enrich %in% c(\"Both_Early\", \"Both_Late\")) %&gt;%\n    dplyr::pull(FeatureID),\n  reduction = \"tsne\",\n  ncol = 3)\n\nfeature_FeaturePlot\n结果：6个核心特征在不同细胞类群的分布不同，在 章节 24 发现的SLC6A8富集在Hepatocyte细胞群。",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>核心特征单细胞表达</span>"
    ]
  },
  {
    "objectID": "scRNA-CellValidation.html#sec-cellvalidate-dotplot",
    "href": "scRNA-CellValidation.html#sec-cellvalidate-dotplot",
    "title": "29  核心特征单细胞表达",
    "section": "\n29.5 核心特征点图",
    "text": "29.5 核心特征点图\n查看核心特征在单细胞水平的表达的点图\n\nfeature_DotPlot &lt;- DotPlot(\n  object = seurat_obj, \n  features = common_feature %&gt;%\n    dplyr::filter(Enrich %in% c(\"Both_Early\", \"Both_Late\")) %&gt;%\n    dplyr::pull(FeatureID)) + \n  labs(y = \"\")\n\nfeature_DotPlot",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>核心特征单细胞表达</span>"
    ]
  },
  {
    "objectID": "scRNA-CellValidation.html#sec-cellvalidate-SLC6A8",
    "href": "scRNA-CellValidation.html#sec-cellvalidate-SLC6A8",
    "title": "29  核心特征单细胞表达",
    "section": "\n29.6 SLC6A8表达分布",
    "text": "29.6 SLC6A8表达分布\n单独生成关注的核心特征SLC6A8在细胞水平的表达分布情况。\n\nSLC6A8_DotPlot &lt;- DotPlot(\n  object = seurat_obj, \n  features = \"SLC6A8\")\n\nSLC6A8_DotPlot",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>核心特征单细胞表达</span>"
    ]
  },
  {
    "objectID": "scRNA-CellValidation.html#sec-cellvalidate-significant",
    "href": "scRNA-CellValidation.html#sec-cellvalidate-significant",
    "title": "29  核心特征单细胞表达",
    "section": "\n29.7 SLC6A8差异结果",
    "text": "29.7 SLC6A8差异结果\n在先前bulk RNA结果 小节 23.6 中，我们发现核心特征SLC6A8富集在HCC晚期。现在在细胞水平上，它的表达分布情况是如何？\nSLC6A8_vlnplot\n结果：在细胞水平上，SLC6A8在HCC早期和晚期的差异结果。SLC6A8分别显著富集在Hepatocyte和Myeloid的晚期分组。",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>核心特征单细胞表达</span>"
    ]
  },
  {
    "objectID": "scRNA-CellValidation.html#sec-cellvalidate-output",
    "href": "scRNA-CellValidation.html#sec-cellvalidate-output",
    "title": "29  核心特征单细胞表达",
    "section": "\n29.8 输出结果",
    "text": "29.8 输出结果\nggsave(\"./data/result/Figure/Fig7-B.pdf\", SLC6A8_FeaturePlot, width = 5, height = 4, dpi = 600) \nggsave(\"./data/result/Figure/Fig7-C.pdf\", SLC6A8_DotPlot, width = 5, height = 3, dpi = 600) \nggsave(\"./data/result/Figure/Fig7-D.pdf\", SLC6A8_vlnplot, width = 8, height = 4, dpi = 600)\nggsave(\"./data/result/Figure/SFig6.pdf\", feature_DotPlot, width = 8, height = 4, dpi = 600)",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>核心特征单细胞表达</span>"
    ]
  },
  {
    "objectID": "scRNA-CellValidation.html#sec-cellvalidate-summary",
    "href": "scRNA-CellValidation.html#sec-cellvalidate-summary",
    "title": "29  核心特征单细胞表达",
    "section": "\n29.9 总结",
    "text": "29.9 总结\n在深入研究细胞类群的信息后，我们针对六个核心特征进行了详尽的分析，特别关注了SLC6A8这一基因在细胞层面的表达情况。\n系统信息\n\nsessionInfo()\n\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggpubr_0.6.0       viridis_0.6.5      viridisLite_0.4.2  rstatix_0.7.2     \n [5] cowplot_1.1.3      Seurat_5.0.3       SeuratObject_5.0.2 sp_2.1-4          \n [9] lubridate_1.9.3    forcats_1.0.0      stringr_1.5.1      dplyr_1.1.4       \n[13] purrr_1.0.2        readr_2.1.5        tidyr_1.3.1        tibble_3.2.1      \n[17] ggplot2_3.5.1      tidyverse_2.0.0   \n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3     rstudioapi_0.16.0      jsonlite_1.8.8        \n  [4] magrittr_2.0.3         spatstat.utils_3.0-4   rmarkdown_2.26        \n  [7] vctrs_0.6.5            ROCR_1.0-11            spatstat.explore_3.2-7\n [10] htmltools_0.5.8.1      broom_1.0.5            sctransform_0.4.1     \n [13] parallelly_1.37.1      KernSmooth_2.23-22     htmlwidgets_1.6.4     \n [16] ica_1.0-3              plyr_1.8.9             plotly_4.10.4         \n [19] zoo_1.8-12             igraph_2.0.3           mime_0.12             \n [22] lifecycle_1.0.4        pkgconfig_2.0.3        Matrix_1.6-5          \n [25] R6_2.5.1               fastmap_1.1.1          fitdistrplus_1.1-11   \n [28] future_1.33.2          shiny_1.8.1.1          digest_0.6.35         \n [31] colorspace_2.1-0       patchwork_1.2.0        tensor_1.5            \n [34] RSpectra_0.16-1        irlba_2.3.5.1          progressr_0.14.0      \n [37] fansi_1.0.6            spatstat.sparse_3.0-3  timechange_0.3.0      \n [40] httr_1.4.7             polyclip_1.10-6        abind_1.4-5           \n [43] compiler_4.3.3         withr_3.0.0            backports_1.4.1       \n [46] carData_3.0-5          fastDummies_1.7.3      ggsignif_0.6.4        \n [49] MASS_7.3-60.0.1        tools_4.3.3            lmtest_0.9-40         \n [52] httpuv_1.6.15          future.apply_1.11.2    goftest_1.2-3         \n [55] glue_1.7.0             nlme_3.1-164           promises_1.3.0        \n [58] grid_4.3.3             Rtsne_0.17             cluster_2.1.6         \n [61] reshape2_1.4.4         generics_0.1.3         gtable_0.3.5          \n [64] spatstat.data_3.0-4    tzdb_0.4.0             data.table_1.15.4     \n [67] hms_1.1.3              car_3.1-2              utf8_1.2.4            \n [70] spatstat.geom_3.2-9    RcppAnnoy_0.0.22       ggrepel_0.9.5         \n [73] RANN_2.6.1             pillar_1.9.0           spam_2.10-0           \n [76] RcppHNSW_0.6.0         later_1.3.2            splines_4.3.3         \n [79] lattice_0.22-6         renv_1.0.0             survival_3.7-0        \n [82] deldir_2.0-4           tidyselect_1.2.1       miniUI_0.1.1.1        \n [85] pbapply_1.7-2          knitr_1.46             gridExtra_2.3         \n [88] scattermore_1.2        xfun_0.43              matrixStats_1.3.0     \n [91] stringi_1.8.4          lazyeval_0.2.2         yaml_2.3.8            \n [94] evaluate_0.23          codetools_0.2-19       BiocManager_1.30.23   \n [97] cli_3.6.2              uwot_0.2.2             xtable_1.8-4          \n[100] reticulate_1.37.0      munsell_0.5.1          Rcpp_1.0.12           \n[103] globals_0.16.3         spatstat.random_3.2-3  png_0.1-8             \n[106] parallel_4.3.3         dotCall64_1.1-1        listenv_0.9.1         \n[109] scales_1.3.0           ggridges_0.5.6         leiden_0.4.3.1        \n[112] rlang_1.1.3",
    "crumbs": [
      "单细胞分析",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>核心特征单细胞表达</span>"
    ]
  },
  {
    "objectID": "paper-structure.html",
    "href": "paper-structure.html",
    "title": "30  框架",
    "section": "",
    "text": "30.1 标题(title)\n标题是论文的简短概括，旨在吸引读者的注意并快速了解论文的主题。标题应简洁明了，包含关键词，能够准确反映论文的主要内容和研究焦点。避免使用过于复杂或冗长的句子。",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>框架</span>"
    ]
  },
  {
    "objectID": "paper-structure.html#sec-paper-abstract",
    "href": "paper-structure.html#sec-paper-abstract",
    "title": "30  框架",
    "section": "30.2 摘要(abstract)",
    "text": "30.2 摘要(abstract)\n摘要是对论文内容的简要总结，为读者提供论文的整体概览。摘要应包括研究背景、目的、方法、主要结果和结论。通常不超过200-300字，语言应精炼，结构清晰。",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>框架</span>"
    ]
  },
  {
    "objectID": "paper-structure.html#sec-paper-introduction",
    "href": "paper-structure.html#sec-paper-introduction",
    "title": "30  框架",
    "section": "30.3 介绍(introduction)",
    "text": "30.3 介绍(introduction)\n介绍部分阐述研究的背景、意义、目的和理论基础，为后续的研究内容做铺垫。首先概述相关领域的研究现状和研究空白，然后明确研究目的和研究问题，最后简要介绍研究方法和预期结果。",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>框架</span>"
    ]
  },
  {
    "objectID": "paper-structure.html#sec-paper-methods",
    "href": "paper-structure.html#sec-paper-methods",
    "title": "30  框架",
    "section": "30.4 方法和材料(methods and materials)",
    "text": "30.4 方法和材料(methods and materials)\n方法和材料部分详细描述研究过程中采用的研究方法、实验设计、样本选择、数据收集和分析方法等。确保详细描述研究方法的每个步骤，使读者能够复现实验。同时，也要注明所使用的材料和设备，以及数据的来源和处理方式。",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>框架</span>"
    ]
  },
  {
    "objectID": "paper-structure.html#sec-paper-results",
    "href": "paper-structure.html#sec-paper-results",
    "title": "30  框架",
    "section": "30.5 结果(results)",
    "text": "30.5 结果(results)\n结果部分呈现研究的发现和数据，通常以表格、图表或文字描述的形式呈现。清晰、准确地描述研究结果，避免主观解释。同时，对结果进行必要的统计分析，以支持研究结论。",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>框架</span>"
    ]
  },
  {
    "objectID": "paper-structure.html#sec-paper-discussion",
    "href": "paper-structure.html#sec-paper-discussion",
    "title": "30  框架",
    "section": "30.6 讨论(discussion)",
    "text": "30.6 讨论(discussion)\n讨论部分对研究结果进行解释和分析，将结果与已有研究进行比较，指出研究的限制和不足之处，并提出未来研究的方向。在讨论中，要客观地评价研究结果，避免夸大或缩小研究价值。同时，要深入探讨研究结果的深层含义和可能的影响。",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>框架</span>"
    ]
  },
  {
    "objectID": "paper-structure.html#sec-paper-conclusion",
    "href": "paper-structure.html#sec-paper-conclusion",
    "title": "30  框架",
    "section": "30.7 结论(conclusion)",
    "text": "30.7 结论(conclusion)\n结论部分是对全文的总结，强调研究的主要发现和贡献，以及研究的局限性和未来展望。结论应简洁明了，概括研究的主要结果和贡献。同时，也要指出研究的局限性和不足之处，并提出对未来研究的建议。",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>框架</span>"
    ]
  },
  {
    "objectID": "paper-results.html",
    "href": "paper-results.html",
    "title": "31  结果",
    "section": "",
    "text": "31.1 Supplemental Figure1",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>结果</span>"
    ]
  },
  {
    "objectID": "paper-results.html#sec-paper-results-sfig1",
    "href": "paper-results.html#sec-paper-results-sfig1",
    "title": "31  结果",
    "section": "",
    "text": "图 31.2: Supplemental Figure 1: PCA of multiple types of gene expression matrix for batch removal on merge data cohort (LIHC-US and LIRI-JP).",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>结果</span>"
    ]
  },
  {
    "objectID": "paper-results.html#sec-paper-results-fig2",
    "href": "paper-results.html#sec-paper-results-fig2",
    "title": "31  结果",
    "section": "31.2 Figure2",
    "text": "31.2 Figure2\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\n图 31.3: Figure 2: DEGs between the early-stage group and the late-stage group in HCC merge dataset (LIHC-US and LIRI-JP).",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>结果</span>"
    ]
  },
  {
    "objectID": "paper-results.html#sec-paper-results-fig3",
    "href": "paper-results.html#sec-paper-results-fig3",
    "title": "31  结果",
    "section": "31.3 Figure3",
    "text": "31.3 Figure3\n在流程图中，功能分析是从差异基因衍生出的分析环节，其之所以独立成为一个章节，是因为相较于其他分析方向，此处更适宜作为上下文的衔接点。\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c)\n\n\n\n\n\n\n\n\n\n\n\n(d)\n\n\n\n\n\n\n\n图 31.4: Figure 3: Functional analysis of DEGs between the early-stage group and the late-stage group in HCC merge cohort.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>结果</span>"
    ]
  },
  {
    "objectID": "paper-results.html#sec-paper-results-sfig2",
    "href": "paper-results.html#sec-paper-results-sfig2",
    "title": "31  结果",
    "section": "31.4 Supplemental Figure2",
    "text": "31.4 Supplemental Figure2\n\n\n\n\n\n\n图 31.5: Supplemental Figure 2: GSVA enrichment analysis of gene expression matrix between the HCC early stage and late stage in merge data.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>结果</span>"
    ]
  },
  {
    "objectID": "paper-results.html#sec-paper-results-fig4",
    "href": "paper-results.html#sec-paper-results-fig4",
    "title": "31  结果",
    "section": "31.5 Figure4",
    "text": "31.5 Figure4\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c)\n\n\n\n\n\n\n\n\n\n\n\n(d)\n\n\n\n\n\n\n\n图 31.6: Figure 4: Evaluation and visualization of immune cell infiltration between the HCC early stage and late stage in merge cohort.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>结果</span>"
    ]
  },
  {
    "objectID": "paper-results.html#sec-paper-results-sfig3",
    "href": "paper-results.html#sec-paper-results-sfig3",
    "title": "31  结果",
    "section": "31.6 Supplemental Figure3",
    "text": "31.6 Supplemental Figure3\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\n\n\n\n\n(c)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(d)\n\n\n\n\n\n\n\n\n\n\n\n(e)\n\n\n\n\n\n\n\n\n\n\n\n(f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(g)\n\n\n\n\n\n\n\n\n\n\n\n(h)\n\n\n\n\n\n\n\n图 31.7: Supplemental Figure 3: Machine learning algorithms to screen potential diagnostic markers from DEGs between the HCC early stage and late stage in merge data.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>结果</span>"
    ]
  },
  {
    "objectID": "paper-results.html#sec-paper-results-fig5",
    "href": "paper-results.html#sec-paper-results-fig5",
    "title": "31  结果",
    "section": "31.7 Figure5",
    "text": "31.7 Figure5\n\n\n\n\n\n\n\n\n\n\n\n(a) A1\n\n\n\n\n\n\n\n\n\n\n\n(b) A2\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) B\n\n\n\n\n\n\n\n\n\n\n\n(d) D\n\n\n\n\n\n\n\n\n\n\n\n\n\n(e) C\n\n\n\n\n\n\n\n\n\n\n\n(f) E\n\n\n\n\n\n\n\n图 31.8: Figure 5: Validation and ROC of SLC6A8 diagnostic marker identified from the merge datasets by multiple machine learning algorithms.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>结果</span>"
    ]
  },
  {
    "objectID": "paper-results.html#sec-paper-results-sfig4",
    "href": "paper-results.html#sec-paper-results-sfig4",
    "title": "31  结果",
    "section": "31.8 Supplemental Figure4",
    "text": "31.8 Supplemental Figure4\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\n图 31.9: Supplemental Figure 4: 10 overlapping genes screened from machine learning algorithms were validated in the validation cohort.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>结果</span>"
    ]
  },
  {
    "objectID": "paper-results.html#sec-paper-results-fig6",
    "href": "paper-results.html#sec-paper-results-fig6",
    "title": "31  结果",
    "section": "31.9 Figure6",
    "text": "31.9 Figure6\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c)\n\n\n\n\n\n\n\n\n\n\n\n(d)\n\n\n\n\n\n\n\n图 31.10: Figure 6: Correlation between SLC6A8 and 21 immune cells.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>结果</span>"
    ]
  },
  {
    "objectID": "paper-results.html#sec-paper-results-fig7",
    "href": "paper-results.html#sec-paper-results-fig7",
    "title": "31  结果",
    "section": "31.10 Figure7",
    "text": "31.10 Figure7\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c)\n\n\n\n\n\n\n\n\n\n\n\n(d)\n\n\n\n\n\n\n\n图 31.11: Figure 7: SLC6A8 expression in single-cell GSE149614 transcriptomic dataset.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>结果</span>"
    ]
  },
  {
    "objectID": "paper-results.html#sec-paper-results-writing",
    "href": "paper-results.html#sec-paper-results-writing",
    "title": "31  结果",
    "section": "31.11 撰写结果",
    "text": "31.11 撰写结果\n现在可以将文章的研究成果划分为以下几个主要部分：\n\nIdentification of DEGs in the HCC early stage and late stage；\nFunctional analysis of DEGs by GO and KEGG enrichment analysis；\nSignificant changes between two stages in immune cells by ImmuneCellAI；\nPotential gene biomarkers identified by multiple machine learning approaches；\nCorrelation analysis between SLC6A8 and immune cells；\nExpression level of SLC6A8 in single-cell transcriptomic data；\n\n现在主要的点在于怎么撰写结果。在撰写研究结果部分时，建议首先明确地提出几个数据分析中观察到的最显著的趋势或模式。这些关键点应简洁地反映出研究的核心成果。比如:\n\n第一部分\n\n\nWe conducted an analysis to identify differentially expressed genes\n\n\nA total of 137 genes exhibited significant enrichment in the early-stage group\n\n\n第二部分\n\n\nTo delve into the potential biological implications of differentially expressed genes (DEGs)\n\n\nFurthermore, through Gene Set Enrichment Analysis (GSEA)\n\n\n第三部分\n\n\nUtilizing the ImmuCellAI, a cutting-edge immune cell infiltration algorithm\n\n\n第四部分\n\n\nTo identify potential gene biomarkers that can distinguish between the early and late stages of HCC\n\n\nSubsequently, we extracted 10 intersection biomarkers\n\n\nTo identify diagnostic markers among the six genes\n\n\n第五部分\n\n\nUtilizing Spearman correlation,\n\n\n第六部分\n\n\nUtilizing t-SNE visualization based on the Seurat-class object\n\n\nSubsequently, we segregated the cells into two groups analysis.\n\n在撰写研究结果时，可以采取一种逐步细化的方法。",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>结果</span>"
    ]
  },
  {
    "objectID": "paper-methods.html",
    "href": "paper-methods.html",
    "title": "32  方法",
    "section": "",
    "text": "32.1 数据收集和整理\n在生物信息学研究中，尤其是当研究基于公开数据时，详细记录数据的收集和下载过程是至关重要的。这种透明度对于确保研究的可靠性和可重复性至关重要。通过清晰地描述数据的来源、收集方法和下载步骤，我们为其他研究者提供了一个清晰的指南，使他们能够理解数据的合理性和适用性。此外，详细说明数据的获取过程也有助于建立研究的信誉，因为它允许读者评估数据的质量和相关性。这包括提供数据集的详细信息，如数据集的名称、来源链接、访问日期以及任何必要的数据集描述或特征。",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>方法</span>"
    ]
  },
  {
    "objectID": "paper-methods.html#数据收集和整理",
    "href": "paper-methods.html#数据收集和整理",
    "title": "32  方法",
    "section": "",
    "text": "Standardized RNA-Seq reads from the LIHC-US and LIRI-JP projects (Release 28) were retrieved from The Cancer Genome Atlas (TCGA, https://cancergenome.nih.gov/) and the International Cancer Genome Consortium (ICGC, https://dcc.icgc.org/), respectively.\n\n\nBased on the TNM staging system, HCC is classified into four stages: stage I, stage II, stage III, and stage IV.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>方法</span>"
    ]
  },
  {
    "objectID": "paper-methods.html#数据整合",
    "href": "paper-methods.html#数据整合",
    "title": "32  方法",
    "section": "32.2 数据整合",
    "text": "32.2 数据整合\n在分析不同来源的转录组数据时，我们面临着批次效应的挑战，这些效应可能会对生物学变异产生干扰。批次效应的存在可能会影响我们对数据的解释，因此，采取适当的方法来降低这些效应是必要的。在研究中，我们明确指出了用于减少批次效应的策略和技术，包括但不限于数据标准化、批次校正算法或多变量分析方法。我们详细描述了所采用的方法。这些信息对于其他研究者来说是至关重要的，因为它们不仅有助于理解我们如何控制批次效应，而且也为其他研究提供了可能的解决方案。通过这种方法，我们确保了研究结果的生物学解释更加准确，减少了批次效应对数据的潜在影响，从而提高了研究的质量和可信度。\n\nA consolidated dataset incorporating the LIHC-US and LIRI-JP datasets was created using the R packages “limma” (version 3.58.11) and “SNM” (version 1.50.0).",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>方法</span>"
    ]
  },
  {
    "objectID": "paper-methods.html#差异基因分析",
    "href": "paper-methods.html#差异基因分析",
    "title": "32  方法",
    "section": "32.3 差异基因分析",
    "text": "32.3 差异基因分析\n在执行差异分析的过程中，我们首先详细说明了所使用的软件工具和版本信息，确保了分析过程的透明度和标准化。此外，我们明确了用于判断基因表达差异显著性的标准，包括使用的统计测试、阈值设定以及校正多重比较的方法。\n\nTo identify differentially expressed genes (DEGs) in the merged dataset, we applied a threshold of |logFC| &gt; 0.5 and an adjusted-pvalue &lt; 0.05 using the “limma” (version 3.58.11) R package.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>方法</span>"
    ]
  },
  {
    "objectID": "paper-methods.html#功能富集分析",
    "href": "paper-methods.html#功能富集分析",
    "title": "32  方法",
    "section": "32.4 功能富集分析",
    "text": "32.4 功能富集分析\n功能富集分析需要做和差异分析类型的处理。\n\nGene Ontology (GO) enrichment analysis was carried out to explore the biological significance of the differentially expressed genes (DEGs) utilizing the clusterProfiler (version 4.10.1) R package.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>方法</span>"
    ]
  },
  {
    "objectID": "paper-methods.html#免疫浸润分析",
    "href": "paper-methods.html#免疫浸润分析",
    "title": "32  方法",
    "section": "32.5 免疫浸润分析",
    "text": "32.5 免疫浸润分析\n同理免疫浸润分析也是类似的道理。\n\nThe ImmuCellAI, a gene set signature-driven approach, serves as a deconvolution algorithm capable of estimating the abundance of 24 distinct immune cell types.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>方法</span>"
    ]
  },
  {
    "objectID": "paper-methods.html#候选标记物识别",
    "href": "paper-methods.html#候选标记物识别",
    "title": "32  方法",
    "section": "32.6 候选标记物识别",
    "text": "32.6 候选标记物识别\n该部分是我们研究方法学的核心，详细描述了如何利用机器学习技术识别候选生物标记物。我们采用了三种不同的机器学习方法，并明确了每种方法所涉及的软件工具、分析步骤以及用于评估模型性能的判断标准。\n\nIn conclusion, we consolidated the overlapping genes identified by the LASSO-LR, SVM-RFE, and Brouta-RF algorithms for further analysis.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>方法</span>"
    ]
  },
  {
    "objectID": "paper-methods.html#诊断roc曲线",
    "href": "paper-methods.html#诊断roc曲线",
    "title": "32  方法",
    "section": "32.7 诊断ROC曲线",
    "text": "32.7 诊断ROC曲线\n在诊断生物标记物的研究中，接收者操作特征（ROC）曲线扮演着至关重要的角色。ROC曲线的绘制和分析对于判断标记物的诊断效能至关重要。为了确保评估过程的透明度和结果的可重复性，我们明确指出了用于生成ROC曲线的软件工具及其版本。\n\nThe effectiveness of each diagnostic biomarker was evaluated using receiver operating characteristic (ROC) curves generated by the “pROC” (version 1.18.5) and “multipleROC” (version 0.1.1) R packages.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>方法</span>"
    ]
  },
  {
    "objectID": "paper-methods.html#单细胞分析",
    "href": "paper-methods.html#单细胞分析",
    "title": "32  方法",
    "section": "32.8 单细胞分析",
    "text": "32.8 单细胞分析\n在进行单细胞分析的过程中，我们特别强调了所使用的软件工具及其版本的重要性。详细记录了软件的配置参数和分析流程，包括数据预处理、质量控制、细胞类型鉴定、基因表达模式的聚类分析以及差异表达基因的识别。这些步骤的详细描述不仅有助于其他研究者理解我们的分析方法，而且也便于他们在自己的研究中应用相似的分析策略。\n\nThe GSE149614 raw data was retrieved from GEO databases.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>方法</span>"
    ]
  },
  {
    "objectID": "paper-methods.html#统计方法",
    "href": "paper-methods.html#统计方法",
    "title": "32  方法",
    "section": "32.9 统计方法",
    "text": "32.9 统计方法\n统计方法是文章必不可少的部分，明确软件的版本等信息。\n\nStatistical analysis was performed using R (version 4.3.3) and RStudio (version 2023.12.1+402).",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>方法</span>"
    ]
  },
  {
    "objectID": "paper-discussion.html",
    "href": "paper-discussion.html",
    "title": "33  讨论",
    "section": "",
    "text": "33.1 段落逻辑\n在第一段中，我们首先重申了研究的背景，阐明了进行这项研究的必要性和重要性。我们指出了研究的主要目的，并简述了我们选择的研究方法和设计。我们旨在为读者提供一个清晰的框架，帮助他们理解研究的核心内容。这不仅为后续的深入讨论提供了基础，而且也突出了研究的创新点和科学价值。\n在该段讨论部分，我们综合考虑了第一、第二和第三结果，以探讨它们在早晚期肿瘤发展中的基因表达、功能变化和免疫细胞浸润方面的综合影响。我们的目标是揭示这些差异的生物学基础，并评估它们对临床实践的潜在指导意义。通过对这些结果的深入分析，我们不仅能够更好地理解肿瘤发展的分子机制，而且能够为临床医生提供关于疾病监测、治疗选择和患者管理的新见解。\n在讨论部分的后续内容中，我们专注于对第四部分中识别出的标记物进行深入的生物学探讨。特别是，我们将重点分析SLC6A8基因，以验证其与肝细胞癌（HCC）的生物学过程的相关性，并探讨其作为潜在诊断标记物的科学依据。通过对SLC6A8基因的功能、其在HCC发展中的潜在作用机制，以及其在现有文献中的相关性进行综合分析，我们提供了有力的证据，支持SLC6A8基因与HCC的发生和发展密切相关。\n接着我们又对第五部分标记物尤其是SLC6A8和免疫细胞的相关性进行了讨论，探究SLC6A8和免疫微环境的相互关系在生物学上的意义\n然后我们对第六部分单细胞研究的结果进行讨论（这一部分有点羸弱，暂时没有看到什么好的单细胞文章验证SLC6A8的结果）。\n最后我们需要对整体讨论做一个总结。\n还需要补充上研究的局限性。",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>讨论</span>"
    ]
  },
  {
    "objectID": "paper-discussion.html#段落逻辑",
    "href": "paper-discussion.html#段落逻辑",
    "title": "33  讨论",
    "section": "",
    "text": "HCC, characterized by high morbidity and mortality rates, has emerged as a significant cause of cancer-related deaths globally.\n\n\n\nIn this study, we identified 137 down-regulated genes and 291 up-regulated genes, and found that some of these differentially expressed genes (DEGs) were enriched in cancer-related pathways such as the p53 signaling pathway and tryptophan metabolism.\n\n\n\nUtilizing LASSO analysis, RF-Boruta, and SVM-REF, we screened ten differentially expressed genes (DEGs) at the intersection of various gene sets: SLC6A8, FTCD, CYP2C9, ANGPT2, ENO1, CNGA1, KCNJ15, SLC39A4, ETV1, and ACSL6. These genes have been previously implicated in a diverse array of malignancies\n\n\n\nThere was a disparity in immune capacity between the two stages of HCC, yet the specific immunity associated with SLC6A8 remained unclear.\n\n\n\nWe further examined whether the expression of SLC6A8 at the single-cell transcriptome level and in vitro experimentation concurred with bulk-RNA sequencing findings.\n\n\n\nIn summary, our transcriptomic data analysis revealed a significant upregulation of SLC6A8 in the late stage of HCC.\n\n\n\nIn our study, we have identified potential diagnostic biomarkers for both the early and late stages of HCC, supported by transcriptomic data and validated through single-cell transcriptomic analysis and in vitro experiments. While one limitation",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>讨论</span>"
    ]
  },
  {
    "objectID": "paper-introduction.html",
    "href": "paper-introduction.html",
    "title": "34  介绍",
    "section": "",
    "text": "本研究通过以下部分来组织引言：\n\n肝细胞癌（HCC）作为一种高致命性的癌症，其早期诊断和有效治疗一直是医学领域面临的重要挑战。HCC的复杂性以及肿瘤微环境的异质性使得其诊断和治疗变得尤为困难。因此，深入理解HCC的免疫微环境，并发展出高效、准确的早期诊断方法，对于提高HCC患者的生存率和生活质量具有重要意义。\n\n\nHepatocellular carcinoma (HCC), which ranked as the fourth leading cause of death globally in 2018, remains a significant global health concern\n\n\n近年来，基于基因等单分子诊断预测的研究在HCC领域展现出了巨大的潜力和前景。通过深入研究HCC的基因组、转录组等分子特征，我们可以更准确地了解肿瘤的生物学特性和演变规律，为疾病的诊断和治疗提供有力支持。\n\n\nIn recent decades, HCC has garnered significant attention in the research landscape. For instance, certain genes like CLTA, TALDO1, and CSTB, identified as a gene signature via single-cell RNA sequencing, have been linked to survival outcomes and immunotherapy responses\n\n\n在数据驱动的时代背景下，二代测序技术和机器学习的结合为单分子诊断模型的发展提供了新的思路和方法。通过高通量测序技术获取海量的基因数据，结合机器学习算法进行深度分析和挖掘，我们可以更准确地预测HCC的发生、发展和转移风险，为临床决策提供科学依据。\n\n\nRecently, the rapid advancements in next-generation sequencing technologies have yielded vast amounts of RNA sequencing data for hepatocellular carcinoma (HCC).\n\n\n本研究正是在这样的背景下展开，通过综合运用二代测序和机器学习技术，我们深入探究了HCC的免疫微环境，并构建了一种高效、准确的单分子诊断模型。本研究的主要结果将为HCC的早期诊断和精准治疗提供新的思路和方法，具有重要的临床意义和科研价值。\n\n\nIn this study, we harnessed well-established bioinformatic tools to search for potential biomarkers that could indicate the advanced stage of hepatocellular carcinoma (HCC).",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>介绍</span>"
    ]
  },
  {
    "objectID": "paper-others.html",
    "href": "paper-others.html",
    "title": "35  结论和摘要",
    "section": "",
    "text": "35.1 结论\n撰写一篇科学研究文章的结论部分，需要对研究结果进行精炼的总结，并强调其对领域内的贡献和意义。本研究核心发现在于找到了SLC6A8作为HCC早晚期诊断标记物。",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>结论和摘要</span>"
    ]
  },
  {
    "objectID": "paper-others.html#结论",
    "href": "paper-others.html#结论",
    "title": "35  结论和摘要",
    "section": "",
    "text": "In summary",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>结论和摘要</span>"
    ]
  },
  {
    "objectID": "paper-others.html#摘要",
    "href": "paper-others.html#摘要",
    "title": "35  结论和摘要",
    "section": "35.2 摘要",
    "text": "35.2 摘要\n文章的摘要是整篇文章的缩影，它简洁地概述了研究的主要内容和结论。摘要通常包括以下几个要素：1) 研究目的：探究HCC的早晚期诊断标记物。2) 研究方法：基于大数据的多种机器学习方法。3)研究结果：机器学习筛选到10个候选标记物，其中以SLC6A8为最佳。4)结论：SLC6A8可能可以作为临床诊断标记物。\n\nHepatocellular carcinoma (HCC), a chronic liver disease marked by persistent tumor development, represents a substantial global burden, contributing significantly to mortality rates.",
    "crumbs": [
      "撰写文章",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>结论和摘要</span>"
    ]
  },
  {
    "objectID": "paper-manuscript.html",
    "href": "paper-manuscript.html",
    "title": "初稿",
    "section": "",
    "text": "Title\nMultiple machine learning algorithms have pinpointed SLC6A8 as a diagnostic biomarker for the late stage of Hepatocellular carcinoma.",
    "crumbs": [
      "撰写文章",
      "初稿"
    ]
  },
  {
    "objectID": "paper-manuscript.html#abstract",
    "href": "paper-manuscript.html#abstract",
    "title": "初稿",
    "section": "Abstract",
    "text": "Abstract",
    "crumbs": [
      "撰写文章",
      "初稿"
    ]
  },
  {
    "objectID": "paper-manuscript.html#introduction",
    "href": "paper-manuscript.html#introduction",
    "title": "初稿",
    "section": "Introduction",
    "text": "Introduction",
    "crumbs": [
      "撰写文章",
      "初稿"
    ]
  },
  {
    "objectID": "paper-manuscript.html#materials-and-methods",
    "href": "paper-manuscript.html#materials-and-methods",
    "title": "初稿",
    "section": "Materials and methods",
    "text": "Materials and methods\n\nData collection and download\n\n\nData Integration\n\n\nDifferential Expression Genes\n\n\nFunctional enrichment analysis\n\n\nImmune cell infiltration\n\n\nPotential biomarkers selection\n\n\nROC of diagnostic biomarker\n\n\nSingle cell transcriptome data processing and analyzing\n\n\nStatistical analysis",
    "crumbs": [
      "撰写文章",
      "初稿"
    ]
  },
  {
    "objectID": "paper-manuscript.html#results",
    "href": "paper-manuscript.html#results",
    "title": "初稿",
    "section": "Results",
    "text": "Results\n\nIdentification of DEGs in the HCC early stage and late stage\n\n\n\nFigure 1\n\n\n\n\n\n\n\n\n\n\n\nFigure 2A\n\n\n\n\n\n\n\nFigure 2B\n\n\n\n\n\n\n\nFunctional analysis of DEGs by GO and KEGG enrichment analysis\n\n\n\n\n\n\n\n\n\n\n\n\n图 1: Figure 3A\n\n\n\n\n\n\n\n\n\n\n\n图 2: Figure 3C\n\n\n\n\n\n\n\n\n\n\n\n\n\n图 3: Figure 3B\n\n\n\n\n\n\n\n\n\n\n\n图 4: Figure 3D\n\n\n\n\n\n\n\n\nSignificant changes between two stages in immune cells by ImmuneCellAI\n\n\n\n\n\n\n\n\n\n\n\n\n图 5: Figure 4A\n\n\n\n\n\n\n\n\n\n\n\n图 6: Figure 4B\n\n\n\n\n\n\n\n\n\n\n\n\n\n图 7: Figure 4C\n\n\n\n\n\n\n\n\n\n\n\n图 8: Figure 4D\n\n\n\n\n\n\n\n\nPotential gene biomarkers identified by multiple machine learning approaches\n\n\n\n\n\n\n\n\n\n\n\n\n图 9: Figure 5A1\n\n\n\n\n\n\n\n\n\n\n\n图 10: Figure 5A2\n\n\n\n\n\n\n\n\n\n\n\n\n\n图 11: Figure 5B\n\n\n\n\n\n\n\n\n\n\n\n图 12: Figure 5D\n\n\n\n\n\n\n\n\n\n\n\n\n\n图 13: Figure 5C\n\n\n\n\n\n\n\n\n\n\n\n图 14: Figure 5E\n\n\n\n\n\n\n\n\nCorrelation analysis between SLC6A8 and immune cells\n\n\n\n\n\n\n\n\n\n\n\n\n图 15: Figure 6A\n\n\n\n\n\n\n\n\n\n\n\n图 16: Figure 6B\n\n\n\n\n\n\n\n\n\n\n\n\n\n图 17: Figure 6C\n\n\n\n\n\n\n\n\n\n\n\n图 18: Figure 6D\n\n\n\n\n\n\n\n\nExpression level of SLC6A8 in single-cell transcriptomic data\n\n\n\n\n\n\n\n\n\n\n\n\n图 19: Figure 7A\n\n\n\n\n\n\n\n\n\n\n\n图 20: Figure 7B\n\n\n\n\n\n\n\n\n\n\n\n\n\n图 21: Figure 7C\n\n\n\n\n\n\n\n\n\n\n\n图 22: Figure 7D",
    "crumbs": [
      "撰写文章",
      "初稿"
    ]
  },
  {
    "objectID": "paper-manuscript.html#discussion",
    "href": "paper-manuscript.html#discussion",
    "title": "初稿",
    "section": "Discussion",
    "text": "Discussion",
    "crumbs": [
      "撰写文章",
      "初稿"
    ]
  },
  {
    "objectID": "paper-manuscript.html#conclusion",
    "href": "paper-manuscript.html#conclusion",
    "title": "初稿",
    "section": "Conclusion",
    "text": "Conclusion",
    "crumbs": [
      "撰写文章",
      "初稿"
    ]
  },
  {
    "objectID": "paper-manuscript.html#limitation-of-the-study",
    "href": "paper-manuscript.html#limitation-of-the-study",
    "title": "初稿",
    "section": "Limitation of the study",
    "text": "Limitation of the study",
    "crumbs": [
      "撰写文章",
      "初稿"
    ]
  },
  {
    "objectID": "paper-manuscript.html#supplemental-figures",
    "href": "paper-manuscript.html#supplemental-figures",
    "title": "初稿",
    "section": "Supplemental Figures",
    "text": "Supplemental Figures",
    "crumbs": [
      "撰写文章",
      "初稿"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Anderson, Marti J. 2014. “Permutational Multivariate Analysis of\nVariance (PERMANOVA).” Wiley Statsref: Statistics Reference\nOnline, 1–15.\n\n\nAndreatta, Massimo, and Santiago J Carmona. 2021. “UCell: Robust\nand Scalable Single-Cell Gene Signature Scoring.”\nComputational and Structural Biotechnology Journal 19: 3796–98.\n\n\nConway, Jake R, Alexander Lex, and Nils Gehlenborg. 2017. “UpSetR:\nAn r Package for the Visualization of Intersecting Sets and Their\nProperties.” Bioinformatics 33 (18): 2938–40.\n\n\nDean Attali, Christopher Baker. 2019. “ggExtra: Add Marginal\nHistograms to ’Ggplot2’, and More ’Ggplot2’ Enhancements.” https://github.com/daattali/ggExtra.\n\n\nDolgalev, Igor. 2020. “Msigdbr: MSigDB Gene Sets for Multiple\nOrganisms in a Tidy Data Format.” R Package Version 7\n(1).\n\n\nFriedman, Jerome, Trevor Hastie, and Rob Tibshirani. 2010.\n“Regularization Paths for Generalized Linear Models via Coordinate\nDescent.” Journal of Statistical Software 33 (1): 1.\n\n\nGu, Zuguang, Roland Eils, and Matthias Schlesner. 2016. “Complex\nHeatmaps Reveal Patterns and Correlations in Multidimensional Genomic\nData.” Bioinformatics 32 (18): 2847–49.\n\n\nGu, Zuguang, Lei Gu, Roland Eils, Matthias Schlesner, and Benedikt\nBrors. 2014. “\" Circlize\" Implements and Enhances Circular\nVisualization in r.”\n\n\nHänzelmann, Sonja, Robert Castelo, and Justin Guinney. 2013.\n“GSVA: Gene Set Variation Analysis for Microarray and RNA-Seq\nData.” BMC Bioinformatics 14: 1–15.\n\n\nHao, Yuhan, Tim Stuart, Madeline H Kowalski, Saket Choudhary, Paul\nHoffman, Austin Hartman, Avi Srivastava, et al. 2024. “Dictionary\nLearning for Integrative, Multimodal and Scalable Single-Cell\nAnalysis.” Nature Biotechnology 42 (2): 293–304.\n\n\nHarrell Jr, Frank E, and Maintainer Frank E Harrell Jr. 2019.\n“Package ‘Hmisc’.” CRAN2018 2019:\n235–36.\n\n\nHuber, Wolfgang, Vincent J Carey, Robert Gentleman, Simon Anders, Marc\nCarlson, Benilton S Carvalho, Hector Corrada Bravo, et al. 2015.\n“Orchestrating High-Throughput Genomic Analysis with\nBioconductor.” Nature Methods 12 (2): 115–21.\n\n\nKay, Matthew. 2023. “Ggdist: Visualizations of Distributions and\nUncertainty in the Grammar of Graphics.” IEEE Transactions on\nVisualization and Computer Graphics.\n\n\nKolde, Raivo et al. 2019. “Pheatmap: Pretty Heatmaps.”\nR Package Version 1 (2): 726.\n\n\nKuhn, Max. 2008. “Building Predictive Models in r Using the Caret\nPackage.” Journal of Statistical Software 28: 1–26.\n\n\nKursa, Miron B, and Witold R Rudnicki. 2010. “Feature Selection\nwith the Boruta Package.” Journal of Statistical\nSoftware 36: 1–13.\n\n\nLeek, Jeffrey T, and John D Storey. 2007. “Capturing Heterogeneity\nin Gene Expression Studies by Surrogate Variable Analysis.”\nPLoS Genetics 3 (9): e161.\n\n\nLiaw, Andy, Matthew Wiener, et al. 2002. “Classification and\nRegression by randomForest.” R News 2 (3): 18–22.\n\n\nLyu, Yulin. 2021. “Ggunchull: A Ggplot Extension for Drawing\nSmooth Non-Convex Irregular Hulls Around Groups of Points.” https://github.com/sajuukLyu/ggunchull.\n\n\nMecham, Brigham H, Peter S Nelson, and John D Storey. 2010.\n“Supervised Normalization of Microarrays.”\nBioinformatics 26 (10): 1308–15.\n\n\nMiao, Ya-Ru, Qiong Zhang, Qian Lei, Mei Luo, Gui-Yan Xie, Hongxiang\nWang, and An-Yuan Guo. 2020. “ImmuCellAI: A Unique Method for\nComprehensive t-Cell Subsets Abundance Prediction and Its Application in\nCancer Immunotherapy.” Advanced Science 7 (7): 1902880.\n\n\nMoon, Keon-Woong. 2019. “The multipleROC Package.” https://github.com/cardiomoon/multipleROC.\n\n\nPoore, Gregory D, Evguenia Kopylova, Qiyun Zhu, Carolina Carpenter,\nSerena Fraraccio, Stephen Wandro, Tomasz Kosciolek, et al. 2020.\n“Microbiome Analyses of Blood and Tissues Suggest Cancer\nDiagnostic Approach.” Nature 579 (7800): 567–74.\n\n\nRitchie, Matthew E, Belinda Phipson, DI Wu, Yifang Hu, Charity W Law,\nWei Shi, and Gordon K Smyth. 2015. “Limma Powers Differential\nExpression Analyses for RNA-Sequencing and Microarray Studies.”\nNucleic Acids Research 43 (7): e47–47.\n\n\nRobin, Xavier, Natacha Turck, Alexandre Hainard, Natalia Tiberti,\nFrédérique Lisacek, Jean-Charles Sanchez, and Markus Müller. 2011.\n“pROC: An Open-Source Package for r and s+ to Analyze and Compare\nROC Curves.” BMC Bioinformatics 12: 1–8.\n\n\nSarkar, Deepayan. 2008. lattice:\nMultivariate Data Visualization with R. New York:\nSpringer. http://lmdvr.r-forge.r-project.org.\n\n\nShao, Xin, Jie Liao, Xiaoyan Lu, Rui Xue, Ni Ai, and Xiaohui Fan. 2020.\n“scCATCH: Automatic Annotation on Cell Types of Clusters from\nSingle-Cell RNA Sequencing Data.” Iscience 23 (3).\n\n\nShen, Xiaotao, Hong Yan, Chuchu Wang, Peng Gao, Caroline H Johnson, and\nMichael P Snyder. 2022. “TidyMass an Object-Oriented Reproducible\nAnalysis Framework for LC–MS Data.” Nature\nCommunications 13 (1): 4365.\n\n\nSturm, Gregor, Francesca Finotello, and Markus List. 2020.\n“Immunedeconv: An r Package for Unified Access to Computational\nMethods for Estimating Immune Cell Fractions from Bulk RNA-Sequencing\nData.” Bioinformatics for Cancer Immunotherapy: Methods and\nProtocols, 223–32.\n\n\nTiedemann, Frederik. 2022. “The Gghalves Package.” https://github.com/erocoar/gghalves.\n\n\nvan den Brand, Teun. 2023. Ggh4x: Hacks for ’Ggplot2’. https://github.com/teunbrand/ggh4x.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant\nGraphics for Data Analysis. 2nd ed. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWilke, Claus O. 2019. “Cowplot: Streamlined Plot Theme and Plot\nAnnotations for ’Ggplot2’.” https://github.com/wilkelab/cowplot.\n\n\nXie, Yihui. 2015. Dynamic Documents with R and\nKnitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://yihui.org/knitr/.\n\n\nYan, Linlin, and Maintainer Linlin Yan. 2021. “Package\n‘Ggvenn.’” Google Scholar.\n\n\nYan, Yachen. 2016. “MLmetrics: Machine Learning Evaluation\nMetrics.” https://github.com/yanyachen/MLmetrics.\n\n\nYang, Yuwei, Yan Cao, Xiaobo Han, Xihui Ma, Rui Li, Rentao Wang, Li\nXiao, and Lixin Xie. 2023. “Revealing EXPH5 as a Potential\nDiagnostic Gene Biomarker of the Late Stage of COPD Based on Machine\nLearning Analysis.” Computers in Biology and Medicine\n154: 106621.\n\n\nYu, Guangchuang. 2014. “Ggplotify: Convert Plot to ’Grob’ or\n’Ggplot’ Object.” https://github.com/GuangchuangYu/ggplotify.\n\n\nYu, Guangchuang, Li-Gen Wang, Yanyan Han, and Qing-Yu He. 2012.\n“clusterProfiler: An r Package for Comparing Biological Themes\nAmong Gene Clusters.” Omics: A Journal of Integrative\nBiology 16 (5): 284–87.\n\n\nZhang, Jun. 2022. “GseaVis: An Implement r Package to Visualize\nGSEA Results.” https://github.com/junjunlab/GseaVis.\n\n\nZou, Hua. 2022. “MicrobiomeAnalysis: An r Package for\nAnalysis and Visualization in Metagenomics.” https://github.com/HuaZou/MicrobiomeAnalysis/.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "appendices.html",
    "href": "appendices.html",
    "title": "附录 A — 补充知识",
    "section": "",
    "text": "A.1 数据库\n这些数据库和资源是生物医学研究中常用的工具，它们提供不同类型的数据和分析服务，帮助研究人员在各自的领域中找到创新点和进行深入研究。下面是对每个数据库的简要介绍，包括它们的网址和主要作用：",
    "crumbs": [
      "附录",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>补充知识</span>"
    ]
  },
  {
    "objectID": "appendices.html#数据库",
    "href": "appendices.html#数据库",
    "title": "附录 A — 补充知识",
    "section": "",
    "text": "Pay Attention\n\n\n\n持续更新生物医学研究相关的数据库列表…\n\n\n\n\nPubMed: PubMed是一个免费的搜索引擎，主要提供生物医学和生命科学领域的文献检索服务。它包含大量的期刊文章、会议记录、书籍章节等，是查找最新研究和文献的重要资源。",
    "crumbs": [
      "附录",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>补充知识</span>"
    ]
  },
  {
    "objectID": "appendices.html#r学习材料",
    "href": "appendices.html#r学习材料",
    "title": "附录 A — 补充知识",
    "section": "A.2 R学习材料",
    "text": "A.2 R学习材料\n互联网上有很多R语言学习材料，本书仅仅列出部分：\n\n首推四川师范大学研究生公选课数据科学中的 R 语言。",
    "crumbs": [
      "附录",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>补充知识</span>"
    ]
  },
  {
    "objectID": "appendices.html#r与统计",
    "href": "appendices.html#r与统计",
    "title": "附录 A — 补充知识",
    "section": "A.3 R与统计",
    "text": "A.3 R与统计\n\n应用统计学与R语言实现学习笔记，适合结合R语言了解统计概念。",
    "crumbs": [
      "附录",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>补充知识</span>"
    ]
  }
]